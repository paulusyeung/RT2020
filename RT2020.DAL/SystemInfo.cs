using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.SystemInfo.
    /// Date Created:   2020-08-09 02:14:17
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class SystemInfo
    {
        private Guid key = Guid.Empty;
        private Guid infoId = Guid.Empty;
        private string shopNumber = String.Empty;
        private string companyNameInitial = String.Empty;
        private string companyName = String.Empty;
        private string companyName_Chs = String.Empty;
        private string companyName_Cht = String.Empty;
        private string companyAddess = String.Empty;
        private string companyAddress_Chs = String.Empty;
        private string companyAddress_Cht = String.Empty;
        private string tEL = String.Empty;
        private string fAX = String.Empty;
        private string eMail = String.Empty;
        private string uRL = String.Empty;
        private string lOGO = String.Empty;
        private string letterHead = String.Empty;
        private int lastMonthEnd = 0;
        private int lastYearEnd = 0;
        private string basicCurrency = String.Empty;
        private string oTBClassLevel = String.Empty;
        private decimal taxRate;
        private string taxRegisterNumber = String.Empty;
        private string barcodeLabelFormat = String.Empty;
        private int lastMonthEnd_AR = 0;
        private int lastYearEnd_AR = 0;
        private int lastMonthEnd_AP = 0;
        private int lastYearEnd_AP = 0;
        private bool priceTag_TaxInclusive;
        private string hotSyncMode_HHT = String.Empty;
        private string packetType = String.Empty;
        private bool allowMultiplePricebook;
        private bool needConsolidation;
        private bool restrictPriceChange;
        private bool enableBarcodeFastInput;
        private bool enablePOCostBreakDown;
        private DateTime lastExportedOn = DateTime.Parse("1900-1-1");
        private DateTime lastSynchronizedOn = DateTime.Parse("1900-1-1");
        private Guid zoneId = Guid.Empty;

        /// <summary>
        /// Initialize an new empty SystemInfo object.
        /// </summary>
        public SystemInfo()
        {
        }
		
        /// <summary>
        /// Initialize a new SystemInfo object with the given parameters.
        /// </summary>
        public SystemInfo(Guid infoId, string shopNumber, string companyNameInitial, string companyName, string companyName_Chs, string companyName_Cht, string companyAddess, string companyAddress_Chs, string companyAddress_Cht, string tEL, string fAX, string eMail, string uRL, string lOGO, string letterHead, int lastMonthEnd, int lastYearEnd, string basicCurrency, string oTBClassLevel, decimal taxRate, string taxRegisterNumber, string barcodeLabelFormat, int lastMonthEnd_AR, int lastYearEnd_AR, int lastMonthEnd_AP, int lastYearEnd_AP, bool priceTag_TaxInclusive, string hotSyncMode_HHT, string packetType, bool allowMultiplePricebook, bool needConsolidation, bool restrictPriceChange, bool enableBarcodeFastInput, bool enablePOCostBreakDown, DateTime lastExportedOn, DateTime lastSynchronizedOn, Guid zoneId)
        {
                this.infoId = infoId;
                this.shopNumber = shopNumber;
                this.companyNameInitial = companyNameInitial;
                this.companyName = companyName;
                this.companyName_Chs = companyName_Chs;
                this.companyName_Cht = companyName_Cht;
                this.companyAddess = companyAddess;
                this.companyAddress_Chs = companyAddress_Chs;
                this.companyAddress_Cht = companyAddress_Cht;
                this.tEL = tEL;
                this.fAX = fAX;
                this.eMail = eMail;
                this.uRL = uRL;
                this.lOGO = lOGO;
                this.letterHead = letterHead;
                this.lastMonthEnd = lastMonthEnd;
                this.lastYearEnd = lastYearEnd;
                this.basicCurrency = basicCurrency;
                this.oTBClassLevel = oTBClassLevel;
                this.taxRate = taxRate;
                this.taxRegisterNumber = taxRegisterNumber;
                this.barcodeLabelFormat = barcodeLabelFormat;
                this.lastMonthEnd_AR = lastMonthEnd_AR;
                this.lastYearEnd_AR = lastYearEnd_AR;
                this.lastMonthEnd_AP = lastMonthEnd_AP;
                this.lastYearEnd_AP = lastYearEnd_AP;
                this.priceTag_TaxInclusive = priceTag_TaxInclusive;
                this.hotSyncMode_HHT = hotSyncMode_HHT;
                this.packetType = packetType;
                this.allowMultiplePricebook = allowMultiplePricebook;
                this.needConsolidation = needConsolidation;
                this.restrictPriceChange = restrictPriceChange;
                this.enableBarcodeFastInput = enableBarcodeFastInput;
                this.enablePOCostBreakDown = enablePOCostBreakDown;
                this.lastExportedOn = lastExportedOn;
                this.lastSynchronizedOn = lastSynchronizedOn;
                this.zoneId = zoneId;
        }	
		
        /// <summary>
        /// Loads a SystemInfo object from the database using the given InfoId
        /// </summary>
        /// <param name="infoId">The primary key value</param>
        /// <returns>A SystemInfo object</returns>
        public static SystemInfo Load(Guid infoId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@InfoId", infoId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spSystemInfo_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    SystemInfo result = new SystemInfo();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a SystemInfo object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A SystemInfo object</returns>
        public static SystemInfo LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spSystemInfo_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    SystemInfo result = new SystemInfo();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of SystemInfo objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the SystemInfo objects in the database.</returns>
        public static SystemInfoCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spSystemInfo_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of SystemInfo objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the SystemInfo objects in the database ordered by the columns specified.</returns>
        public static SystemInfoCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spSystemInfo_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of SystemInfo objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the SystemInfo objects in the database.</returns>
        public static SystemInfoCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spSystemInfo_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of SystemInfo objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the SystemInfo objects in the database ordered by the columns specified.</returns>
        public static SystemInfoCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spSystemInfo_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of SystemInfo objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the SystemInfo objects in the database.</returns>
        public static SystemInfoCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            SystemInfoCollection result = new SystemInfoCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    SystemInfo tmp = new SystemInfo();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a SystemInfo object from the database.
        /// </summary>
        /// <param name="infoId">The primary key value</param>
        public static void Delete(Guid infoId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@InfoId", infoId) };
            SqlHelper.Default.ExecuteNonQuery("spSystemInfo_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) infoId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) shopNumber = reader.GetString(1);
                if (!reader.IsDBNull(2)) companyNameInitial = reader.GetString(2);
                if (!reader.IsDBNull(3)) companyName = reader.GetString(3);
                if (!reader.IsDBNull(4)) companyName_Chs = reader.GetString(4);
                if (!reader.IsDBNull(5)) companyName_Cht = reader.GetString(5);
                if (!reader.IsDBNull(6)) companyAddess = reader.GetString(6);
                if (!reader.IsDBNull(7)) companyAddress_Chs = reader.GetString(7);
                if (!reader.IsDBNull(8)) companyAddress_Cht = reader.GetString(8);
                if (!reader.IsDBNull(9)) tEL = reader.GetString(9);
                if (!reader.IsDBNull(10)) fAX = reader.GetString(10);
                if (!reader.IsDBNull(11)) eMail = reader.GetString(11);
                if (!reader.IsDBNull(12)) uRL = reader.GetString(12);
                if (!reader.IsDBNull(13)) lOGO = reader.GetString(13);
                if (!reader.IsDBNull(14)) letterHead = reader.GetString(14);
                if (!reader.IsDBNull(15)) lastMonthEnd = reader.GetInt32(15);
                if (!reader.IsDBNull(16)) lastYearEnd = reader.GetInt32(16);
                if (!reader.IsDBNull(17)) basicCurrency = reader.GetString(17);
                if (!reader.IsDBNull(18)) oTBClassLevel = reader.GetString(18);
                if (!reader.IsDBNull(19)) taxRate = reader.GetDecimal(19);
                if (!reader.IsDBNull(20)) taxRegisterNumber = reader.GetString(20);
                if (!reader.IsDBNull(21)) barcodeLabelFormat = reader.GetString(21);
                if (!reader.IsDBNull(22)) lastMonthEnd_AR = reader.GetInt32(22);
                if (!reader.IsDBNull(23)) lastYearEnd_AR = reader.GetInt32(23);
                if (!reader.IsDBNull(24)) lastMonthEnd_AP = reader.GetInt32(24);
                if (!reader.IsDBNull(25)) lastYearEnd_AP = reader.GetInt32(25);
                if (!reader.IsDBNull(26)) priceTag_TaxInclusive = reader.GetBoolean(26);
                if (!reader.IsDBNull(27)) hotSyncMode_HHT = reader.GetString(27);
                if (!reader.IsDBNull(28)) packetType = reader.GetString(28);
                if (!reader.IsDBNull(29)) allowMultiplePricebook = reader.GetBoolean(29);
                if (!reader.IsDBNull(30)) needConsolidation = reader.GetBoolean(30);
                if (!reader.IsDBNull(31)) restrictPriceChange = reader.GetBoolean(31);
                if (!reader.IsDBNull(32)) enableBarcodeFastInput = reader.GetBoolean(32);
                if (!reader.IsDBNull(33)) enablePOCostBreakDown = reader.GetBoolean(33);
                if (!reader.IsDBNull(34)) lastExportedOn = reader.GetDateTime(34);
                if (!reader.IsDBNull(35)) lastSynchronizedOn = reader.GetDateTime(35);
                if (!reader.IsDBNull(36)) zoneId = reader.GetGuid(36);
            }
        }
		
        public void Delete()
        {
            Delete(this.InfoId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != InfoId)
                    this.Delete();
                Update();
            }
        }

        public Guid InfoId
        {
            get { return infoId; }
            set { infoId = value; }
        }

        public string ShopNumber
        {
            get { return shopNumber; }
            set { shopNumber = value; }
        }

        public string CompanyNameInitial
        {
            get { return companyNameInitial; }
            set { companyNameInitial = value; }
        }

        public string CompanyName
        {
            get { return companyName; }
            set { companyName = value; }
        }

        public string CompanyName_Chs
        {
            get { return companyName_Chs; }
            set { companyName_Chs = value; }
        }

        public string CompanyName_Cht
        {
            get { return companyName_Cht; }
            set { companyName_Cht = value; }
        }

        public string CompanyAddess
        {
            get { return companyAddess; }
            set { companyAddess = value; }
        }

        public string CompanyAddress_Chs
        {
            get { return companyAddress_Chs; }
            set { companyAddress_Chs = value; }
        }

        public string CompanyAddress_Cht
        {
            get { return companyAddress_Cht; }
            set { companyAddress_Cht = value; }
        }

        public string TEL
        {
            get { return tEL; }
            set { tEL = value; }
        }

        public string FAX
        {
            get { return fAX; }
            set { fAX = value; }
        }

        public string EMail
        {
            get { return eMail; }
            set { eMail = value; }
        }

        public string URL
        {
            get { return uRL; }
            set { uRL = value; }
        }

        public string LOGO
        {
            get { return lOGO; }
            set { lOGO = value; }
        }

        public string LetterHead
        {
            get { return letterHead; }
            set { letterHead = value; }
        }

        public int LastMonthEnd
        {
            get { return lastMonthEnd; }
            set { lastMonthEnd = value; }
        }

        public int LastYearEnd
        {
            get { return lastYearEnd; }
            set { lastYearEnd = value; }
        }

        public string BasicCurrency
        {
            get { return basicCurrency; }
            set { basicCurrency = value; }
        }

        public string OTBClassLevel
        {
            get { return oTBClassLevel; }
            set { oTBClassLevel = value; }
        }

        public decimal TaxRate
        {
            get { return taxRate; }
            set { taxRate = value; }
        }

        public string TaxRegisterNumber
        {
            get { return taxRegisterNumber; }
            set { taxRegisterNumber = value; }
        }

        public string BarcodeLabelFormat
        {
            get { return barcodeLabelFormat; }
            set { barcodeLabelFormat = value; }
        }

        public int LastMonthEnd_AR
        {
            get { return lastMonthEnd_AR; }
            set { lastMonthEnd_AR = value; }
        }

        public int LastYearEnd_AR
        {
            get { return lastYearEnd_AR; }
            set { lastYearEnd_AR = value; }
        }

        public int LastMonthEnd_AP
        {
            get { return lastMonthEnd_AP; }
            set { lastMonthEnd_AP = value; }
        }

        public int LastYearEnd_AP
        {
            get { return lastYearEnd_AP; }
            set { lastYearEnd_AP = value; }
        }

        public bool PriceTag_TaxInclusive
        {
            get { return priceTag_TaxInclusive; }
            set { priceTag_TaxInclusive = value; }
        }

        public string HotSyncMode_HHT
        {
            get { return hotSyncMode_HHT; }
            set { hotSyncMode_HHT = value; }
        }

        public string PacketType
        {
            get { return packetType; }
            set { packetType = value; }
        }

        public bool AllowMultiplePricebook
        {
            get { return allowMultiplePricebook; }
            set { allowMultiplePricebook = value; }
        }

        public bool NeedConsolidation
        {
            get { return needConsolidation; }
            set { needConsolidation = value; }
        }

        public bool RestrictPriceChange
        {
            get { return restrictPriceChange; }
            set { restrictPriceChange = value; }
        }

        public bool EnableBarcodeFastInput
        {
            get { return enableBarcodeFastInput; }
            set { enableBarcodeFastInput = value; }
        }

        public bool EnablePOCostBreakDown
        {
            get { return enablePOCostBreakDown; }
            set { enablePOCostBreakDown = value; }
        }

        public DateTime LastExportedOn
        {
            get { return lastExportedOn; }
            set { lastExportedOn = value; }
        }

        public DateTime LastSynchronizedOn
        {
            get { return lastSynchronizedOn; }
            set { lastSynchronizedOn = value; }
        }

        public Guid ZoneId
        {
            get { return zoneId; }
            set { zoneId = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spSystemInfo_InsRec", "@InfoId", out returnedValue, parameterValues);
            
            infoId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spSystemInfo_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[37];
            prams[0] = GetSqlParameter("@InfoId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.InfoId);
            prams[1] = GetSqlParameter("@ShopNumber", ParameterDirection.Input, SqlDbType.VarChar, 4, this.ShopNumber);
            prams[2] = GetSqlParameter("@CompanyNameInitial", ParameterDirection.Input, SqlDbType.VarChar, 10, this.CompanyNameInitial);
            prams[3] = GetSqlParameter("@CompanyName", ParameterDirection.Input, SqlDbType.NVarChar, 128, this.CompanyName);
            prams[4] = GetSqlParameter("@CompanyName_Chs", ParameterDirection.Input, SqlDbType.NVarChar, 128, this.CompanyName_Chs);
            prams[5] = GetSqlParameter("@CompanyName_Cht", ParameterDirection.Input, SqlDbType.NVarChar, 128, this.CompanyName_Cht);
            prams[6] = GetSqlParameter("@CompanyAddess", ParameterDirection.Input, SqlDbType.NVarChar, 512, this.CompanyAddess);
            prams[7] = GetSqlParameter("@CompanyAddress_Chs", ParameterDirection.Input, SqlDbType.NVarChar, 512, this.CompanyAddress_Chs);
            prams[8] = GetSqlParameter("@CompanyAddress_Cht", ParameterDirection.Input, SqlDbType.NVarChar, 512, this.CompanyAddress_Cht);
            prams[9] = GetSqlParameter("@TEL", ParameterDirection.Input, SqlDbType.NVarChar, 20, this.TEL);
            prams[10] = GetSqlParameter("@FAX", ParameterDirection.Input, SqlDbType.NVarChar, 20, this.FAX);
            prams[11] = GetSqlParameter("@EMail", ParameterDirection.Input, SqlDbType.NVarChar, 128, this.EMail);
            prams[12] = GetSqlParameter("@URL", ParameterDirection.Input, SqlDbType.NVarChar, 256, this.URL);
            prams[13] = GetSqlParameter("@LOGO", ParameterDirection.Input, SqlDbType.NVarChar, 100, this.LOGO);
            prams[14] = GetSqlParameter("@LetterHead", ParameterDirection.Input, SqlDbType.NVarChar, 100, this.LetterHead);
            prams[15] = GetSqlParameter("@LastMonthEnd", ParameterDirection.Input, SqlDbType.Int, 4, this.LastMonthEnd);
            prams[16] = GetSqlParameter("@LastYearEnd", ParameterDirection.Input, SqlDbType.Int, 4, this.LastYearEnd);
            prams[17] = GetSqlParameter("@BasicCurrency", ParameterDirection.Input, SqlDbType.NVarChar, 4, this.BasicCurrency);
            prams[18] = GetSqlParameter("@OTBClassLevel", ParameterDirection.Input, SqlDbType.VarChar, 1, this.OTBClassLevel);
            prams[19] = GetSqlParameter("@TaxRate", ParameterDirection.Input, SqlDbType.Decimal, 9, this.TaxRate);
            prams[20] = GetSqlParameter("@TaxRegisterNumber", ParameterDirection.Input, SqlDbType.VarChar, 20, this.TaxRegisterNumber);
            prams[21] = GetSqlParameter("@BarcodeLabelFormat", ParameterDirection.Input, SqlDbType.VarChar, 10, this.BarcodeLabelFormat);
            prams[22] = GetSqlParameter("@LastMonthEnd_AR", ParameterDirection.Input, SqlDbType.Int, 4, this.LastMonthEnd_AR);
            prams[23] = GetSqlParameter("@LastYearEnd_AR", ParameterDirection.Input, SqlDbType.Int, 4, this.LastYearEnd_AR);
            prams[24] = GetSqlParameter("@LastMonthEnd_AP", ParameterDirection.Input, SqlDbType.Int, 4, this.LastMonthEnd_AP);
            prams[25] = GetSqlParameter("@LastYearEnd_AP", ParameterDirection.Input, SqlDbType.Int, 4, this.LastYearEnd_AP);
            prams[26] = GetSqlParameter("@PriceTag_TaxInclusive", ParameterDirection.Input, SqlDbType.Bit, 1, this.PriceTag_TaxInclusive);
            prams[27] = GetSqlParameter("@HotSyncMode_HHT", ParameterDirection.Input, SqlDbType.VarChar, 1, this.HotSyncMode_HHT);
            prams[28] = GetSqlParameter("@PacketType", ParameterDirection.Input, SqlDbType.VarChar, 10, this.PacketType);
            prams[29] = GetSqlParameter("@AllowMultiplePricebook", ParameterDirection.Input, SqlDbType.Bit, 1, this.AllowMultiplePricebook);
            prams[30] = GetSqlParameter("@NeedConsolidation", ParameterDirection.Input, SqlDbType.Bit, 1, this.NeedConsolidation);
            prams[31] = GetSqlParameter("@RestrictPriceChange", ParameterDirection.Input, SqlDbType.Bit, 1, this.RestrictPriceChange);
            prams[32] = GetSqlParameter("@EnableBarcodeFastInput", ParameterDirection.Input, SqlDbType.Bit, 1, this.EnableBarcodeFastInput);
            prams[33] = GetSqlParameter("@EnablePOCostBreakDown", ParameterDirection.Input, SqlDbType.Bit, 1, this.EnablePOCostBreakDown);
            prams[34] = GetSqlParameter("@LastExportedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.LastExportedOn);
            prams[35] = GetSqlParameter("@LastSynchronizedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.LastSynchronizedOn);
            prams[36] = GetSqlParameter("@ZoneId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ZoneId);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@InfoId", SqlDbType.UniqueIdentifier, 16, this.InfoId),
                GetSqlParameterWithoutDirection("@ShopNumber", SqlDbType.VarChar, 4, this.ShopNumber),
                GetSqlParameterWithoutDirection("@CompanyNameInitial", SqlDbType.VarChar, 10, this.CompanyNameInitial),
                GetSqlParameterWithoutDirection("@CompanyName", SqlDbType.NVarChar, 128, this.CompanyName),
                GetSqlParameterWithoutDirection("@CompanyName_Chs", SqlDbType.NVarChar, 128, this.CompanyName_Chs),
                GetSqlParameterWithoutDirection("@CompanyName_Cht", SqlDbType.NVarChar, 128, this.CompanyName_Cht),
                GetSqlParameterWithoutDirection("@CompanyAddess", SqlDbType.NVarChar, 512, this.CompanyAddess),
                GetSqlParameterWithoutDirection("@CompanyAddress_Chs", SqlDbType.NVarChar, 512, this.CompanyAddress_Chs),
                GetSqlParameterWithoutDirection("@CompanyAddress_Cht", SqlDbType.NVarChar, 512, this.CompanyAddress_Cht),
                GetSqlParameterWithoutDirection("@TEL", SqlDbType.NVarChar, 20, this.TEL),
                GetSqlParameterWithoutDirection("@FAX", SqlDbType.NVarChar, 20, this.FAX),
                GetSqlParameterWithoutDirection("@EMail", SqlDbType.NVarChar, 128, this.EMail),
                GetSqlParameterWithoutDirection("@URL", SqlDbType.NVarChar, 256, this.URL),
                GetSqlParameterWithoutDirection("@LOGO", SqlDbType.NVarChar, 100, this.LOGO),
                GetSqlParameterWithoutDirection("@LetterHead", SqlDbType.NVarChar, 100, this.LetterHead),
                GetSqlParameterWithoutDirection("@LastMonthEnd", SqlDbType.Int, 4, this.LastMonthEnd),
                GetSqlParameterWithoutDirection("@LastYearEnd", SqlDbType.Int, 4, this.LastYearEnd),
                GetSqlParameterWithoutDirection("@BasicCurrency", SqlDbType.NVarChar, 4, this.BasicCurrency),
                GetSqlParameterWithoutDirection("@OTBClassLevel", SqlDbType.VarChar, 1, this.OTBClassLevel),
                GetSqlParameterWithoutDirection("@TaxRate", SqlDbType.Decimal, 9, this.TaxRate),
                GetSqlParameterWithoutDirection("@TaxRegisterNumber", SqlDbType.VarChar, 20, this.TaxRegisterNumber),
                GetSqlParameterWithoutDirection("@BarcodeLabelFormat", SqlDbType.VarChar, 10, this.BarcodeLabelFormat),
                GetSqlParameterWithoutDirection("@LastMonthEnd_AR", SqlDbType.Int, 4, this.LastMonthEnd_AR),
                GetSqlParameterWithoutDirection("@LastYearEnd_AR", SqlDbType.Int, 4, this.LastYearEnd_AR),
                GetSqlParameterWithoutDirection("@LastMonthEnd_AP", SqlDbType.Int, 4, this.LastMonthEnd_AP),
                GetSqlParameterWithoutDirection("@LastYearEnd_AP", SqlDbType.Int, 4, this.LastYearEnd_AP),
                GetSqlParameterWithoutDirection("@PriceTag_TaxInclusive", SqlDbType.Bit, 1, this.PriceTag_TaxInclusive),
                GetSqlParameterWithoutDirection("@HotSyncMode_HHT", SqlDbType.VarChar, 1, this.HotSyncMode_HHT),
                GetSqlParameterWithoutDirection("@PacketType", SqlDbType.VarChar, 10, this.PacketType),
                GetSqlParameterWithoutDirection("@AllowMultiplePricebook", SqlDbType.Bit, 1, this.AllowMultiplePricebook),
                GetSqlParameterWithoutDirection("@NeedConsolidation", SqlDbType.Bit, 1, this.NeedConsolidation),
                GetSqlParameterWithoutDirection("@RestrictPriceChange", SqlDbType.Bit, 1, this.RestrictPriceChange),
                GetSqlParameterWithoutDirection("@EnableBarcodeFastInput", SqlDbType.Bit, 1, this.EnableBarcodeFastInput),
                GetSqlParameterWithoutDirection("@EnablePOCostBreakDown", SqlDbType.Bit, 1, this.EnablePOCostBreakDown),
                GetSqlParameterWithoutDirection("@LastExportedOn", SqlDbType.DateTime, 8, this.LastExportedOn),
                GetSqlParameterWithoutDirection("@LastSynchronizedOn", SqlDbType.DateTime, 8, this.LastSynchronizedOn),
                GetSqlParameterWithoutDirection("@ZoneId", SqlDbType.UniqueIdentifier, 16, this.ZoneId)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("infoId: " + infoId.ToString()).Append("\r\n");
            builder.Append("shopNumber: " + shopNumber.ToString()).Append("\r\n");
            builder.Append("companyNameInitial: " + companyNameInitial.ToString()).Append("\r\n");
            builder.Append("companyName: " + companyName.ToString()).Append("\r\n");
            builder.Append("companyName_Chs: " + companyName_Chs.ToString()).Append("\r\n");
            builder.Append("companyName_Cht: " + companyName_Cht.ToString()).Append("\r\n");
            builder.Append("companyAddess: " + companyAddess.ToString()).Append("\r\n");
            builder.Append("companyAddress_Chs: " + companyAddress_Chs.ToString()).Append("\r\n");
            builder.Append("companyAddress_Cht: " + companyAddress_Cht.ToString()).Append("\r\n");
            builder.Append("tEL: " + tEL.ToString()).Append("\r\n");
            builder.Append("fAX: " + fAX.ToString()).Append("\r\n");
            builder.Append("eMail: " + eMail.ToString()).Append("\r\n");
            builder.Append("uRL: " + uRL.ToString()).Append("\r\n");
            builder.Append("lOGO: " + lOGO.ToString()).Append("\r\n");
            builder.Append("letterHead: " + letterHead.ToString()).Append("\r\n");
            builder.Append("lastMonthEnd: " + lastMonthEnd.ToString()).Append("\r\n");
            builder.Append("lastYearEnd: " + lastYearEnd.ToString()).Append("\r\n");
            builder.Append("basicCurrency: " + basicCurrency.ToString()).Append("\r\n");
            builder.Append("oTBClassLevel: " + oTBClassLevel.ToString()).Append("\r\n");
            builder.Append("taxRate: " + taxRate.ToString()).Append("\r\n");
            builder.Append("taxRegisterNumber: " + taxRegisterNumber.ToString()).Append("\r\n");
            builder.Append("barcodeLabelFormat: " + barcodeLabelFormat.ToString()).Append("\r\n");
            builder.Append("lastMonthEnd_AR: " + lastMonthEnd_AR.ToString()).Append("\r\n");
            builder.Append("lastYearEnd_AR: " + lastYearEnd_AR.ToString()).Append("\r\n");
            builder.Append("lastMonthEnd_AP: " + lastMonthEnd_AP.ToString()).Append("\r\n");
            builder.Append("lastYearEnd_AP: " + lastYearEnd_AP.ToString()).Append("\r\n");
            builder.Append("priceTag_TaxInclusive: " + priceTag_TaxInclusive.ToString()).Append("\r\n");
            builder.Append("hotSyncMode_HHT: " + hotSyncMode_HHT.ToString()).Append("\r\n");
            builder.Append("packetType: " + packetType.ToString()).Append("\r\n");
            builder.Append("allowMultiplePricebook: " + allowMultiplePricebook.ToString()).Append("\r\n");
            builder.Append("needConsolidation: " + needConsolidation.ToString()).Append("\r\n");
            builder.Append("restrictPriceChange: " + restrictPriceChange.ToString()).Append("\r\n");
            builder.Append("enableBarcodeFastInput: " + enableBarcodeFastInput.ToString()).Append("\r\n");
            builder.Append("enablePOCostBreakDown: " + enablePOCostBreakDown.ToString()).Append("\r\n");
            builder.Append("lastExportedOn: " + lastExportedOn.ToString()).Append("\r\n");
            builder.Append("lastSynchronizedOn: " + lastSynchronizedOn.ToString()).Append("\r\n");
            builder.Append("zoneId: " + zoneId.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			SystemInfoCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = SystemInfo.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = SystemInfo.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (SystemInfo item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.ZoneId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.InfoId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(SystemInfo target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.ZoneId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				SystemInfo parentTemplate = SystemInfo.Load(target.ZoneId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(SystemInfo target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="SystemInfo">SystemInfo</see> objects.
    /// </summary>
    public class SystemInfoCollection : BindingList< SystemInfo>
    {
	}
}
