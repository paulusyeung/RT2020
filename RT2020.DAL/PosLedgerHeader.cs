using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.PosLedgerHeader.
    /// Date Created:   2020-08-09 02:14:13
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class PosLedgerHeader
    {
        private Guid key = Guid.Empty;
        private Guid headerId = Guid.Empty;
        private string txType = String.Empty;
        private string txNumber = String.Empty;
        private DateTime txDate = DateTime.Parse("1900-1-1");
        private Guid staffId = Guid.Empty;
        private Guid workplaceId = Guid.Empty;
        private Guid vsLocationId = Guid.Empty;
        private int tillNumber = 0;
        private decimal totalAmount;
        private decimal depositAmount;
        private Guid staff1 = Guid.Empty;
        private Guid staff2 = Guid.Empty;
        private Guid memberId = Guid.Empty;
        private Guid supplierId = Guid.Empty;
        private string reference = String.Empty;
        private string remarks = String.Empty;
        private int status = 0;
        private DateTime postedOn = DateTime.Parse("1900-1-1");
        private Guid postedBy = Guid.Empty;
        private string tRF_REASON = String.Empty;
        private bool eXPORTFLAG;
        private DateTime eXP_DELIVER = DateTime.Parse("1900-1-1");
        private string cONFIRM_TRF = String.Empty;
        private DateTime cONFIRM_TRF_LASTUPDATE = DateTime.Parse("1900-1-1");
        private string cONFIRM_TRF_LASTUSER = String.Empty;
        private string sEX = String.Empty;
        private string rACE = String.Empty;
        private string aGE = String.Empty;
        private string sTK_XCHG = String.Empty;
        private DateTime pICKUP_DATE = DateTime.Parse("1900-1-1");
        private string pICKUP_LOCNO = String.Empty;
        private string eVT_CODE = String.Empty;
        private decimal tRNAMT_TTLSALES;
        private decimal tRNAMT_NETSALES;
        private decimal tRNAMT_TAX;
        private decimal tAX_RATE;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private Guid createdBy = Guid.Empty;
        private DateTime modifiedOn = DateTime.Parse("1900-1-1");
        private Guid modifiedBy = Guid.Empty;
        private bool retired;
        private DateTime retiredOn = DateTime.Parse("1900-1-1");
        private Guid retiredBy = Guid.Empty;

        /// <summary>
        /// Initialize an new empty PosLedgerHeader object.
        /// </summary>
        public PosLedgerHeader()
        {
        }
		
        /// <summary>
        /// Initialize a new PosLedgerHeader object with the given parameters.
        /// </summary>
        public PosLedgerHeader(Guid headerId, string txType, string txNumber, DateTime txDate, Guid staffId, Guid workplaceId, Guid vsLocationId, int tillNumber, decimal totalAmount, decimal depositAmount, Guid staff1, Guid staff2, Guid memberId, Guid supplierId, string reference, string remarks, int status, DateTime postedOn, Guid postedBy, string tRF_REASON, bool eXPORTFLAG, DateTime eXP_DELIVER, string cONFIRM_TRF, DateTime cONFIRM_TRF_LASTUPDATE, string cONFIRM_TRF_LASTUSER, string sEX, string rACE, string aGE, string sTK_XCHG, DateTime pICKUP_DATE, string pICKUP_LOCNO, string eVT_CODE, decimal tRNAMT_TTLSALES, decimal tRNAMT_NETSALES, decimal tRNAMT_TAX, decimal tAX_RATE, DateTime createdOn, Guid createdBy, DateTime modifiedOn, Guid modifiedBy, bool retired, DateTime retiredOn, Guid retiredBy)
        {
                this.headerId = headerId;
                this.txType = txType;
                this.txNumber = txNumber;
                this.txDate = txDate;
                this.staffId = staffId;
                this.workplaceId = workplaceId;
                this.vsLocationId = vsLocationId;
                this.tillNumber = tillNumber;
                this.totalAmount = totalAmount;
                this.depositAmount = depositAmount;
                this.staff1 = staff1;
                this.staff2 = staff2;
                this.memberId = memberId;
                this.supplierId = supplierId;
                this.reference = reference;
                this.remarks = remarks;
                this.status = status;
                this.postedOn = postedOn;
                this.postedBy = postedBy;
                this.tRF_REASON = tRF_REASON;
                this.eXPORTFLAG = eXPORTFLAG;
                this.eXP_DELIVER = eXP_DELIVER;
                this.cONFIRM_TRF = cONFIRM_TRF;
                this.cONFIRM_TRF_LASTUPDATE = cONFIRM_TRF_LASTUPDATE;
                this.cONFIRM_TRF_LASTUSER = cONFIRM_TRF_LASTUSER;
                this.sEX = sEX;
                this.rACE = rACE;
                this.aGE = aGE;
                this.sTK_XCHG = sTK_XCHG;
                this.pICKUP_DATE = pICKUP_DATE;
                this.pICKUP_LOCNO = pICKUP_LOCNO;
                this.eVT_CODE = eVT_CODE;
                this.tRNAMT_TTLSALES = tRNAMT_TTLSALES;
                this.tRNAMT_NETSALES = tRNAMT_NETSALES;
                this.tRNAMT_TAX = tRNAMT_TAX;
                this.tAX_RATE = tAX_RATE;
                this.createdOn = createdOn;
                this.createdBy = createdBy;
                this.modifiedOn = modifiedOn;
                this.modifiedBy = modifiedBy;
                this.retired = retired;
                this.retiredOn = retiredOn;
                this.retiredBy = retiredBy;
        }	
		
        /// <summary>
        /// Loads a PosLedgerHeader object from the database using the given HeaderId
        /// </summary>
        /// <param name="headerId">The primary key value</param>
        /// <returns>A PosLedgerHeader object</returns>
        public static PosLedgerHeader Load(Guid headerId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@HeaderId", headerId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spPosLedgerHeader_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    PosLedgerHeader result = new PosLedgerHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a PosLedgerHeader object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A PosLedgerHeader object</returns>
        public static PosLedgerHeader LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spPosLedgerHeader_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    PosLedgerHeader result = new PosLedgerHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of PosLedgerHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PosLedgerHeader objects in the database.</returns>
        public static PosLedgerHeaderCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spPosLedgerHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PosLedgerHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the PosLedgerHeader objects in the database ordered by the columns specified.</returns>
        public static PosLedgerHeaderCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spPosLedgerHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PosLedgerHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PosLedgerHeader objects in the database.</returns>
        public static PosLedgerHeaderCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spPosLedgerHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PosLedgerHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the PosLedgerHeader objects in the database ordered by the columns specified.</returns>
        public static PosLedgerHeaderCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spPosLedgerHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PosLedgerHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PosLedgerHeader objects in the database.</returns>
        public static PosLedgerHeaderCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            PosLedgerHeaderCollection result = new PosLedgerHeaderCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    PosLedgerHeader tmp = new PosLedgerHeader();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a PosLedgerHeader object from the database.
        /// </summary>
        /// <param name="headerId">The primary key value</param>
        public static void Delete(Guid headerId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@HeaderId", headerId) };
            SqlHelper.Default.ExecuteNonQuery("spPosLedgerHeader_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) headerId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) txType = reader.GetString(1);
                if (!reader.IsDBNull(2)) txNumber = reader.GetString(2);
                if (!reader.IsDBNull(3)) txDate = reader.GetDateTime(3);
                if (!reader.IsDBNull(4)) staffId = reader.GetGuid(4);
                if (!reader.IsDBNull(5)) workplaceId = reader.GetGuid(5);
                if (!reader.IsDBNull(6)) vsLocationId = reader.GetGuid(6);
                if (!reader.IsDBNull(7)) tillNumber = reader.GetInt32(7);
                if (!reader.IsDBNull(8)) totalAmount = reader.GetDecimal(8);
                if (!reader.IsDBNull(9)) depositAmount = reader.GetDecimal(9);
                if (!reader.IsDBNull(10)) staff1 = reader.GetGuid(10);
                if (!reader.IsDBNull(11)) staff2 = reader.GetGuid(11);
                if (!reader.IsDBNull(12)) memberId = reader.GetGuid(12);
                if (!reader.IsDBNull(13)) supplierId = reader.GetGuid(13);
                if (!reader.IsDBNull(14)) reference = reader.GetString(14);
                if (!reader.IsDBNull(15)) remarks = reader.GetString(15);
                if (!reader.IsDBNull(16)) status = reader.GetInt32(16);
                if (!reader.IsDBNull(17)) postedOn = reader.GetDateTime(17);
                if (!reader.IsDBNull(18)) postedBy = reader.GetGuid(18);
                if (!reader.IsDBNull(19)) tRF_REASON = reader.GetString(19);
                if (!reader.IsDBNull(20)) eXPORTFLAG = reader.GetBoolean(20);
                if (!reader.IsDBNull(21)) eXP_DELIVER = reader.GetDateTime(21);
                if (!reader.IsDBNull(22)) cONFIRM_TRF = reader.GetString(22);
                if (!reader.IsDBNull(23)) cONFIRM_TRF_LASTUPDATE = reader.GetDateTime(23);
                if (!reader.IsDBNull(24)) cONFIRM_TRF_LASTUSER = reader.GetString(24);
                if (!reader.IsDBNull(25)) sEX = reader.GetString(25);
                if (!reader.IsDBNull(26)) rACE = reader.GetString(26);
                if (!reader.IsDBNull(27)) aGE = reader.GetString(27);
                if (!reader.IsDBNull(28)) sTK_XCHG = reader.GetString(28);
                if (!reader.IsDBNull(29)) pICKUP_DATE = reader.GetDateTime(29);
                if (!reader.IsDBNull(30)) pICKUP_LOCNO = reader.GetString(30);
                if (!reader.IsDBNull(31)) eVT_CODE = reader.GetString(31);
                if (!reader.IsDBNull(32)) tRNAMT_TTLSALES = reader.GetDecimal(32);
                if (!reader.IsDBNull(33)) tRNAMT_NETSALES = reader.GetDecimal(33);
                if (!reader.IsDBNull(34)) tRNAMT_TAX = reader.GetDecimal(34);
                if (!reader.IsDBNull(35)) tAX_RATE = reader.GetDecimal(35);
                if (!reader.IsDBNull(36)) createdOn = reader.GetDateTime(36);
                if (!reader.IsDBNull(37)) createdBy = reader.GetGuid(37);
                if (!reader.IsDBNull(38)) modifiedOn = reader.GetDateTime(38);
                if (!reader.IsDBNull(39)) modifiedBy = reader.GetGuid(39);
                if (!reader.IsDBNull(40)) retired = reader.GetBoolean(40);
                if (!reader.IsDBNull(41)) retiredOn = reader.GetDateTime(41);
                if (!reader.IsDBNull(42)) retiredBy = reader.GetGuid(42);
            }
        }
		
        public void Delete()
        {
            Delete(this.HeaderId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != HeaderId)
                    this.Delete();
                Update();
            }
        }

        public Guid HeaderId
        {
            get { return headerId; }
            set { headerId = value; }
        }

        public string TxType
        {
            get { return txType; }
            set { txType = value; }
        }

        public string TxNumber
        {
            get { return txNumber; }
            set { txNumber = value; }
        }

        public DateTime TxDate
        {
            get { return txDate; }
            set { txDate = value; }
        }

        public Guid StaffId
        {
            get { return staffId; }
            set { staffId = value; }
        }

        public Guid WorkplaceId
        {
            get { return workplaceId; }
            set { workplaceId = value; }
        }

        public Guid VsLocationId
        {
            get { return vsLocationId; }
            set { vsLocationId = value; }
        }

        public int TillNumber
        {
            get { return tillNumber; }
            set { tillNumber = value; }
        }

        public decimal TotalAmount
        {
            get { return totalAmount; }
            set { totalAmount = value; }
        }

        public decimal DepositAmount
        {
            get { return depositAmount; }
            set { depositAmount = value; }
        }

        public Guid Staff1
        {
            get { return staff1; }
            set { staff1 = value; }
        }

        public Guid Staff2
        {
            get { return staff2; }
            set { staff2 = value; }
        }

        public Guid MemberId
        {
            get { return memberId; }
            set { memberId = value; }
        }

        public Guid SupplierId
        {
            get { return supplierId; }
            set { supplierId = value; }
        }

        public string Reference
        {
            get { return reference; }
            set { reference = value; }
        }

        public string Remarks
        {
            get { return remarks; }
            set { remarks = value; }
        }

        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public DateTime PostedOn
        {
            get { return postedOn; }
            set { postedOn = value; }
        }

        public Guid PostedBy
        {
            get { return postedBy; }
            set { postedBy = value; }
        }

        public string TRF_REASON
        {
            get { return tRF_REASON; }
            set { tRF_REASON = value; }
        }

        public bool EXPORTFLAG
        {
            get { return eXPORTFLAG; }
            set { eXPORTFLAG = value; }
        }

        public DateTime EXP_DELIVER
        {
            get { return eXP_DELIVER; }
            set { eXP_DELIVER = value; }
        }

        public string CONFIRM_TRF
        {
            get { return cONFIRM_TRF; }
            set { cONFIRM_TRF = value; }
        }

        public DateTime CONFIRM_TRF_LASTUPDATE
        {
            get { return cONFIRM_TRF_LASTUPDATE; }
            set { cONFIRM_TRF_LASTUPDATE = value; }
        }

        public string CONFIRM_TRF_LASTUSER
        {
            get { return cONFIRM_TRF_LASTUSER; }
            set { cONFIRM_TRF_LASTUSER = value; }
        }

        public string SEX
        {
            get { return sEX; }
            set { sEX = value; }
        }

        public string RACE
        {
            get { return rACE; }
            set { rACE = value; }
        }

        public string AGE
        {
            get { return aGE; }
            set { aGE = value; }
        }

        public string STK_XCHG
        {
            get { return sTK_XCHG; }
            set { sTK_XCHG = value; }
        }

        public DateTime PICKUP_DATE
        {
            get { return pICKUP_DATE; }
            set { pICKUP_DATE = value; }
        }

        public string PICKUP_LOCNO
        {
            get { return pICKUP_LOCNO; }
            set { pICKUP_LOCNO = value; }
        }

        public string EVT_CODE
        {
            get { return eVT_CODE; }
            set { eVT_CODE = value; }
        }

        public decimal TRNAMT_TTLSALES
        {
            get { return tRNAMT_TTLSALES; }
            set { tRNAMT_TTLSALES = value; }
        }

        public decimal TRNAMT_NETSALES
        {
            get { return tRNAMT_NETSALES; }
            set { tRNAMT_NETSALES = value; }
        }

        public decimal TRNAMT_TAX
        {
            get { return tRNAMT_TAX; }
            set { tRNAMT_TAX = value; }
        }

        public decimal TAX_RATE
        {
            get { return tAX_RATE; }
            set { tAX_RATE = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public Guid CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime ModifiedOn
        {
            get { return modifiedOn; }
            set { modifiedOn = value; }
        }

        public Guid ModifiedBy
        {
            get { return modifiedBy; }
            set { modifiedBy = value; }
        }

        public bool Retired
        {
            get { return retired; }
            set { retired = value; }
        }

        public DateTime RetiredOn
        {
            get { return retiredOn; }
            set { retiredOn = value; }
        }

        public Guid RetiredBy
        {
            get { return retiredBy; }
            set { retiredBy = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spPosLedgerHeader_InsRec", "@HeaderId", out returnedValue, parameterValues);
            
            headerId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spPosLedgerHeader_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[43];
            prams[0] = GetSqlParameter("@HeaderId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.HeaderId);
            prams[1] = GetSqlParameter("@TxType", ParameterDirection.Input, SqlDbType.VarChar, 3, this.TxType);
            prams[2] = GetSqlParameter("@TxNumber", ParameterDirection.Input, SqlDbType.VarChar, 12, this.TxNumber);
            prams[3] = GetSqlParameter("@TxDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.TxDate);
            prams[4] = GetSqlParameter("@StaffId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.StaffId);
            prams[5] = GetSqlParameter("@WorkplaceId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.WorkplaceId);
            prams[6] = GetSqlParameter("@VsLocationId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.VsLocationId);
            prams[7] = GetSqlParameter("@TillNumber", ParameterDirection.Input, SqlDbType.Int, 4, this.TillNumber);
            prams[8] = GetSqlParameter("@TotalAmount", ParameterDirection.Input, SqlDbType.Money, 8, this.TotalAmount);
            prams[9] = GetSqlParameter("@DepositAmount", ParameterDirection.Input, SqlDbType.Money, 8, this.DepositAmount);
            prams[10] = GetSqlParameter("@Staff1", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.Staff1);
            prams[11] = GetSqlParameter("@Staff2", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.Staff2);
            prams[12] = GetSqlParameter("@MemberId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.MemberId);
            prams[13] = GetSqlParameter("@SupplierId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.SupplierId);
            prams[14] = GetSqlParameter("@Reference", ParameterDirection.Input, SqlDbType.VarChar, 12, this.Reference);
            prams[15] = GetSqlParameter("@Remarks", ParameterDirection.Input, SqlDbType.VarChar, 10, this.Remarks);
            prams[16] = GetSqlParameter("@Status", ParameterDirection.Input, SqlDbType.Int, 4, this.Status);
            prams[17] = GetSqlParameter("@PostedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.PostedOn);
            prams[18] = GetSqlParameter("@PostedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.PostedBy);
            prams[19] = GetSqlParameter("@TRF_REASON", ParameterDirection.Input, SqlDbType.VarChar, 2, this.TRF_REASON);
            prams[20] = GetSqlParameter("@EXPORTFLAG", ParameterDirection.Input, SqlDbType.Bit, 1, this.EXPORTFLAG);
            prams[21] = GetSqlParameter("@EXP_DELIVER", ParameterDirection.Input, SqlDbType.DateTime, 8, this.EXP_DELIVER);
            prams[22] = GetSqlParameter("@CONFIRM_TRF", ParameterDirection.Input, SqlDbType.VarChar, 1, this.CONFIRM_TRF);
            prams[23] = GetSqlParameter("@CONFIRM_TRF_LASTUPDATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CONFIRM_TRF_LASTUPDATE);
            prams[24] = GetSqlParameter("@CONFIRM_TRF_LASTUSER", ParameterDirection.Input, SqlDbType.VarChar, 4, this.CONFIRM_TRF_LASTUSER);
            prams[25] = GetSqlParameter("@SEX", ParameterDirection.Input, SqlDbType.VarChar, 1, this.SEX);
            prams[26] = GetSqlParameter("@RACE", ParameterDirection.Input, SqlDbType.VarChar, 1, this.RACE);
            prams[27] = GetSqlParameter("@AGE", ParameterDirection.Input, SqlDbType.VarChar, 1, this.AGE);
            prams[28] = GetSqlParameter("@STK_XCHG", ParameterDirection.Input, SqlDbType.VarChar, 1, this.STK_XCHG);
            prams[29] = GetSqlParameter("@PICKUP_DATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.PICKUP_DATE);
            prams[30] = GetSqlParameter("@PICKUP_LOCNO", ParameterDirection.Input, SqlDbType.VarChar, 4, this.PICKUP_LOCNO);
            prams[31] = GetSqlParameter("@EVT_CODE", ParameterDirection.Input, SqlDbType.VarChar, 6, this.EVT_CODE);
            prams[32] = GetSqlParameter("@TRNAMT_TTLSALES", ParameterDirection.Input, SqlDbType.Money, 8, this.TRNAMT_TTLSALES);
            prams[33] = GetSqlParameter("@TRNAMT_NETSALES", ParameterDirection.Input, SqlDbType.Money, 8, this.TRNAMT_NETSALES);
            prams[34] = GetSqlParameter("@TRNAMT_TAX", ParameterDirection.Input, SqlDbType.Money, 8, this.TRNAMT_TAX);
            prams[35] = GetSqlParameter("@TAX_RATE", ParameterDirection.Input, SqlDbType.Decimal, 5, this.TAX_RATE);
            prams[36] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[37] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CreatedBy);
            prams[38] = GetSqlParameter("@ModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ModifiedOn);
            prams[39] = GetSqlParameter("@ModifiedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ModifiedBy);
            prams[40] = GetSqlParameter("@Retired", ParameterDirection.Input, SqlDbType.Bit, 1, this.Retired);
            prams[41] = GetSqlParameter("@RetiredOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RetiredOn);
            prams[42] = GetSqlParameter("@RetiredBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.RetiredBy);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@HeaderId", SqlDbType.UniqueIdentifier, 16, this.HeaderId),
                GetSqlParameterWithoutDirection("@TxType", SqlDbType.VarChar, 3, this.TxType),
                GetSqlParameterWithoutDirection("@TxNumber", SqlDbType.VarChar, 12, this.TxNumber),
                GetSqlParameterWithoutDirection("@TxDate", SqlDbType.DateTime, 8, this.TxDate),
                GetSqlParameterWithoutDirection("@StaffId", SqlDbType.UniqueIdentifier, 16, this.StaffId),
                GetSqlParameterWithoutDirection("@WorkplaceId", SqlDbType.UniqueIdentifier, 16, this.WorkplaceId),
                GetSqlParameterWithoutDirection("@VsLocationId", SqlDbType.UniqueIdentifier, 16, this.VsLocationId),
                GetSqlParameterWithoutDirection("@TillNumber", SqlDbType.Int, 4, this.TillNumber),
                GetSqlParameterWithoutDirection("@TotalAmount", SqlDbType.Money, 8, this.TotalAmount),
                GetSqlParameterWithoutDirection("@DepositAmount", SqlDbType.Money, 8, this.DepositAmount),
                GetSqlParameterWithoutDirection("@Staff1", SqlDbType.UniqueIdentifier, 16, this.Staff1),
                GetSqlParameterWithoutDirection("@Staff2", SqlDbType.UniqueIdentifier, 16, this.Staff2),
                GetSqlParameterWithoutDirection("@MemberId", SqlDbType.UniqueIdentifier, 16, this.MemberId),
                GetSqlParameterWithoutDirection("@SupplierId", SqlDbType.UniqueIdentifier, 16, this.SupplierId),
                GetSqlParameterWithoutDirection("@Reference", SqlDbType.VarChar, 12, this.Reference),
                GetSqlParameterWithoutDirection("@Remarks", SqlDbType.VarChar, 10, this.Remarks),
                GetSqlParameterWithoutDirection("@Status", SqlDbType.Int, 4, this.Status),
                GetSqlParameterWithoutDirection("@PostedOn", SqlDbType.DateTime, 8, this.PostedOn),
                GetSqlParameterWithoutDirection("@PostedBy", SqlDbType.UniqueIdentifier, 16, this.PostedBy),
                GetSqlParameterWithoutDirection("@TRF_REASON", SqlDbType.VarChar, 2, this.TRF_REASON),
                GetSqlParameterWithoutDirection("@EXPORTFLAG", SqlDbType.Bit, 1, this.EXPORTFLAG),
                GetSqlParameterWithoutDirection("@EXP_DELIVER", SqlDbType.DateTime, 8, this.EXP_DELIVER),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF", SqlDbType.VarChar, 1, this.CONFIRM_TRF),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF_LASTUPDATE", SqlDbType.DateTime, 8, this.CONFIRM_TRF_LASTUPDATE),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF_LASTUSER", SqlDbType.VarChar, 4, this.CONFIRM_TRF_LASTUSER),
                GetSqlParameterWithoutDirection("@SEX", SqlDbType.VarChar, 1, this.SEX),
                GetSqlParameterWithoutDirection("@RACE", SqlDbType.VarChar, 1, this.RACE),
                GetSqlParameterWithoutDirection("@AGE", SqlDbType.VarChar, 1, this.AGE),
                GetSqlParameterWithoutDirection("@STK_XCHG", SqlDbType.VarChar, 1, this.STK_XCHG),
                GetSqlParameterWithoutDirection("@PICKUP_DATE", SqlDbType.DateTime, 8, this.PICKUP_DATE),
                GetSqlParameterWithoutDirection("@PICKUP_LOCNO", SqlDbType.VarChar, 4, this.PICKUP_LOCNO),
                GetSqlParameterWithoutDirection("@EVT_CODE", SqlDbType.VarChar, 6, this.EVT_CODE),
                GetSqlParameterWithoutDirection("@TRNAMT_TTLSALES", SqlDbType.Money, 8, this.TRNAMT_TTLSALES),
                GetSqlParameterWithoutDirection("@TRNAMT_NETSALES", SqlDbType.Money, 8, this.TRNAMT_NETSALES),
                GetSqlParameterWithoutDirection("@TRNAMT_TAX", SqlDbType.Money, 8, this.TRNAMT_TAX),
                GetSqlParameterWithoutDirection("@TAX_RATE", SqlDbType.Decimal, 5, this.TAX_RATE),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.UniqueIdentifier, 16, this.CreatedBy),
                GetSqlParameterWithoutDirection("@ModifiedOn", SqlDbType.DateTime, 8, this.ModifiedOn),
                GetSqlParameterWithoutDirection("@ModifiedBy", SqlDbType.UniqueIdentifier, 16, this.ModifiedBy),
                GetSqlParameterWithoutDirection("@Retired", SqlDbType.Bit, 1, this.Retired),
                GetSqlParameterWithoutDirection("@RetiredOn", SqlDbType.DateTime, 8, this.RetiredOn),
                GetSqlParameterWithoutDirection("@RetiredBy", SqlDbType.UniqueIdentifier, 16, this.RetiredBy)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("headerId: " + headerId.ToString()).Append("\r\n");
            builder.Append("txType: " + txType.ToString()).Append("\r\n");
            builder.Append("txNumber: " + txNumber.ToString()).Append("\r\n");
            builder.Append("txDate: " + txDate.ToString()).Append("\r\n");
            builder.Append("staffId: " + staffId.ToString()).Append("\r\n");
            builder.Append("workplaceId: " + workplaceId.ToString()).Append("\r\n");
            builder.Append("vsLocationId: " + vsLocationId.ToString()).Append("\r\n");
            builder.Append("tillNumber: " + tillNumber.ToString()).Append("\r\n");
            builder.Append("totalAmount: " + totalAmount.ToString()).Append("\r\n");
            builder.Append("depositAmount: " + depositAmount.ToString()).Append("\r\n");
            builder.Append("staff1: " + staff1.ToString()).Append("\r\n");
            builder.Append("staff2: " + staff2.ToString()).Append("\r\n");
            builder.Append("memberId: " + memberId.ToString()).Append("\r\n");
            builder.Append("supplierId: " + supplierId.ToString()).Append("\r\n");
            builder.Append("reference: " + reference.ToString()).Append("\r\n");
            builder.Append("remarks: " + remarks.ToString()).Append("\r\n");
            builder.Append("status: " + status.ToString()).Append("\r\n");
            builder.Append("postedOn: " + postedOn.ToString()).Append("\r\n");
            builder.Append("postedBy: " + postedBy.ToString()).Append("\r\n");
            builder.Append("tRF_REASON: " + tRF_REASON.ToString()).Append("\r\n");
            builder.Append("eXPORTFLAG: " + eXPORTFLAG.ToString()).Append("\r\n");
            builder.Append("eXP_DELIVER: " + eXP_DELIVER.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF: " + cONFIRM_TRF.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF_LASTUPDATE: " + cONFIRM_TRF_LASTUPDATE.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF_LASTUSER: " + cONFIRM_TRF_LASTUSER.ToString()).Append("\r\n");
            builder.Append("sEX: " + sEX.ToString()).Append("\r\n");
            builder.Append("rACE: " + rACE.ToString()).Append("\r\n");
            builder.Append("aGE: " + aGE.ToString()).Append("\r\n");
            builder.Append("sTK_XCHG: " + sTK_XCHG.ToString()).Append("\r\n");
            builder.Append("pICKUP_DATE: " + pICKUP_DATE.ToString()).Append("\r\n");
            builder.Append("pICKUP_LOCNO: " + pICKUP_LOCNO.ToString()).Append("\r\n");
            builder.Append("eVT_CODE: " + eVT_CODE.ToString()).Append("\r\n");
            builder.Append("tRNAMT_TTLSALES: " + tRNAMT_TTLSALES.ToString()).Append("\r\n");
            builder.Append("tRNAMT_NETSALES: " + tRNAMT_NETSALES.ToString()).Append("\r\n");
            builder.Append("tRNAMT_TAX: " + tRNAMT_TAX.ToString()).Append("\r\n");
            builder.Append("tAX_RATE: " + tAX_RATE.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("modifiedOn: " + modifiedOn.ToString()).Append("\r\n");
            builder.Append("modifiedBy: " + modifiedBy.ToString()).Append("\r\n");
            builder.Append("retired: " + retired.ToString()).Append("\r\n");
            builder.Append("retiredOn: " + retiredOn.ToString()).Append("\r\n");
            builder.Append("retiredBy: " + retiredBy.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			PosLedgerHeaderCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			// Filter the retired records
			if (WhereClause.Length > 0)
			{
				WhereClause += " AND Retired = 0";
			}
			else
			{
				WhereClause = "Retired = 0";
			}
			
			if (WhereClause.Length > 0)
			{
				source = PosLedgerHeader.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = PosLedgerHeader.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (PosLedgerHeader item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.StaffId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.HeaderId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(PosLedgerHeader target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.StaffId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				PosLedgerHeader parentTemplate = PosLedgerHeader.Load(target.StaffId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(PosLedgerHeader target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="PosLedgerHeader">PosLedgerHeader</see> objects.
    /// </summary>
    public class PosLedgerHeaderCollection : BindingList< PosLedgerHeader>
    {
	}
}
