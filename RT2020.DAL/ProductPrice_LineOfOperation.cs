using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.ProductPrice_LineOfOperation.
    /// Date Created:   2020-08-09 02:14:14
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class ProductPrice_LineOfOperation
    {
        private Guid key = Guid.Empty;
        private Guid itemId = Guid.Empty;
        private Guid productId = Guid.Empty;
        private Guid lineOfOperationId = Guid.Empty;
        private string currencyCode = String.Empty;
        private decimal retailPrice;
        private decimal listPrice;
        private decimal maxPrice;
        private decimal minPrice;
        private decimal firstPrice;
        private DateTime maxPriceDate = DateTime.Parse("1900-1-1");
        private DateTime minPriceDate = DateTime.Parse("1900-1-1");
        private DateTime retailPriceModifiedOn = DateTime.Parse("1900-1-1");
        private decimal maxDiscount;
        private decimal minDiscount;
        private decimal latestDiscount;
        private string maxRefNumber = String.Empty;
        private string minRefNumber = String.Empty;
        private string latestRefNumber = String.Empty;
        private bool downloadToPOS;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private Guid createdBy = Guid.Empty;
        private DateTime modifiedOn = DateTime.Parse("1900-1-1");
        private Guid modifiedBy = Guid.Empty;
        private bool retired;
        private DateTime retiredOn = DateTime.Parse("1900-1-1");
        private Guid retiredBy = Guid.Empty;

        /// <summary>
        /// Initialize an new empty ProductPrice_LineOfOperation object.
        /// </summary>
        public ProductPrice_LineOfOperation()
        {
        }
		
        /// <summary>
        /// Initialize a new ProductPrice_LineOfOperation object with the given parameters.
        /// </summary>
        public ProductPrice_LineOfOperation(Guid itemId, Guid productId, Guid lineOfOperationId, string currencyCode, decimal retailPrice, decimal listPrice, decimal maxPrice, decimal minPrice, decimal firstPrice, DateTime maxPriceDate, DateTime minPriceDate, DateTime retailPriceModifiedOn, decimal maxDiscount, decimal minDiscount, decimal latestDiscount, string maxRefNumber, string minRefNumber, string latestRefNumber, bool downloadToPOS, DateTime createdOn, Guid createdBy, DateTime modifiedOn, Guid modifiedBy, bool retired, DateTime retiredOn, Guid retiredBy)
        {
                this.itemId = itemId;
                this.productId = productId;
                this.lineOfOperationId = lineOfOperationId;
                this.currencyCode = currencyCode;
                this.retailPrice = retailPrice;
                this.listPrice = listPrice;
                this.maxPrice = maxPrice;
                this.minPrice = minPrice;
                this.firstPrice = firstPrice;
                this.maxPriceDate = maxPriceDate;
                this.minPriceDate = minPriceDate;
                this.retailPriceModifiedOn = retailPriceModifiedOn;
                this.maxDiscount = maxDiscount;
                this.minDiscount = minDiscount;
                this.latestDiscount = latestDiscount;
                this.maxRefNumber = maxRefNumber;
                this.minRefNumber = minRefNumber;
                this.latestRefNumber = latestRefNumber;
                this.downloadToPOS = downloadToPOS;
                this.createdOn = createdOn;
                this.createdBy = createdBy;
                this.modifiedOn = modifiedOn;
                this.modifiedBy = modifiedBy;
                this.retired = retired;
                this.retiredOn = retiredOn;
                this.retiredBy = retiredBy;
        }	
		
        /// <summary>
        /// Loads a ProductPrice_LineOfOperation object from the database using the given ItemId
        /// </summary>
        /// <param name="itemId">The primary key value</param>
        /// <returns>A ProductPrice_LineOfOperation object</returns>
        public static ProductPrice_LineOfOperation Load(Guid itemId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ItemId", itemId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spProductPrice_LineOfOperation_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    ProductPrice_LineOfOperation result = new ProductPrice_LineOfOperation();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a ProductPrice_LineOfOperation object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A ProductPrice_LineOfOperation object</returns>
        public static ProductPrice_LineOfOperation LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spProductPrice_LineOfOperation_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    ProductPrice_LineOfOperation result = new ProductPrice_LineOfOperation();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of ProductPrice_LineOfOperation objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the ProductPrice_LineOfOperation objects in the database.</returns>
        public static ProductPrice_LineOfOperationCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spProductPrice_LineOfOperation_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ProductPrice_LineOfOperation objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the ProductPrice_LineOfOperation objects in the database ordered by the columns specified.</returns>
        public static ProductPrice_LineOfOperationCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spProductPrice_LineOfOperation_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ProductPrice_LineOfOperation objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the ProductPrice_LineOfOperation objects in the database.</returns>
        public static ProductPrice_LineOfOperationCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spProductPrice_LineOfOperation_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ProductPrice_LineOfOperation objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the ProductPrice_LineOfOperation objects in the database ordered by the columns specified.</returns>
        public static ProductPrice_LineOfOperationCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spProductPrice_LineOfOperation_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ProductPrice_LineOfOperation objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the ProductPrice_LineOfOperation objects in the database.</returns>
        public static ProductPrice_LineOfOperationCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            ProductPrice_LineOfOperationCollection result = new ProductPrice_LineOfOperationCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    ProductPrice_LineOfOperation tmp = new ProductPrice_LineOfOperation();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a ProductPrice_LineOfOperation object from the database.
        /// </summary>
        /// <param name="itemId">The primary key value</param>
        public static void Delete(Guid itemId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ItemId", itemId) };
            SqlHelper.Default.ExecuteNonQuery("spProductPrice_LineOfOperation_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) itemId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) productId = reader.GetGuid(1);
                if (!reader.IsDBNull(2)) lineOfOperationId = reader.GetGuid(2);
                if (!reader.IsDBNull(3)) currencyCode = reader.GetString(3);
                if (!reader.IsDBNull(4)) retailPrice = reader.GetDecimal(4);
                if (!reader.IsDBNull(5)) listPrice = reader.GetDecimal(5);
                if (!reader.IsDBNull(6)) maxPrice = reader.GetDecimal(6);
                if (!reader.IsDBNull(7)) minPrice = reader.GetDecimal(7);
                if (!reader.IsDBNull(8)) firstPrice = reader.GetDecimal(8);
                if (!reader.IsDBNull(9)) maxPriceDate = reader.GetDateTime(9);
                if (!reader.IsDBNull(10)) minPriceDate = reader.GetDateTime(10);
                if (!reader.IsDBNull(11)) retailPriceModifiedOn = reader.GetDateTime(11);
                if (!reader.IsDBNull(12)) maxDiscount = reader.GetDecimal(12);
                if (!reader.IsDBNull(13)) minDiscount = reader.GetDecimal(13);
                if (!reader.IsDBNull(14)) latestDiscount = reader.GetDecimal(14);
                if (!reader.IsDBNull(15)) maxRefNumber = reader.GetString(15);
                if (!reader.IsDBNull(16)) minRefNumber = reader.GetString(16);
                if (!reader.IsDBNull(17)) latestRefNumber = reader.GetString(17);
                if (!reader.IsDBNull(18)) downloadToPOS = reader.GetBoolean(18);
                if (!reader.IsDBNull(19)) createdOn = reader.GetDateTime(19);
                if (!reader.IsDBNull(20)) createdBy = reader.GetGuid(20);
                if (!reader.IsDBNull(21)) modifiedOn = reader.GetDateTime(21);
                if (!reader.IsDBNull(22)) modifiedBy = reader.GetGuid(22);
                if (!reader.IsDBNull(23)) retired = reader.GetBoolean(23);
                if (!reader.IsDBNull(24)) retiredOn = reader.GetDateTime(24);
                if (!reader.IsDBNull(25)) retiredBy = reader.GetGuid(25);
            }
        }
		
        public void Delete()
        {
            Delete(this.ItemId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != ItemId)
                    this.Delete();
                Update();
            }
        }

        public Guid ItemId
        {
            get { return itemId; }
            set { itemId = value; }
        }

        public Guid ProductId
        {
            get { return productId; }
            set { productId = value; }
        }

        public Guid LineOfOperationId
        {
            get { return lineOfOperationId; }
            set { lineOfOperationId = value; }
        }

        public string CurrencyCode
        {
            get { return currencyCode; }
            set { currencyCode = value; }
        }

        public decimal RetailPrice
        {
            get { return retailPrice; }
            set { retailPrice = value; }
        }

        public decimal ListPrice
        {
            get { return listPrice; }
            set { listPrice = value; }
        }

        public decimal MaxPrice
        {
            get { return maxPrice; }
            set { maxPrice = value; }
        }

        public decimal MinPrice
        {
            get { return minPrice; }
            set { minPrice = value; }
        }

        public decimal FirstPrice
        {
            get { return firstPrice; }
            set { firstPrice = value; }
        }

        public DateTime MaxPriceDate
        {
            get { return maxPriceDate; }
            set { maxPriceDate = value; }
        }

        public DateTime MinPriceDate
        {
            get { return minPriceDate; }
            set { minPriceDate = value; }
        }

        public DateTime RetailPriceModifiedOn
        {
            get { return retailPriceModifiedOn; }
            set { retailPriceModifiedOn = value; }
        }

        public decimal MaxDiscount
        {
            get { return maxDiscount; }
            set { maxDiscount = value; }
        }

        public decimal MinDiscount
        {
            get { return minDiscount; }
            set { minDiscount = value; }
        }

        public decimal LatestDiscount
        {
            get { return latestDiscount; }
            set { latestDiscount = value; }
        }

        public string MaxRefNumber
        {
            get { return maxRefNumber; }
            set { maxRefNumber = value; }
        }

        public string MinRefNumber
        {
            get { return minRefNumber; }
            set { minRefNumber = value; }
        }

        public string LatestRefNumber
        {
            get { return latestRefNumber; }
            set { latestRefNumber = value; }
        }

        public bool DownloadToPOS
        {
            get { return downloadToPOS; }
            set { downloadToPOS = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public Guid CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime ModifiedOn
        {
            get { return modifiedOn; }
            set { modifiedOn = value; }
        }

        public Guid ModifiedBy
        {
            get { return modifiedBy; }
            set { modifiedBy = value; }
        }

        public bool Retired
        {
            get { return retired; }
            set { retired = value; }
        }

        public DateTime RetiredOn
        {
            get { return retiredOn; }
            set { retiredOn = value; }
        }

        public Guid RetiredBy
        {
            get { return retiredBy; }
            set { retiredBy = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spProductPrice_LineOfOperation_InsRec", "@ItemId", out returnedValue, parameterValues);
            
            itemId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spProductPrice_LineOfOperation_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[26];
            prams[0] = GetSqlParameter("@ItemId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.ItemId);
            prams[1] = GetSqlParameter("@ProductId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ProductId);
            prams[2] = GetSqlParameter("@LineOfOperationId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.LineOfOperationId);
            prams[3] = GetSqlParameter("@CurrencyCode", ParameterDirection.Input, SqlDbType.VarChar, 3, this.CurrencyCode);
            prams[4] = GetSqlParameter("@RetailPrice", ParameterDirection.Input, SqlDbType.Money, 8, this.RetailPrice);
            prams[5] = GetSqlParameter("@ListPrice", ParameterDirection.Input, SqlDbType.Money, 8, this.ListPrice);
            prams[6] = GetSqlParameter("@MaxPrice", ParameterDirection.Input, SqlDbType.Money, 8, this.MaxPrice);
            prams[7] = GetSqlParameter("@MinPrice", ParameterDirection.Input, SqlDbType.Money, 8, this.MinPrice);
            prams[8] = GetSqlParameter("@FirstPrice", ParameterDirection.Input, SqlDbType.Money, 8, this.FirstPrice);
            prams[9] = GetSqlParameter("@MaxPriceDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.MaxPriceDate);
            prams[10] = GetSqlParameter("@MinPriceDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.MinPriceDate);
            prams[11] = GetSqlParameter("@RetailPriceModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RetailPriceModifiedOn);
            prams[12] = GetSqlParameter("@MaxDiscount", ParameterDirection.Input, SqlDbType.Decimal, 5, this.MaxDiscount);
            prams[13] = GetSqlParameter("@MinDiscount", ParameterDirection.Input, SqlDbType.Decimal, 5, this.MinDiscount);
            prams[14] = GetSqlParameter("@LatestDiscount", ParameterDirection.Input, SqlDbType.Decimal, 5, this.LatestDiscount);
            prams[15] = GetSqlParameter("@MaxRefNumber", ParameterDirection.Input, SqlDbType.VarChar, 20, this.MaxRefNumber);
            prams[16] = GetSqlParameter("@MinRefNumber", ParameterDirection.Input, SqlDbType.VarChar, 20, this.MinRefNumber);
            prams[17] = GetSqlParameter("@LatestRefNumber", ParameterDirection.Input, SqlDbType.VarChar, 20, this.LatestRefNumber);
            prams[18] = GetSqlParameter("@DownloadToPOS", ParameterDirection.Input, SqlDbType.Bit, 1, this.DownloadToPOS);
            prams[19] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[20] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CreatedBy);
            prams[21] = GetSqlParameter("@ModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ModifiedOn);
            prams[22] = GetSqlParameter("@ModifiedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ModifiedBy);
            prams[23] = GetSqlParameter("@Retired", ParameterDirection.Input, SqlDbType.Bit, 1, this.Retired);
            prams[24] = GetSqlParameter("@RetiredOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RetiredOn);
            prams[25] = GetSqlParameter("@RetiredBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.RetiredBy);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@ItemId", SqlDbType.UniqueIdentifier, 16, this.ItemId),
                GetSqlParameterWithoutDirection("@ProductId", SqlDbType.UniqueIdentifier, 16, this.ProductId),
                GetSqlParameterWithoutDirection("@LineOfOperationId", SqlDbType.UniqueIdentifier, 16, this.LineOfOperationId),
                GetSqlParameterWithoutDirection("@CurrencyCode", SqlDbType.VarChar, 3, this.CurrencyCode),
                GetSqlParameterWithoutDirection("@RetailPrice", SqlDbType.Money, 8, this.RetailPrice),
                GetSqlParameterWithoutDirection("@ListPrice", SqlDbType.Money, 8, this.ListPrice),
                GetSqlParameterWithoutDirection("@MaxPrice", SqlDbType.Money, 8, this.MaxPrice),
                GetSqlParameterWithoutDirection("@MinPrice", SqlDbType.Money, 8, this.MinPrice),
                GetSqlParameterWithoutDirection("@FirstPrice", SqlDbType.Money, 8, this.FirstPrice),
                GetSqlParameterWithoutDirection("@MaxPriceDate", SqlDbType.DateTime, 8, this.MaxPriceDate),
                GetSqlParameterWithoutDirection("@MinPriceDate", SqlDbType.DateTime, 8, this.MinPriceDate),
                GetSqlParameterWithoutDirection("@RetailPriceModifiedOn", SqlDbType.DateTime, 8, this.RetailPriceModifiedOn),
                GetSqlParameterWithoutDirection("@MaxDiscount", SqlDbType.Decimal, 5, this.MaxDiscount),
                GetSqlParameterWithoutDirection("@MinDiscount", SqlDbType.Decimal, 5, this.MinDiscount),
                GetSqlParameterWithoutDirection("@LatestDiscount", SqlDbType.Decimal, 5, this.LatestDiscount),
                GetSqlParameterWithoutDirection("@MaxRefNumber", SqlDbType.VarChar, 20, this.MaxRefNumber),
                GetSqlParameterWithoutDirection("@MinRefNumber", SqlDbType.VarChar, 20, this.MinRefNumber),
                GetSqlParameterWithoutDirection("@LatestRefNumber", SqlDbType.VarChar, 20, this.LatestRefNumber),
                GetSqlParameterWithoutDirection("@DownloadToPOS", SqlDbType.Bit, 1, this.DownloadToPOS),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.UniqueIdentifier, 16, this.CreatedBy),
                GetSqlParameterWithoutDirection("@ModifiedOn", SqlDbType.DateTime, 8, this.ModifiedOn),
                GetSqlParameterWithoutDirection("@ModifiedBy", SqlDbType.UniqueIdentifier, 16, this.ModifiedBy),
                GetSqlParameterWithoutDirection("@Retired", SqlDbType.Bit, 1, this.Retired),
                GetSqlParameterWithoutDirection("@RetiredOn", SqlDbType.DateTime, 8, this.RetiredOn),
                GetSqlParameterWithoutDirection("@RetiredBy", SqlDbType.UniqueIdentifier, 16, this.RetiredBy)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("itemId: " + itemId.ToString()).Append("\r\n");
            builder.Append("productId: " + productId.ToString()).Append("\r\n");
            builder.Append("lineOfOperationId: " + lineOfOperationId.ToString()).Append("\r\n");
            builder.Append("currencyCode: " + currencyCode.ToString()).Append("\r\n");
            builder.Append("retailPrice: " + retailPrice.ToString()).Append("\r\n");
            builder.Append("listPrice: " + listPrice.ToString()).Append("\r\n");
            builder.Append("maxPrice: " + maxPrice.ToString()).Append("\r\n");
            builder.Append("minPrice: " + minPrice.ToString()).Append("\r\n");
            builder.Append("firstPrice: " + firstPrice.ToString()).Append("\r\n");
            builder.Append("maxPriceDate: " + maxPriceDate.ToString()).Append("\r\n");
            builder.Append("minPriceDate: " + minPriceDate.ToString()).Append("\r\n");
            builder.Append("retailPriceModifiedOn: " + retailPriceModifiedOn.ToString()).Append("\r\n");
            builder.Append("maxDiscount: " + maxDiscount.ToString()).Append("\r\n");
            builder.Append("minDiscount: " + minDiscount.ToString()).Append("\r\n");
            builder.Append("latestDiscount: " + latestDiscount.ToString()).Append("\r\n");
            builder.Append("maxRefNumber: " + maxRefNumber.ToString()).Append("\r\n");
            builder.Append("minRefNumber: " + minRefNumber.ToString()).Append("\r\n");
            builder.Append("latestRefNumber: " + latestRefNumber.ToString()).Append("\r\n");
            builder.Append("downloadToPOS: " + downloadToPOS.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("modifiedOn: " + modifiedOn.ToString()).Append("\r\n");
            builder.Append("modifiedBy: " + modifiedBy.ToString()).Append("\r\n");
            builder.Append("retired: " + retired.ToString()).Append("\r\n");
            builder.Append("retiredOn: " + retiredOn.ToString()).Append("\r\n");
            builder.Append("retiredBy: " + retiredBy.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			ProductPrice_LineOfOperationCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			// Filter the retired records
			if (WhereClause.Length > 0)
			{
				WhereClause += " AND Retired = 0";
			}
			else
			{
				WhereClause = "Retired = 0";
			}
			
			if (WhereClause.Length > 0)
			{
				source = ProductPrice_LineOfOperation.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = ProductPrice_LineOfOperation.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (ProductPrice_LineOfOperation item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.ProductId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.ItemId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(ProductPrice_LineOfOperation target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.ProductId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				ProductPrice_LineOfOperation parentTemplate = ProductPrice_LineOfOperation.Load(target.ProductId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(ProductPrice_LineOfOperation target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="ProductPrice_LineOfOperation">ProductPrice_LineOfOperation</see> objects.
    /// </summary>
    public class ProductPrice_LineOfOperationCollection : BindingList< ProductPrice_LineOfOperation>
    {
	}
}
