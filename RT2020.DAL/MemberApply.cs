using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.MemberApply.
    /// Date Created:   2020-08-09 02:14:12
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class MemberApply
    {
        private Guid key = Guid.Empty;
        private Guid applyId = Guid.Empty;
        private string cUSTNUM = String.Empty;
        private string bRANCH = String.Empty;
        private string iNITIAL = String.Empty;
        private string memberName = String.Empty;
        private string nAME_CHIN = String.Empty;
        private string iNVADDR1 = String.Empty;
        private string iNVADDR2 = String.Empty;
        private string iNVADDR3 = String.Empty;
        private string iNVADDR4 = String.Empty;
        private string iNVTEL = String.Empty;
        private string iNVFAX = String.Empty;
        private string iNVTLX = String.Empty;
        private string iNVPSN = String.Empty;
        private string iNVDISTRICT = String.Empty;
        private string iNVCITY = String.Empty;
        private string iNVCOUNTRY = String.Empty;
        private string iNVSTATE = String.Empty;
        private string iNVPOSTAL = String.Empty;
        private string iNVEMAIL = String.Empty;
        private string dELADDR1 = String.Empty;
        private string dELADDR2 = String.Empty;
        private string dELADDR3 = String.Empty;
        private string dELADDR4 = String.Empty;
        private string dELTEL = String.Empty;
        private string dELFAX = String.Empty;
        private string dELTLX = String.Empty;
        private string dELPSN = String.Empty;
        private string dELDISTRICT = String.Empty;
        private string dELCITY = String.Empty;
        private string dELSTATE = String.Empty;
        private string dELCOUNTRY = String.Empty;
        private string dELPOSTAL = String.Empty;
        private string dELEMAIL = String.Empty;
        private string uRL = String.Empty;
        private string cLASS = String.Empty;
        private string dIVISION = String.Empty;
        private string gROUPNAME = String.Empty;
        private string bRNO = String.Empty;
        private string sTAFFNO = String.Empty;
        private int decimalPlace = 0;
        private string rEMARK = String.Empty;
        private decimal aCREDIT;
        private int tERMS = 0;
        private decimal nRDISC;
        private decimal pAYDISC;
        private string pAYTYPE = String.Empty;
        private string fACTOR_PAYTO = String.Empty;
        private string cURR = String.Empty;
        private decimal bFBAL;
        private decimal cDBAL;
        private DateTime dATELPUR = DateTime.Parse("1900-1-1");
        private DateTime dATELPAY = DateTime.Parse("1900-1-1");
        private DateTime dATELRET = DateTime.Parse("1900-1-1");
        private string fLAGIGNORE = String.Empty;
        private DateTime dATECREATE = DateTime.Parse("1900-1-1");
        private DateTime dATELCHG = DateTime.Parse("1900-1-1");
        private string uSERLCHG = String.Empty;
        private DateTime pOSTDATE = DateTime.Parse("1900-1-1");
        private string pOSTUSER = String.Empty;

        /// <summary>
        /// Initialize an new empty MemberApply object.
        /// </summary>
        public MemberApply()
        {
        }
		
        /// <summary>
        /// Initialize a new MemberApply object with the given parameters.
        /// </summary>
        public MemberApply(Guid applyId, string cUSTNUM, string bRANCH, string iNITIAL, string memberName, string nAME_CHIN, string iNVADDR1, string iNVADDR2, string iNVADDR3, string iNVADDR4, string iNVTEL, string iNVFAX, string iNVTLX, string iNVPSN, string iNVDISTRICT, string iNVCITY, string iNVCOUNTRY, string iNVSTATE, string iNVPOSTAL, string iNVEMAIL, string dELADDR1, string dELADDR2, string dELADDR3, string dELADDR4, string dELTEL, string dELFAX, string dELTLX, string dELPSN, string dELDISTRICT, string dELCITY, string dELSTATE, string dELCOUNTRY, string dELPOSTAL, string dELEMAIL, string uRL, string cLASS, string dIVISION, string gROUPNAME, string bRNO, string sTAFFNO, int decimalPlace, string rEMARK, decimal aCREDIT, int tERMS, decimal nRDISC, decimal pAYDISC, string pAYTYPE, string fACTOR_PAYTO, string cURR, decimal bFBAL, decimal cDBAL, DateTime dATELPUR, DateTime dATELPAY, DateTime dATELRET, string fLAGIGNORE, DateTime dATECREATE, DateTime dATELCHG, string uSERLCHG, DateTime pOSTDATE, string pOSTUSER)
        {
                this.applyId = applyId;
                this.cUSTNUM = cUSTNUM;
                this.bRANCH = bRANCH;
                this.iNITIAL = iNITIAL;
                this.memberName = memberName;
                this.nAME_CHIN = nAME_CHIN;
                this.iNVADDR1 = iNVADDR1;
                this.iNVADDR2 = iNVADDR2;
                this.iNVADDR3 = iNVADDR3;
                this.iNVADDR4 = iNVADDR4;
                this.iNVTEL = iNVTEL;
                this.iNVFAX = iNVFAX;
                this.iNVTLX = iNVTLX;
                this.iNVPSN = iNVPSN;
                this.iNVDISTRICT = iNVDISTRICT;
                this.iNVCITY = iNVCITY;
                this.iNVCOUNTRY = iNVCOUNTRY;
                this.iNVSTATE = iNVSTATE;
                this.iNVPOSTAL = iNVPOSTAL;
                this.iNVEMAIL = iNVEMAIL;
                this.dELADDR1 = dELADDR1;
                this.dELADDR2 = dELADDR2;
                this.dELADDR3 = dELADDR3;
                this.dELADDR4 = dELADDR4;
                this.dELTEL = dELTEL;
                this.dELFAX = dELFAX;
                this.dELTLX = dELTLX;
                this.dELPSN = dELPSN;
                this.dELDISTRICT = dELDISTRICT;
                this.dELCITY = dELCITY;
                this.dELSTATE = dELSTATE;
                this.dELCOUNTRY = dELCOUNTRY;
                this.dELPOSTAL = dELPOSTAL;
                this.dELEMAIL = dELEMAIL;
                this.uRL = uRL;
                this.cLASS = cLASS;
                this.dIVISION = dIVISION;
                this.gROUPNAME = gROUPNAME;
                this.bRNO = bRNO;
                this.sTAFFNO = sTAFFNO;
                this.decimalPlace = decimalPlace;
                this.rEMARK = rEMARK;
                this.aCREDIT = aCREDIT;
                this.tERMS = tERMS;
                this.nRDISC = nRDISC;
                this.pAYDISC = pAYDISC;
                this.pAYTYPE = pAYTYPE;
                this.fACTOR_PAYTO = fACTOR_PAYTO;
                this.cURR = cURR;
                this.bFBAL = bFBAL;
                this.cDBAL = cDBAL;
                this.dATELPUR = dATELPUR;
                this.dATELPAY = dATELPAY;
                this.dATELRET = dATELRET;
                this.fLAGIGNORE = fLAGIGNORE;
                this.dATECREATE = dATECREATE;
                this.dATELCHG = dATELCHG;
                this.uSERLCHG = uSERLCHG;
                this.pOSTDATE = pOSTDATE;
                this.pOSTUSER = pOSTUSER;
        }	
		
        /// <summary>
        /// Loads a MemberApply object from the database using the given ApplyId
        /// </summary>
        /// <param name="applyId">The primary key value</param>
        /// <returns>A MemberApply object</returns>
        public static MemberApply Load(Guid applyId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ApplyId", applyId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spMemberApply_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    MemberApply result = new MemberApply();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a MemberApply object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A MemberApply object</returns>
        public static MemberApply LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spMemberApply_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    MemberApply result = new MemberApply();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of MemberApply objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the MemberApply objects in the database.</returns>
        public static MemberApplyCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spMemberApply_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of MemberApply objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the MemberApply objects in the database ordered by the columns specified.</returns>
        public static MemberApplyCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spMemberApply_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of MemberApply objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the MemberApply objects in the database.</returns>
        public static MemberApplyCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spMemberApply_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of MemberApply objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the MemberApply objects in the database ordered by the columns specified.</returns>
        public static MemberApplyCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spMemberApply_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of MemberApply objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the MemberApply objects in the database.</returns>
        public static MemberApplyCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            MemberApplyCollection result = new MemberApplyCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    MemberApply tmp = new MemberApply();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a MemberApply object from the database.
        /// </summary>
        /// <param name="applyId">The primary key value</param>
        public static void Delete(Guid applyId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ApplyId", applyId) };
            SqlHelper.Default.ExecuteNonQuery("spMemberApply_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) applyId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) cUSTNUM = reader.GetString(1);
                if (!reader.IsDBNull(2)) bRANCH = reader.GetString(2);
                if (!reader.IsDBNull(3)) iNITIAL = reader.GetString(3);
                if (!reader.IsDBNull(4)) memberName = reader.GetString(4);
                if (!reader.IsDBNull(5)) nAME_CHIN = reader.GetString(5);
                if (!reader.IsDBNull(6)) iNVADDR1 = reader.GetString(6);
                if (!reader.IsDBNull(7)) iNVADDR2 = reader.GetString(7);
                if (!reader.IsDBNull(8)) iNVADDR3 = reader.GetString(8);
                if (!reader.IsDBNull(9)) iNVADDR4 = reader.GetString(9);
                if (!reader.IsDBNull(10)) iNVTEL = reader.GetString(10);
                if (!reader.IsDBNull(11)) iNVFAX = reader.GetString(11);
                if (!reader.IsDBNull(12)) iNVTLX = reader.GetString(12);
                if (!reader.IsDBNull(13)) iNVPSN = reader.GetString(13);
                if (!reader.IsDBNull(14)) iNVDISTRICT = reader.GetString(14);
                if (!reader.IsDBNull(15)) iNVCITY = reader.GetString(15);
                if (!reader.IsDBNull(16)) iNVCOUNTRY = reader.GetString(16);
                if (!reader.IsDBNull(17)) iNVSTATE = reader.GetString(17);
                if (!reader.IsDBNull(18)) iNVPOSTAL = reader.GetString(18);
                if (!reader.IsDBNull(19)) iNVEMAIL = reader.GetString(19);
                if (!reader.IsDBNull(20)) dELADDR1 = reader.GetString(20);
                if (!reader.IsDBNull(21)) dELADDR2 = reader.GetString(21);
                if (!reader.IsDBNull(22)) dELADDR3 = reader.GetString(22);
                if (!reader.IsDBNull(23)) dELADDR4 = reader.GetString(23);
                if (!reader.IsDBNull(24)) dELTEL = reader.GetString(24);
                if (!reader.IsDBNull(25)) dELFAX = reader.GetString(25);
                if (!reader.IsDBNull(26)) dELTLX = reader.GetString(26);
                if (!reader.IsDBNull(27)) dELPSN = reader.GetString(27);
                if (!reader.IsDBNull(28)) dELDISTRICT = reader.GetString(28);
                if (!reader.IsDBNull(29)) dELCITY = reader.GetString(29);
                if (!reader.IsDBNull(30)) dELSTATE = reader.GetString(30);
                if (!reader.IsDBNull(31)) dELCOUNTRY = reader.GetString(31);
                if (!reader.IsDBNull(32)) dELPOSTAL = reader.GetString(32);
                if (!reader.IsDBNull(33)) dELEMAIL = reader.GetString(33);
                if (!reader.IsDBNull(34)) uRL = reader.GetString(34);
                if (!reader.IsDBNull(35)) cLASS = reader.GetString(35);
                if (!reader.IsDBNull(36)) dIVISION = reader.GetString(36);
                if (!reader.IsDBNull(37)) gROUPNAME = reader.GetString(37);
                if (!reader.IsDBNull(38)) bRNO = reader.GetString(38);
                if (!reader.IsDBNull(39)) sTAFFNO = reader.GetString(39);
                if (!reader.IsDBNull(40)) decimalPlace = reader.GetInt32(40);
                if (!reader.IsDBNull(41)) rEMARK = reader.GetString(41);
                if (!reader.IsDBNull(42)) aCREDIT = reader.GetDecimal(42);
                if (!reader.IsDBNull(43)) tERMS = reader.GetInt32(43);
                if (!reader.IsDBNull(44)) nRDISC = reader.GetDecimal(44);
                if (!reader.IsDBNull(45)) pAYDISC = reader.GetDecimal(45);
                if (!reader.IsDBNull(46)) pAYTYPE = reader.GetString(46);
                if (!reader.IsDBNull(47)) fACTOR_PAYTO = reader.GetString(47);
                if (!reader.IsDBNull(48)) cURR = reader.GetString(48);
                if (!reader.IsDBNull(49)) bFBAL = reader.GetDecimal(49);
                if (!reader.IsDBNull(50)) cDBAL = reader.GetDecimal(50);
                if (!reader.IsDBNull(51)) dATELPUR = reader.GetDateTime(51);
                if (!reader.IsDBNull(52)) dATELPAY = reader.GetDateTime(52);
                if (!reader.IsDBNull(53)) dATELRET = reader.GetDateTime(53);
                if (!reader.IsDBNull(54)) fLAGIGNORE = reader.GetString(54);
                if (!reader.IsDBNull(55)) dATECREATE = reader.GetDateTime(55);
                if (!reader.IsDBNull(56)) dATELCHG = reader.GetDateTime(56);
                if (!reader.IsDBNull(57)) uSERLCHG = reader.GetString(57);
                if (!reader.IsDBNull(58)) pOSTDATE = reader.GetDateTime(58);
                if (!reader.IsDBNull(59)) pOSTUSER = reader.GetString(59);
            }
        }
		
        public void Delete()
        {
            Delete(this.ApplyId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != ApplyId)
                    this.Delete();
                Update();
            }
        }

        public Guid ApplyId
        {
            get { return applyId; }
            set { applyId = value; }
        }

        public string CUSTNUM
        {
            get { return cUSTNUM; }
            set { cUSTNUM = value; }
        }

        public string BRANCH
        {
            get { return bRANCH; }
            set { bRANCH = value; }
        }

        public string INITIAL
        {
            get { return iNITIAL; }
            set { iNITIAL = value; }
        }

        public string MemberName
        {
            get { return memberName; }
            set { memberName = value; }
        }

        public string NAME_CHIN
        {
            get { return nAME_CHIN; }
            set { nAME_CHIN = value; }
        }

        public string INVADDR1
        {
            get { return iNVADDR1; }
            set { iNVADDR1 = value; }
        }

        public string INVADDR2
        {
            get { return iNVADDR2; }
            set { iNVADDR2 = value; }
        }

        public string INVADDR3
        {
            get { return iNVADDR3; }
            set { iNVADDR3 = value; }
        }

        public string INVADDR4
        {
            get { return iNVADDR4; }
            set { iNVADDR4 = value; }
        }

        public string INVTEL
        {
            get { return iNVTEL; }
            set { iNVTEL = value; }
        }

        public string INVFAX
        {
            get { return iNVFAX; }
            set { iNVFAX = value; }
        }

        public string INVTLX
        {
            get { return iNVTLX; }
            set { iNVTLX = value; }
        }

        public string INVPSN
        {
            get { return iNVPSN; }
            set { iNVPSN = value; }
        }

        public string INVDISTRICT
        {
            get { return iNVDISTRICT; }
            set { iNVDISTRICT = value; }
        }

        public string INVCITY
        {
            get { return iNVCITY; }
            set { iNVCITY = value; }
        }

        public string INVCOUNTRY
        {
            get { return iNVCOUNTRY; }
            set { iNVCOUNTRY = value; }
        }

        public string INVSTATE
        {
            get { return iNVSTATE; }
            set { iNVSTATE = value; }
        }

        public string INVPOSTAL
        {
            get { return iNVPOSTAL; }
            set { iNVPOSTAL = value; }
        }

        public string INVEMAIL
        {
            get { return iNVEMAIL; }
            set { iNVEMAIL = value; }
        }

        public string DELADDR1
        {
            get { return dELADDR1; }
            set { dELADDR1 = value; }
        }

        public string DELADDR2
        {
            get { return dELADDR2; }
            set { dELADDR2 = value; }
        }

        public string DELADDR3
        {
            get { return dELADDR3; }
            set { dELADDR3 = value; }
        }

        public string DELADDR4
        {
            get { return dELADDR4; }
            set { dELADDR4 = value; }
        }

        public string DELTEL
        {
            get { return dELTEL; }
            set { dELTEL = value; }
        }

        public string DELFAX
        {
            get { return dELFAX; }
            set { dELFAX = value; }
        }

        public string DELTLX
        {
            get { return dELTLX; }
            set { dELTLX = value; }
        }

        public string DELPSN
        {
            get { return dELPSN; }
            set { dELPSN = value; }
        }

        public string DELDISTRICT
        {
            get { return dELDISTRICT; }
            set { dELDISTRICT = value; }
        }

        public string DELCITY
        {
            get { return dELCITY; }
            set { dELCITY = value; }
        }

        public string DELSTATE
        {
            get { return dELSTATE; }
            set { dELSTATE = value; }
        }

        public string DELCOUNTRY
        {
            get { return dELCOUNTRY; }
            set { dELCOUNTRY = value; }
        }

        public string DELPOSTAL
        {
            get { return dELPOSTAL; }
            set { dELPOSTAL = value; }
        }

        public string DELEMAIL
        {
            get { return dELEMAIL; }
            set { dELEMAIL = value; }
        }

        public string URL
        {
            get { return uRL; }
            set { uRL = value; }
        }

        public string CLASS
        {
            get { return cLASS; }
            set { cLASS = value; }
        }

        public string DIVISION
        {
            get { return dIVISION; }
            set { dIVISION = value; }
        }

        public string GROUPNAME
        {
            get { return gROUPNAME; }
            set { gROUPNAME = value; }
        }

        public string BRNO
        {
            get { return bRNO; }
            set { bRNO = value; }
        }

        public string STAFFNO
        {
            get { return sTAFFNO; }
            set { sTAFFNO = value; }
        }

        public int DecimalPlace
        {
            get { return decimalPlace; }
            set { decimalPlace = value; }
        }

        public string REMARK
        {
            get { return rEMARK; }
            set { rEMARK = value; }
        }

        public decimal ACREDIT
        {
            get { return aCREDIT; }
            set { aCREDIT = value; }
        }

        public int TERMS
        {
            get { return tERMS; }
            set { tERMS = value; }
        }

        public decimal NRDISC
        {
            get { return nRDISC; }
            set { nRDISC = value; }
        }

        public decimal PAYDISC
        {
            get { return pAYDISC; }
            set { pAYDISC = value; }
        }

        public string PAYTYPE
        {
            get { return pAYTYPE; }
            set { pAYTYPE = value; }
        }

        public string FACTOR_PAYTO
        {
            get { return fACTOR_PAYTO; }
            set { fACTOR_PAYTO = value; }
        }

        public string CURR
        {
            get { return cURR; }
            set { cURR = value; }
        }

        public decimal BFBAL
        {
            get { return bFBAL; }
            set { bFBAL = value; }
        }

        public decimal CDBAL
        {
            get { return cDBAL; }
            set { cDBAL = value; }
        }

        public DateTime DATELPUR
        {
            get { return dATELPUR; }
            set { dATELPUR = value; }
        }

        public DateTime DATELPAY
        {
            get { return dATELPAY; }
            set { dATELPAY = value; }
        }

        public DateTime DATELRET
        {
            get { return dATELRET; }
            set { dATELRET = value; }
        }

        public string FLAGIGNORE
        {
            get { return fLAGIGNORE; }
            set { fLAGIGNORE = value; }
        }

        public DateTime DATECREATE
        {
            get { return dATECREATE; }
            set { dATECREATE = value; }
        }

        public DateTime DATELCHG
        {
            get { return dATELCHG; }
            set { dATELCHG = value; }
        }

        public string USERLCHG
        {
            get { return uSERLCHG; }
            set { uSERLCHG = value; }
        }

        public DateTime POSTDATE
        {
            get { return pOSTDATE; }
            set { pOSTDATE = value; }
        }

        public string POSTUSER
        {
            get { return pOSTUSER; }
            set { pOSTUSER = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spMemberApply_InsRec", "@ApplyId", out returnedValue, parameterValues);
            
            applyId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spMemberApply_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[60];
            prams[0] = GetSqlParameter("@ApplyId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.ApplyId);
            prams[1] = GetSqlParameter("@CUSTNUM", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CUSTNUM);
            prams[2] = GetSqlParameter("@BRANCH", ParameterDirection.Input, SqlDbType.VarChar, 4, this.BRANCH);
            prams[3] = GetSqlParameter("@INITIAL", ParameterDirection.Input, SqlDbType.VarChar, 10, this.INITIAL);
            prams[4] = GetSqlParameter("@MemberName", ParameterDirection.Input, SqlDbType.VarChar, 50, this.MemberName);
            prams[5] = GetSqlParameter("@NAME_CHIN", ParameterDirection.Input, SqlDbType.VarChar, 50, this.NAME_CHIN);
            prams[6] = GetSqlParameter("@INVADDR1", ParameterDirection.Input, SqlDbType.VarChar, 50, this.INVADDR1);
            prams[7] = GetSqlParameter("@INVADDR2", ParameterDirection.Input, SqlDbType.VarChar, 50, this.INVADDR2);
            prams[8] = GetSqlParameter("@INVADDR3", ParameterDirection.Input, SqlDbType.VarChar, 50, this.INVADDR3);
            prams[9] = GetSqlParameter("@INVADDR4", ParameterDirection.Input, SqlDbType.VarChar, 50, this.INVADDR4);
            prams[10] = GetSqlParameter("@INVTEL", ParameterDirection.Input, SqlDbType.VarChar, 20, this.INVTEL);
            prams[11] = GetSqlParameter("@INVFAX", ParameterDirection.Input, SqlDbType.VarChar, 20, this.INVFAX);
            prams[12] = GetSqlParameter("@INVTLX", ParameterDirection.Input, SqlDbType.VarChar, 20, this.INVTLX);
            prams[13] = GetSqlParameter("@INVPSN", ParameterDirection.Input, SqlDbType.VarChar, 50, this.INVPSN);
            prams[14] = GetSqlParameter("@INVDISTRICT", ParameterDirection.Input, SqlDbType.VarChar, 4, this.INVDISTRICT);
            prams[15] = GetSqlParameter("@INVCITY", ParameterDirection.Input, SqlDbType.VarChar, 4, this.INVCITY);
            prams[16] = GetSqlParameter("@INVCOUNTRY", ParameterDirection.Input, SqlDbType.VarChar, 4, this.INVCOUNTRY);
            prams[17] = GetSqlParameter("@INVSTATE", ParameterDirection.Input, SqlDbType.VarChar, 4, this.INVSTATE);
            prams[18] = GetSqlParameter("@INVPOSTAL", ParameterDirection.Input, SqlDbType.VarChar, 20, this.INVPOSTAL);
            prams[19] = GetSqlParameter("@INVEMAIL", ParameterDirection.Input, SqlDbType.VarChar, 50, this.INVEMAIL);
            prams[20] = GetSqlParameter("@DELADDR1", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELADDR1);
            prams[21] = GetSqlParameter("@DELADDR2", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELADDR2);
            prams[22] = GetSqlParameter("@DELADDR3", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELADDR3);
            prams[23] = GetSqlParameter("@DELADDR4", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELADDR4);
            prams[24] = GetSqlParameter("@DELTEL", ParameterDirection.Input, SqlDbType.VarChar, 20, this.DELTEL);
            prams[25] = GetSqlParameter("@DELFAX", ParameterDirection.Input, SqlDbType.VarChar, 20, this.DELFAX);
            prams[26] = GetSqlParameter("@DELTLX", ParameterDirection.Input, SqlDbType.VarChar, 20, this.DELTLX);
            prams[27] = GetSqlParameter("@DELPSN", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELPSN);
            prams[28] = GetSqlParameter("@DELDISTRICT", ParameterDirection.Input, SqlDbType.VarChar, 4, this.DELDISTRICT);
            prams[29] = GetSqlParameter("@DELCITY", ParameterDirection.Input, SqlDbType.VarChar, 4, this.DELCITY);
            prams[30] = GetSqlParameter("@DELSTATE", ParameterDirection.Input, SqlDbType.VarChar, 4, this.DELSTATE);
            prams[31] = GetSqlParameter("@DELCOUNTRY", ParameterDirection.Input, SqlDbType.VarChar, 4, this.DELCOUNTRY);
            prams[32] = GetSqlParameter("@DELPOSTAL", ParameterDirection.Input, SqlDbType.VarChar, 20, this.DELPOSTAL);
            prams[33] = GetSqlParameter("@DELEMAIL", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELEMAIL);
            prams[34] = GetSqlParameter("@URL", ParameterDirection.Input, SqlDbType.VarChar, 50, this.URL);
            prams[35] = GetSqlParameter("@CLASS", ParameterDirection.Input, SqlDbType.VarChar, 1, this.CLASS);
            prams[36] = GetSqlParameter("@DIVISION", ParameterDirection.Input, SqlDbType.VarChar, 1, this.DIVISION);
            prams[37] = GetSqlParameter("@GROUPNAME", ParameterDirection.Input, SqlDbType.VarChar, 10, this.GROUPNAME);
            prams[38] = GetSqlParameter("@BRNO", ParameterDirection.Input, SqlDbType.VarChar, 35, this.BRNO);
            prams[39] = GetSqlParameter("@STAFFNO", ParameterDirection.Input, SqlDbType.VarChar, 4, this.STAFFNO);
            prams[40] = GetSqlParameter("@DecimalPlace", ParameterDirection.Input, SqlDbType.Int, 4, this.DecimalPlace);
            prams[41] = GetSqlParameter("@REMARK", ParameterDirection.Input, SqlDbType.VarChar, 35, this.REMARK);
            prams[42] = GetSqlParameter("@ACREDIT", ParameterDirection.Input, SqlDbType.Money, 8, this.ACREDIT);
            prams[43] = GetSqlParameter("@TERMS", ParameterDirection.Input, SqlDbType.Int, 4, this.TERMS);
            prams[44] = GetSqlParameter("@NRDISC", ParameterDirection.Input, SqlDbType.Decimal, 5, this.NRDISC);
            prams[45] = GetSqlParameter("@PAYDISC", ParameterDirection.Input, SqlDbType.Decimal, 5, this.PAYDISC);
            prams[46] = GetSqlParameter("@PAYTYPE", ParameterDirection.Input, SqlDbType.VarChar, 4, this.PAYTYPE);
            prams[47] = GetSqlParameter("@FACTOR_PAYTO", ParameterDirection.Input, SqlDbType.VarChar, 2, this.FACTOR_PAYTO);
            prams[48] = GetSqlParameter("@CURR", ParameterDirection.Input, SqlDbType.VarChar, 3, this.CURR);
            prams[49] = GetSqlParameter("@BFBAL", ParameterDirection.Input, SqlDbType.Money, 8, this.BFBAL);
            prams[50] = GetSqlParameter("@CDBAL", ParameterDirection.Input, SqlDbType.Money, 8, this.CDBAL);
            prams[51] = GetSqlParameter("@DATELPUR", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATELPUR);
            prams[52] = GetSqlParameter("@DATELPAY", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATELPAY);
            prams[53] = GetSqlParameter("@DATELRET", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATELRET);
            prams[54] = GetSqlParameter("@FLAGIGNORE", ParameterDirection.Input, SqlDbType.VarChar, 1, this.FLAGIGNORE);
            prams[55] = GetSqlParameter("@DATECREATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATECREATE);
            prams[56] = GetSqlParameter("@DATELCHG", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATELCHG);
            prams[57] = GetSqlParameter("@USERLCHG", ParameterDirection.Input, SqlDbType.VarChar, 4, this.USERLCHG);
            prams[58] = GetSqlParameter("@POSTDATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.POSTDATE);
            prams[59] = GetSqlParameter("@POSTUSER", ParameterDirection.Input, SqlDbType.VarChar, 4, this.POSTUSER);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@ApplyId", SqlDbType.UniqueIdentifier, 16, this.ApplyId),
                GetSqlParameterWithoutDirection("@CUSTNUM", SqlDbType.VarChar, 6, this.CUSTNUM),
                GetSqlParameterWithoutDirection("@BRANCH", SqlDbType.VarChar, 4, this.BRANCH),
                GetSqlParameterWithoutDirection("@INITIAL", SqlDbType.VarChar, 10, this.INITIAL),
                GetSqlParameterWithoutDirection("@MemberName", SqlDbType.VarChar, 50, this.MemberName),
                GetSqlParameterWithoutDirection("@NAME_CHIN", SqlDbType.VarChar, 50, this.NAME_CHIN),
                GetSqlParameterWithoutDirection("@INVADDR1", SqlDbType.VarChar, 50, this.INVADDR1),
                GetSqlParameterWithoutDirection("@INVADDR2", SqlDbType.VarChar, 50, this.INVADDR2),
                GetSqlParameterWithoutDirection("@INVADDR3", SqlDbType.VarChar, 50, this.INVADDR3),
                GetSqlParameterWithoutDirection("@INVADDR4", SqlDbType.VarChar, 50, this.INVADDR4),
                GetSqlParameterWithoutDirection("@INVTEL", SqlDbType.VarChar, 20, this.INVTEL),
                GetSqlParameterWithoutDirection("@INVFAX", SqlDbType.VarChar, 20, this.INVFAX),
                GetSqlParameterWithoutDirection("@INVTLX", SqlDbType.VarChar, 20, this.INVTLX),
                GetSqlParameterWithoutDirection("@INVPSN", SqlDbType.VarChar, 50, this.INVPSN),
                GetSqlParameterWithoutDirection("@INVDISTRICT", SqlDbType.VarChar, 4, this.INVDISTRICT),
                GetSqlParameterWithoutDirection("@INVCITY", SqlDbType.VarChar, 4, this.INVCITY),
                GetSqlParameterWithoutDirection("@INVCOUNTRY", SqlDbType.VarChar, 4, this.INVCOUNTRY),
                GetSqlParameterWithoutDirection("@INVSTATE", SqlDbType.VarChar, 4, this.INVSTATE),
                GetSqlParameterWithoutDirection("@INVPOSTAL", SqlDbType.VarChar, 20, this.INVPOSTAL),
                GetSqlParameterWithoutDirection("@INVEMAIL", SqlDbType.VarChar, 50, this.INVEMAIL),
                GetSqlParameterWithoutDirection("@DELADDR1", SqlDbType.VarChar, 50, this.DELADDR1),
                GetSqlParameterWithoutDirection("@DELADDR2", SqlDbType.VarChar, 50, this.DELADDR2),
                GetSqlParameterWithoutDirection("@DELADDR3", SqlDbType.VarChar, 50, this.DELADDR3),
                GetSqlParameterWithoutDirection("@DELADDR4", SqlDbType.VarChar, 50, this.DELADDR4),
                GetSqlParameterWithoutDirection("@DELTEL", SqlDbType.VarChar, 20, this.DELTEL),
                GetSqlParameterWithoutDirection("@DELFAX", SqlDbType.VarChar, 20, this.DELFAX),
                GetSqlParameterWithoutDirection("@DELTLX", SqlDbType.VarChar, 20, this.DELTLX),
                GetSqlParameterWithoutDirection("@DELPSN", SqlDbType.VarChar, 50, this.DELPSN),
                GetSqlParameterWithoutDirection("@DELDISTRICT", SqlDbType.VarChar, 4, this.DELDISTRICT),
                GetSqlParameterWithoutDirection("@DELCITY", SqlDbType.VarChar, 4, this.DELCITY),
                GetSqlParameterWithoutDirection("@DELSTATE", SqlDbType.VarChar, 4, this.DELSTATE),
                GetSqlParameterWithoutDirection("@DELCOUNTRY", SqlDbType.VarChar, 4, this.DELCOUNTRY),
                GetSqlParameterWithoutDirection("@DELPOSTAL", SqlDbType.VarChar, 20, this.DELPOSTAL),
                GetSqlParameterWithoutDirection("@DELEMAIL", SqlDbType.VarChar, 50, this.DELEMAIL),
                GetSqlParameterWithoutDirection("@URL", SqlDbType.VarChar, 50, this.URL),
                GetSqlParameterWithoutDirection("@CLASS", SqlDbType.VarChar, 1, this.CLASS),
                GetSqlParameterWithoutDirection("@DIVISION", SqlDbType.VarChar, 1, this.DIVISION),
                GetSqlParameterWithoutDirection("@GROUPNAME", SqlDbType.VarChar, 10, this.GROUPNAME),
                GetSqlParameterWithoutDirection("@BRNO", SqlDbType.VarChar, 35, this.BRNO),
                GetSqlParameterWithoutDirection("@STAFFNO", SqlDbType.VarChar, 4, this.STAFFNO),
                GetSqlParameterWithoutDirection("@DecimalPlace", SqlDbType.Int, 4, this.DecimalPlace),
                GetSqlParameterWithoutDirection("@REMARK", SqlDbType.VarChar, 35, this.REMARK),
                GetSqlParameterWithoutDirection("@ACREDIT", SqlDbType.Money, 8, this.ACREDIT),
                GetSqlParameterWithoutDirection("@TERMS", SqlDbType.Int, 4, this.TERMS),
                GetSqlParameterWithoutDirection("@NRDISC", SqlDbType.Decimal, 5, this.NRDISC),
                GetSqlParameterWithoutDirection("@PAYDISC", SqlDbType.Decimal, 5, this.PAYDISC),
                GetSqlParameterWithoutDirection("@PAYTYPE", SqlDbType.VarChar, 4, this.PAYTYPE),
                GetSqlParameterWithoutDirection("@FACTOR_PAYTO", SqlDbType.VarChar, 2, this.FACTOR_PAYTO),
                GetSqlParameterWithoutDirection("@CURR", SqlDbType.VarChar, 3, this.CURR),
                GetSqlParameterWithoutDirection("@BFBAL", SqlDbType.Money, 8, this.BFBAL),
                GetSqlParameterWithoutDirection("@CDBAL", SqlDbType.Money, 8, this.CDBAL),
                GetSqlParameterWithoutDirection("@DATELPUR", SqlDbType.DateTime, 8, this.DATELPUR),
                GetSqlParameterWithoutDirection("@DATELPAY", SqlDbType.DateTime, 8, this.DATELPAY),
                GetSqlParameterWithoutDirection("@DATELRET", SqlDbType.DateTime, 8, this.DATELRET),
                GetSqlParameterWithoutDirection("@FLAGIGNORE", SqlDbType.VarChar, 1, this.FLAGIGNORE),
                GetSqlParameterWithoutDirection("@DATECREATE", SqlDbType.DateTime, 8, this.DATECREATE),
                GetSqlParameterWithoutDirection("@DATELCHG", SqlDbType.DateTime, 8, this.DATELCHG),
                GetSqlParameterWithoutDirection("@USERLCHG", SqlDbType.VarChar, 4, this.USERLCHG),
                GetSqlParameterWithoutDirection("@POSTDATE", SqlDbType.DateTime, 8, this.POSTDATE),
                GetSqlParameterWithoutDirection("@POSTUSER", SqlDbType.VarChar, 4, this.POSTUSER)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("applyId: " + applyId.ToString()).Append("\r\n");
            builder.Append("cUSTNUM: " + cUSTNUM.ToString()).Append("\r\n");
            builder.Append("bRANCH: " + bRANCH.ToString()).Append("\r\n");
            builder.Append("iNITIAL: " + iNITIAL.ToString()).Append("\r\n");
            builder.Append("memberName: " + memberName.ToString()).Append("\r\n");
            builder.Append("nAME_CHIN: " + nAME_CHIN.ToString()).Append("\r\n");
            builder.Append("iNVADDR1: " + iNVADDR1.ToString()).Append("\r\n");
            builder.Append("iNVADDR2: " + iNVADDR2.ToString()).Append("\r\n");
            builder.Append("iNVADDR3: " + iNVADDR3.ToString()).Append("\r\n");
            builder.Append("iNVADDR4: " + iNVADDR4.ToString()).Append("\r\n");
            builder.Append("iNVTEL: " + iNVTEL.ToString()).Append("\r\n");
            builder.Append("iNVFAX: " + iNVFAX.ToString()).Append("\r\n");
            builder.Append("iNVTLX: " + iNVTLX.ToString()).Append("\r\n");
            builder.Append("iNVPSN: " + iNVPSN.ToString()).Append("\r\n");
            builder.Append("iNVDISTRICT: " + iNVDISTRICT.ToString()).Append("\r\n");
            builder.Append("iNVCITY: " + iNVCITY.ToString()).Append("\r\n");
            builder.Append("iNVCOUNTRY: " + iNVCOUNTRY.ToString()).Append("\r\n");
            builder.Append("iNVSTATE: " + iNVSTATE.ToString()).Append("\r\n");
            builder.Append("iNVPOSTAL: " + iNVPOSTAL.ToString()).Append("\r\n");
            builder.Append("iNVEMAIL: " + iNVEMAIL.ToString()).Append("\r\n");
            builder.Append("dELADDR1: " + dELADDR1.ToString()).Append("\r\n");
            builder.Append("dELADDR2: " + dELADDR2.ToString()).Append("\r\n");
            builder.Append("dELADDR3: " + dELADDR3.ToString()).Append("\r\n");
            builder.Append("dELADDR4: " + dELADDR4.ToString()).Append("\r\n");
            builder.Append("dELTEL: " + dELTEL.ToString()).Append("\r\n");
            builder.Append("dELFAX: " + dELFAX.ToString()).Append("\r\n");
            builder.Append("dELTLX: " + dELTLX.ToString()).Append("\r\n");
            builder.Append("dELPSN: " + dELPSN.ToString()).Append("\r\n");
            builder.Append("dELDISTRICT: " + dELDISTRICT.ToString()).Append("\r\n");
            builder.Append("dELCITY: " + dELCITY.ToString()).Append("\r\n");
            builder.Append("dELSTATE: " + dELSTATE.ToString()).Append("\r\n");
            builder.Append("dELCOUNTRY: " + dELCOUNTRY.ToString()).Append("\r\n");
            builder.Append("dELPOSTAL: " + dELPOSTAL.ToString()).Append("\r\n");
            builder.Append("dELEMAIL: " + dELEMAIL.ToString()).Append("\r\n");
            builder.Append("uRL: " + uRL.ToString()).Append("\r\n");
            builder.Append("cLASS: " + cLASS.ToString()).Append("\r\n");
            builder.Append("dIVISION: " + dIVISION.ToString()).Append("\r\n");
            builder.Append("gROUPNAME: " + gROUPNAME.ToString()).Append("\r\n");
            builder.Append("bRNO: " + bRNO.ToString()).Append("\r\n");
            builder.Append("sTAFFNO: " + sTAFFNO.ToString()).Append("\r\n");
            builder.Append("decimalPlace: " + decimalPlace.ToString()).Append("\r\n");
            builder.Append("rEMARK: " + rEMARK.ToString()).Append("\r\n");
            builder.Append("aCREDIT: " + aCREDIT.ToString()).Append("\r\n");
            builder.Append("tERMS: " + tERMS.ToString()).Append("\r\n");
            builder.Append("nRDISC: " + nRDISC.ToString()).Append("\r\n");
            builder.Append("pAYDISC: " + pAYDISC.ToString()).Append("\r\n");
            builder.Append("pAYTYPE: " + pAYTYPE.ToString()).Append("\r\n");
            builder.Append("fACTOR_PAYTO: " + fACTOR_PAYTO.ToString()).Append("\r\n");
            builder.Append("cURR: " + cURR.ToString()).Append("\r\n");
            builder.Append("bFBAL: " + bFBAL.ToString()).Append("\r\n");
            builder.Append("cDBAL: " + cDBAL.ToString()).Append("\r\n");
            builder.Append("dATELPUR: " + dATELPUR.ToString()).Append("\r\n");
            builder.Append("dATELPAY: " + dATELPAY.ToString()).Append("\r\n");
            builder.Append("dATELRET: " + dATELRET.ToString()).Append("\r\n");
            builder.Append("fLAGIGNORE: " + fLAGIGNORE.ToString()).Append("\r\n");
            builder.Append("dATECREATE: " + dATECREATE.ToString()).Append("\r\n");
            builder.Append("dATELCHG: " + dATELCHG.ToString()).Append("\r\n");
            builder.Append("uSERLCHG: " + uSERLCHG.ToString()).Append("\r\n");
            builder.Append("pOSTDATE: " + pOSTDATE.ToString()).Append("\r\n");
            builder.Append("pOSTUSER: " + pOSTUSER.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			MemberApplyCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = MemberApply.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = MemberApply.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (MemberApply item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = IgnorThis(item, ParentFilter);
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.ApplyId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(MemberApply target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
			string filterField = (string)pi.GetValue(target, null);
			if (filterField.ToLower() == parsed[1].ToLower())
			{
				result = false;
			}
			return result;
		}

		private static string GetFormatedText(MemberApply target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="MemberApply">MemberApply</see> objects.
    /// </summary>
    public class MemberApplyCollection : BindingList< MemberApply>
    {
	}
}
