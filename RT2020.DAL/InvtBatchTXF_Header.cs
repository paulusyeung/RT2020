using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.InvtBatchTXF_Header.
    /// Date Created:   2020-08-09 02:14:10
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class InvtBatchTXF_Header
    {
        private Guid key = Guid.Empty;
        private Guid headerId = Guid.Empty;
        private string txType = String.Empty;
        private string txNumber = String.Empty;
        private DateTime txDate = DateTime.Parse("1900-1-1");
        private Guid staffId = Guid.Empty;
        private Guid fromLocation = Guid.Empty;
        private Guid toLocation = Guid.Empty;
        private DateTime transferredOn = DateTime.Parse("1900-1-1");
        private DateTime completedOn = DateTime.Parse("1900-1-1");
        private string reference = String.Empty;
        private string deliveryNoteRef = String.Empty;
        private string remarks = String.Empty;
        private DateTime postedOn = DateTime.Parse("1900-1-1");
        private Guid postedBy = Guid.Empty;
        private bool readOnly;
        private bool pOSTNEG;
        private string cONFIRM_TRF = String.Empty;
        private DateTime cONFIRM_TRF_LASTUPDATE = DateTime.Parse("1900-1-1");
        private Guid cONFIRM_TRF_LASTUSER = Guid.Empty;
        private string tRF_REASON = String.Empty;
        private string tRF_TYPE = String.Empty;
        private string pickingNoteRef = String.Empty;
        private bool picked;
        private int status = 0;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private Guid createdBy = Guid.Empty;
        private DateTime modifiedOn = DateTime.Parse("1900-1-1");
        private Guid modifiedBy = Guid.Empty;
        private bool retired;
        private DateTime retiredOn = DateTime.Parse("1900-1-1");
        private Guid retiredBy = Guid.Empty;

        /// <summary>
        /// Initialize an new empty InvtBatchTXF_Header object.
        /// </summary>
        public InvtBatchTXF_Header()
        {
        }
		
        /// <summary>
        /// Initialize a new InvtBatchTXF_Header object with the given parameters.
        /// </summary>
        public InvtBatchTXF_Header(Guid headerId, string txType, string txNumber, DateTime txDate, Guid staffId, Guid fromLocation, Guid toLocation, DateTime transferredOn, DateTime completedOn, string reference, string deliveryNoteRef, string remarks, DateTime postedOn, Guid postedBy, bool readOnly, bool pOSTNEG, string cONFIRM_TRF, DateTime cONFIRM_TRF_LASTUPDATE, Guid cONFIRM_TRF_LASTUSER, string tRF_REASON, string tRF_TYPE, string pickingNoteRef, bool picked, int status, DateTime createdOn, Guid createdBy, DateTime modifiedOn, Guid modifiedBy, bool retired, DateTime retiredOn, Guid retiredBy)
        {
                this.headerId = headerId;
                this.txType = txType;
                this.txNumber = txNumber;
                this.txDate = txDate;
                this.staffId = staffId;
                this.fromLocation = fromLocation;
                this.toLocation = toLocation;
                this.transferredOn = transferredOn;
                this.completedOn = completedOn;
                this.reference = reference;
                this.deliveryNoteRef = deliveryNoteRef;
                this.remarks = remarks;
                this.postedOn = postedOn;
                this.postedBy = postedBy;
                this.readOnly = readOnly;
                this.pOSTNEG = pOSTNEG;
                this.cONFIRM_TRF = cONFIRM_TRF;
                this.cONFIRM_TRF_LASTUPDATE = cONFIRM_TRF_LASTUPDATE;
                this.cONFIRM_TRF_LASTUSER = cONFIRM_TRF_LASTUSER;
                this.tRF_REASON = tRF_REASON;
                this.tRF_TYPE = tRF_TYPE;
                this.pickingNoteRef = pickingNoteRef;
                this.picked = picked;
                this.status = status;
                this.createdOn = createdOn;
                this.createdBy = createdBy;
                this.modifiedOn = modifiedOn;
                this.modifiedBy = modifiedBy;
                this.retired = retired;
                this.retiredOn = retiredOn;
                this.retiredBy = retiredBy;
        }	
		
        /// <summary>
        /// Loads a InvtBatchTXF_Header object from the database using the given HeaderId
        /// </summary>
        /// <param name="headerId">The primary key value</param>
        /// <returns>A InvtBatchTXF_Header object</returns>
        public static InvtBatchTXF_Header Load(Guid headerId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@HeaderId", headerId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spInvtBatchTXF_Header_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    InvtBatchTXF_Header result = new InvtBatchTXF_Header();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a InvtBatchTXF_Header object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A InvtBatchTXF_Header object</returns>
        public static InvtBatchTXF_Header LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spInvtBatchTXF_Header_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    InvtBatchTXF_Header result = new InvtBatchTXF_Header();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of InvtBatchTXF_Header objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the InvtBatchTXF_Header objects in the database.</returns>
        public static InvtBatchTXF_HeaderCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spInvtBatchTXF_Header_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtBatchTXF_Header objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the InvtBatchTXF_Header objects in the database ordered by the columns specified.</returns>
        public static InvtBatchTXF_HeaderCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spInvtBatchTXF_Header_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtBatchTXF_Header objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the InvtBatchTXF_Header objects in the database.</returns>
        public static InvtBatchTXF_HeaderCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spInvtBatchTXF_Header_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtBatchTXF_Header objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the InvtBatchTXF_Header objects in the database ordered by the columns specified.</returns>
        public static InvtBatchTXF_HeaderCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spInvtBatchTXF_Header_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtBatchTXF_Header objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the InvtBatchTXF_Header objects in the database.</returns>
        public static InvtBatchTXF_HeaderCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            InvtBatchTXF_HeaderCollection result = new InvtBatchTXF_HeaderCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    InvtBatchTXF_Header tmp = new InvtBatchTXF_Header();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a InvtBatchTXF_Header object from the database.
        /// </summary>
        /// <param name="headerId">The primary key value</param>
        public static void Delete(Guid headerId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@HeaderId", headerId) };
            SqlHelper.Default.ExecuteNonQuery("spInvtBatchTXF_Header_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) headerId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) txType = reader.GetString(1);
                if (!reader.IsDBNull(2)) txNumber = reader.GetString(2);
                if (!reader.IsDBNull(3)) txDate = reader.GetDateTime(3);
                if (!reader.IsDBNull(4)) staffId = reader.GetGuid(4);
                if (!reader.IsDBNull(5)) fromLocation = reader.GetGuid(5);
                if (!reader.IsDBNull(6)) toLocation = reader.GetGuid(6);
                if (!reader.IsDBNull(7)) transferredOn = reader.GetDateTime(7);
                if (!reader.IsDBNull(8)) completedOn = reader.GetDateTime(8);
                if (!reader.IsDBNull(9)) reference = reader.GetString(9);
                if (!reader.IsDBNull(10)) deliveryNoteRef = reader.GetString(10);
                if (!reader.IsDBNull(11)) remarks = reader.GetString(11);
                if (!reader.IsDBNull(12)) postedOn = reader.GetDateTime(12);
                if (!reader.IsDBNull(13)) postedBy = reader.GetGuid(13);
                if (!reader.IsDBNull(14)) readOnly = reader.GetBoolean(14);
                if (!reader.IsDBNull(15)) pOSTNEG = reader.GetBoolean(15);
                if (!reader.IsDBNull(16)) cONFIRM_TRF = reader.GetString(16);
                if (!reader.IsDBNull(17)) cONFIRM_TRF_LASTUPDATE = reader.GetDateTime(17);
                if (!reader.IsDBNull(18)) cONFIRM_TRF_LASTUSER = reader.GetGuid(18);
                if (!reader.IsDBNull(19)) tRF_REASON = reader.GetString(19);
                if (!reader.IsDBNull(20)) tRF_TYPE = reader.GetString(20);
                if (!reader.IsDBNull(21)) pickingNoteRef = reader.GetString(21);
                if (!reader.IsDBNull(22)) picked = reader.GetBoolean(22);
                if (!reader.IsDBNull(23)) status = reader.GetInt32(23);
                if (!reader.IsDBNull(24)) createdOn = reader.GetDateTime(24);
                if (!reader.IsDBNull(25)) createdBy = reader.GetGuid(25);
                if (!reader.IsDBNull(26)) modifiedOn = reader.GetDateTime(26);
                if (!reader.IsDBNull(27)) modifiedBy = reader.GetGuid(27);
                if (!reader.IsDBNull(28)) retired = reader.GetBoolean(28);
                if (!reader.IsDBNull(29)) retiredOn = reader.GetDateTime(29);
                if (!reader.IsDBNull(30)) retiredBy = reader.GetGuid(30);
            }
        }
		
        public void Delete()
        {
            Delete(this.HeaderId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != HeaderId)
                    this.Delete();
                Update();
            }
        }

        public Guid HeaderId
        {
            get { return headerId; }
            set { headerId = value; }
        }

        public string TxType
        {
            get { return txType; }
            set { txType = value; }
        }

        public string TxNumber
        {
            get { return txNumber; }
            set { txNumber = value; }
        }

        public DateTime TxDate
        {
            get { return txDate; }
            set { txDate = value; }
        }

        public Guid StaffId
        {
            get { return staffId; }
            set { staffId = value; }
        }

        public Guid FromLocation
        {
            get { return fromLocation; }
            set { fromLocation = value; }
        }

        public Guid ToLocation
        {
            get { return toLocation; }
            set { toLocation = value; }
        }

        public DateTime TransferredOn
        {
            get { return transferredOn; }
            set { transferredOn = value; }
        }

        public DateTime CompletedOn
        {
            get { return completedOn; }
            set { completedOn = value; }
        }

        public string Reference
        {
            get { return reference; }
            set { reference = value; }
        }

        public string DeliveryNoteRef
        {
            get { return deliveryNoteRef; }
            set { deliveryNoteRef = value; }
        }

        public string Remarks
        {
            get { return remarks; }
            set { remarks = value; }
        }

        public DateTime PostedOn
        {
            get { return postedOn; }
            set { postedOn = value; }
        }

        public Guid PostedBy
        {
            get { return postedBy; }
            set { postedBy = value; }
        }

        public bool ReadOnly
        {
            get { return readOnly; }
            set { readOnly = value; }
        }

        public bool POSTNEG
        {
            get { return pOSTNEG; }
            set { pOSTNEG = value; }
        }

        public string CONFIRM_TRF
        {
            get { return cONFIRM_TRF; }
            set { cONFIRM_TRF = value; }
        }

        public DateTime CONFIRM_TRF_LASTUPDATE
        {
            get { return cONFIRM_TRF_LASTUPDATE; }
            set { cONFIRM_TRF_LASTUPDATE = value; }
        }

        public Guid CONFIRM_TRF_LASTUSER
        {
            get { return cONFIRM_TRF_LASTUSER; }
            set { cONFIRM_TRF_LASTUSER = value; }
        }

        public string TRF_REASON
        {
            get { return tRF_REASON; }
            set { tRF_REASON = value; }
        }

        public string TRF_TYPE
        {
            get { return tRF_TYPE; }
            set { tRF_TYPE = value; }
        }

        public string PickingNoteRef
        {
            get { return pickingNoteRef; }
            set { pickingNoteRef = value; }
        }

        public bool Picked
        {
            get { return picked; }
            set { picked = value; }
        }

        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public Guid CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime ModifiedOn
        {
            get { return modifiedOn; }
            set { modifiedOn = value; }
        }

        public Guid ModifiedBy
        {
            get { return modifiedBy; }
            set { modifiedBy = value; }
        }

        public bool Retired
        {
            get { return retired; }
            set { retired = value; }
        }

        public DateTime RetiredOn
        {
            get { return retiredOn; }
            set { retiredOn = value; }
        }

        public Guid RetiredBy
        {
            get { return retiredBy; }
            set { retiredBy = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spInvtBatchTXF_Header_InsRec", "@HeaderId", out returnedValue, parameterValues);
            
            headerId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spInvtBatchTXF_Header_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[31];
            prams[0] = GetSqlParameter("@HeaderId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.HeaderId);
            prams[1] = GetSqlParameter("@TxType", ParameterDirection.Input, SqlDbType.VarChar, 4, this.TxType);
            prams[2] = GetSqlParameter("@TxNumber", ParameterDirection.Input, SqlDbType.VarChar, 12, this.TxNumber);
            prams[3] = GetSqlParameter("@TxDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.TxDate);
            prams[4] = GetSqlParameter("@StaffId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.StaffId);
            prams[5] = GetSqlParameter("@FromLocation", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.FromLocation);
            prams[6] = GetSqlParameter("@ToLocation", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ToLocation);
            prams[7] = GetSqlParameter("@TransferredOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.TransferredOn);
            prams[8] = GetSqlParameter("@CompletedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CompletedOn);
            prams[9] = GetSqlParameter("@Reference", ParameterDirection.Input, SqlDbType.NVarChar, 32, this.Reference);
            prams[10] = GetSqlParameter("@DeliveryNoteRef", ParameterDirection.Input, SqlDbType.VarChar, 12, this.DeliveryNoteRef);
            prams[11] = GetSqlParameter("@Remarks", ParameterDirection.Input, SqlDbType.NVarChar, 512, this.Remarks);
            prams[12] = GetSqlParameter("@PostedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.PostedOn);
            prams[13] = GetSqlParameter("@PostedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.PostedBy);
            prams[14] = GetSqlParameter("@ReadOnly", ParameterDirection.Input, SqlDbType.Bit, 1, this.ReadOnly);
            prams[15] = GetSqlParameter("@POSTNEG", ParameterDirection.Input, SqlDbType.Bit, 1, this.POSTNEG);
            prams[16] = GetSqlParameter("@CONFIRM_TRF", ParameterDirection.Input, SqlDbType.VarChar, 1, this.CONFIRM_TRF);
            prams[17] = GetSqlParameter("@CONFIRM_TRF_LASTUPDATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CONFIRM_TRF_LASTUPDATE);
            prams[18] = GetSqlParameter("@CONFIRM_TRF_LASTUSER", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CONFIRM_TRF_LASTUSER);
            prams[19] = GetSqlParameter("@TRF_REASON", ParameterDirection.Input, SqlDbType.VarChar, 2, this.TRF_REASON);
            prams[20] = GetSqlParameter("@TRF_TYPE", ParameterDirection.Input, SqlDbType.VarChar, 2, this.TRF_TYPE);
            prams[21] = GetSqlParameter("@PickingNoteRef", ParameterDirection.Input, SqlDbType.VarChar, 12, this.PickingNoteRef);
            prams[22] = GetSqlParameter("@Picked", ParameterDirection.Input, SqlDbType.Bit, 1, this.Picked);
            prams[23] = GetSqlParameter("@Status", ParameterDirection.Input, SqlDbType.Int, 4, this.Status);
            prams[24] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[25] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CreatedBy);
            prams[26] = GetSqlParameter("@ModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ModifiedOn);
            prams[27] = GetSqlParameter("@ModifiedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ModifiedBy);
            prams[28] = GetSqlParameter("@Retired", ParameterDirection.Input, SqlDbType.Bit, 1, this.Retired);
            prams[29] = GetSqlParameter("@RetiredOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RetiredOn);
            prams[30] = GetSqlParameter("@RetiredBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.RetiredBy);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@HeaderId", SqlDbType.UniqueIdentifier, 16, this.HeaderId),
                GetSqlParameterWithoutDirection("@TxType", SqlDbType.VarChar, 4, this.TxType),
                GetSqlParameterWithoutDirection("@TxNumber", SqlDbType.VarChar, 12, this.TxNumber),
                GetSqlParameterWithoutDirection("@TxDate", SqlDbType.DateTime, 8, this.TxDate),
                GetSqlParameterWithoutDirection("@StaffId", SqlDbType.UniqueIdentifier, 16, this.StaffId),
                GetSqlParameterWithoutDirection("@FromLocation", SqlDbType.UniqueIdentifier, 16, this.FromLocation),
                GetSqlParameterWithoutDirection("@ToLocation", SqlDbType.UniqueIdentifier, 16, this.ToLocation),
                GetSqlParameterWithoutDirection("@TransferredOn", SqlDbType.DateTime, 8, this.TransferredOn),
                GetSqlParameterWithoutDirection("@CompletedOn", SqlDbType.DateTime, 8, this.CompletedOn),
                GetSqlParameterWithoutDirection("@Reference", SqlDbType.NVarChar, 32, this.Reference),
                GetSqlParameterWithoutDirection("@DeliveryNoteRef", SqlDbType.VarChar, 12, this.DeliveryNoteRef),
                GetSqlParameterWithoutDirection("@Remarks", SqlDbType.NVarChar, 512, this.Remarks),
                GetSqlParameterWithoutDirection("@PostedOn", SqlDbType.DateTime, 8, this.PostedOn),
                GetSqlParameterWithoutDirection("@PostedBy", SqlDbType.UniqueIdentifier, 16, this.PostedBy),
                GetSqlParameterWithoutDirection("@ReadOnly", SqlDbType.Bit, 1, this.ReadOnly),
                GetSqlParameterWithoutDirection("@POSTNEG", SqlDbType.Bit, 1, this.POSTNEG),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF", SqlDbType.VarChar, 1, this.CONFIRM_TRF),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF_LASTUPDATE", SqlDbType.DateTime, 8, this.CONFIRM_TRF_LASTUPDATE),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF_LASTUSER", SqlDbType.UniqueIdentifier, 16, this.CONFIRM_TRF_LASTUSER),
                GetSqlParameterWithoutDirection("@TRF_REASON", SqlDbType.VarChar, 2, this.TRF_REASON),
                GetSqlParameterWithoutDirection("@TRF_TYPE", SqlDbType.VarChar, 2, this.TRF_TYPE),
                GetSqlParameterWithoutDirection("@PickingNoteRef", SqlDbType.VarChar, 12, this.PickingNoteRef),
                GetSqlParameterWithoutDirection("@Picked", SqlDbType.Bit, 1, this.Picked),
                GetSqlParameterWithoutDirection("@Status", SqlDbType.Int, 4, this.Status),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.UniqueIdentifier, 16, this.CreatedBy),
                GetSqlParameterWithoutDirection("@ModifiedOn", SqlDbType.DateTime, 8, this.ModifiedOn),
                GetSqlParameterWithoutDirection("@ModifiedBy", SqlDbType.UniqueIdentifier, 16, this.ModifiedBy),
                GetSqlParameterWithoutDirection("@Retired", SqlDbType.Bit, 1, this.Retired),
                GetSqlParameterWithoutDirection("@RetiredOn", SqlDbType.DateTime, 8, this.RetiredOn),
                GetSqlParameterWithoutDirection("@RetiredBy", SqlDbType.UniqueIdentifier, 16, this.RetiredBy)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("headerId: " + headerId.ToString()).Append("\r\n");
            builder.Append("txType: " + txType.ToString()).Append("\r\n");
            builder.Append("txNumber: " + txNumber.ToString()).Append("\r\n");
            builder.Append("txDate: " + txDate.ToString()).Append("\r\n");
            builder.Append("staffId: " + staffId.ToString()).Append("\r\n");
            builder.Append("fromLocation: " + fromLocation.ToString()).Append("\r\n");
            builder.Append("toLocation: " + toLocation.ToString()).Append("\r\n");
            builder.Append("transferredOn: " + transferredOn.ToString()).Append("\r\n");
            builder.Append("completedOn: " + completedOn.ToString()).Append("\r\n");
            builder.Append("reference: " + reference.ToString()).Append("\r\n");
            builder.Append("deliveryNoteRef: " + deliveryNoteRef.ToString()).Append("\r\n");
            builder.Append("remarks: " + remarks.ToString()).Append("\r\n");
            builder.Append("postedOn: " + postedOn.ToString()).Append("\r\n");
            builder.Append("postedBy: " + postedBy.ToString()).Append("\r\n");
            builder.Append("readOnly: " + readOnly.ToString()).Append("\r\n");
            builder.Append("pOSTNEG: " + pOSTNEG.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF: " + cONFIRM_TRF.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF_LASTUPDATE: " + cONFIRM_TRF_LASTUPDATE.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF_LASTUSER: " + cONFIRM_TRF_LASTUSER.ToString()).Append("\r\n");
            builder.Append("tRF_REASON: " + tRF_REASON.ToString()).Append("\r\n");
            builder.Append("tRF_TYPE: " + tRF_TYPE.ToString()).Append("\r\n");
            builder.Append("pickingNoteRef: " + pickingNoteRef.ToString()).Append("\r\n");
            builder.Append("picked: " + picked.ToString()).Append("\r\n");
            builder.Append("status: " + status.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("modifiedOn: " + modifiedOn.ToString()).Append("\r\n");
            builder.Append("modifiedBy: " + modifiedBy.ToString()).Append("\r\n");
            builder.Append("retired: " + retired.ToString()).Append("\r\n");
            builder.Append("retiredOn: " + retiredOn.ToString()).Append("\r\n");
            builder.Append("retiredBy: " + retiredBy.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			InvtBatchTXF_HeaderCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			// Filter the retired records
			if (WhereClause.Length > 0)
			{
				WhereClause += " AND Retired = 0";
			}
			else
			{
				WhereClause = "Retired = 0";
			}
			
			if (WhereClause.Length > 0)
			{
				source = InvtBatchTXF_Header.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = InvtBatchTXF_Header.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (InvtBatchTXF_Header item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.StaffId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.HeaderId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(InvtBatchTXF_Header target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.StaffId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				InvtBatchTXF_Header parentTemplate = InvtBatchTXF_Header.Load(target.StaffId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(InvtBatchTXF_Header target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="InvtBatchTXF_Header">InvtBatchTXF_Header</see> objects.
    /// </summary>
    public class InvtBatchTXF_HeaderCollection : BindingList< InvtBatchTXF_Header>
    {
	}
}
