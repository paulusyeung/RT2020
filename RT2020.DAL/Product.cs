using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.Product.
    /// Date Created:   2020-08-09 02:14:13
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class Product
    {
        private Guid key = Guid.Empty;
        private Guid productId = Guid.Empty;
        private string sTKCODE = String.Empty;
        private string aPPENDIX1 = String.Empty;
        private string aPPENDIX2 = String.Empty;
        private string aPPENDIX3 = String.Empty;
        private string cLASS1 = String.Empty;
        private string cLASS2 = String.Empty;
        private string cLASS3 = String.Empty;
        private string cLASS4 = String.Empty;
        private string cLASS5 = String.Empty;
        private string cLASS6 = String.Empty;
        private string productName = String.Empty;
        private string productName_Chs = String.Empty;
        private string productName_Cht = String.Empty;
        private Guid natureId = Guid.Empty;
        private string uOM = String.Empty;
        private string alternateItem = String.Empty;
        private string remarks = String.Empty;
        private decimal markup;
        private decimal retailPrice;
        private decimal originalRetailPrice;
        private decimal wholesalePrice;
        private decimal normalDiscount;
        private string primaryBarcode = String.Empty;
        private decimal reorderLevel;
        private decimal reorderQty;
        private bool serialItem;
        private bool downloadToPOS;
        private bool downloadToCounter;
        private int status = 0;
        private decimal maxOnLoanQty;
        private bool fixedPriceItem;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private Guid createdBy = Guid.Empty;
        private DateTime modifiedOn = DateTime.Parse("1900-1-1");
        private Guid modifiedBy = Guid.Empty;
        private bool retired;
        private DateTime retiredOn = DateTime.Parse("1900-1-1");
        private Guid retiredBy = Guid.Empty;

        /// <summary>
        /// Initialize an new empty Product object.
        /// </summary>
        public Product()
        {
        }
		
        /// <summary>
        /// Initialize a new Product object with the given parameters.
        /// </summary>
        public Product(Guid productId, string sTKCODE, string aPPENDIX1, string aPPENDIX2, string aPPENDIX3, string cLASS1, string cLASS2, string cLASS3, string cLASS4, string cLASS5, string cLASS6, string productName, string productName_Chs, string productName_Cht, Guid natureId, string uOM, string alternateItem, string remarks, decimal markup, decimal retailPrice, decimal originalRetailPrice, decimal wholesalePrice, decimal normalDiscount, string primaryBarcode, decimal reorderLevel, decimal reorderQty, bool serialItem, bool downloadToPOS, bool downloadToCounter, int status, decimal maxOnLoanQty, bool fixedPriceItem, DateTime createdOn, Guid createdBy, DateTime modifiedOn, Guid modifiedBy, bool retired, DateTime retiredOn, Guid retiredBy)
        {
                this.productId = productId;
                this.sTKCODE = sTKCODE;
                this.aPPENDIX1 = aPPENDIX1;
                this.aPPENDIX2 = aPPENDIX2;
                this.aPPENDIX3 = aPPENDIX3;
                this.cLASS1 = cLASS1;
                this.cLASS2 = cLASS2;
                this.cLASS3 = cLASS3;
                this.cLASS4 = cLASS4;
                this.cLASS5 = cLASS5;
                this.cLASS6 = cLASS6;
                this.productName = productName;
                this.productName_Chs = productName_Chs;
                this.productName_Cht = productName_Cht;
                this.natureId = natureId;
                this.uOM = uOM;
                this.alternateItem = alternateItem;
                this.remarks = remarks;
                this.markup = markup;
                this.retailPrice = retailPrice;
                this.originalRetailPrice = originalRetailPrice;
                this.wholesalePrice = wholesalePrice;
                this.normalDiscount = normalDiscount;
                this.primaryBarcode = primaryBarcode;
                this.reorderLevel = reorderLevel;
                this.reorderQty = reorderQty;
                this.serialItem = serialItem;
                this.downloadToPOS = downloadToPOS;
                this.downloadToCounter = downloadToCounter;
                this.status = status;
                this.maxOnLoanQty = maxOnLoanQty;
                this.fixedPriceItem = fixedPriceItem;
                this.createdOn = createdOn;
                this.createdBy = createdBy;
                this.modifiedOn = modifiedOn;
                this.modifiedBy = modifiedBy;
                this.retired = retired;
                this.retiredOn = retiredOn;
                this.retiredBy = retiredBy;
        }	
		
        /// <summary>
        /// Loads a Product object from the database using the given ProductId
        /// </summary>
        /// <param name="productId">The primary key value</param>
        /// <returns>A Product object</returns>
        public static Product Load(Guid productId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ProductId", productId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spProduct_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    Product result = new Product();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a Product object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A Product object</returns>
        public static Product LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spProduct_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    Product result = new Product();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of Product objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Product objects in the database.</returns>
        public static ProductCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spProduct_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Product objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the Product objects in the database ordered by the columns specified.</returns>
        public static ProductCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spProduct_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Product objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Product objects in the database.</returns>
        public static ProductCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spProduct_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Product objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the Product objects in the database ordered by the columns specified.</returns>
        public static ProductCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spProduct_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Product objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Product objects in the database.</returns>
        public static ProductCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            ProductCollection result = new ProductCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    Product tmp = new Product();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a Product object from the database.
        /// </summary>
        /// <param name="productId">The primary key value</param>
        public static void Delete(Guid productId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ProductId", productId) };
            SqlHelper.Default.ExecuteNonQuery("spProduct_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) productId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) sTKCODE = reader.GetString(1);
                if (!reader.IsDBNull(2)) aPPENDIX1 = reader.GetString(2);
                if (!reader.IsDBNull(3)) aPPENDIX2 = reader.GetString(3);
                if (!reader.IsDBNull(4)) aPPENDIX3 = reader.GetString(4);
                if (!reader.IsDBNull(5)) cLASS1 = reader.GetString(5);
                if (!reader.IsDBNull(6)) cLASS2 = reader.GetString(6);
                if (!reader.IsDBNull(7)) cLASS3 = reader.GetString(7);
                if (!reader.IsDBNull(8)) cLASS4 = reader.GetString(8);
                if (!reader.IsDBNull(9)) cLASS5 = reader.GetString(9);
                if (!reader.IsDBNull(10)) cLASS6 = reader.GetString(10);
                if (!reader.IsDBNull(11)) productName = reader.GetString(11);
                if (!reader.IsDBNull(12)) productName_Chs = reader.GetString(12);
                if (!reader.IsDBNull(13)) productName_Cht = reader.GetString(13);
                if (!reader.IsDBNull(14)) natureId = reader.GetGuid(14);
                if (!reader.IsDBNull(15)) uOM = reader.GetString(15);
                if (!reader.IsDBNull(16)) alternateItem = reader.GetString(16);
                if (!reader.IsDBNull(17)) remarks = reader.GetString(17);
                if (!reader.IsDBNull(18)) markup = reader.GetDecimal(18);
                if (!reader.IsDBNull(19)) retailPrice = reader.GetDecimal(19);
                if (!reader.IsDBNull(20)) originalRetailPrice = reader.GetDecimal(20);
                if (!reader.IsDBNull(21)) wholesalePrice = reader.GetDecimal(21);
                if (!reader.IsDBNull(22)) normalDiscount = reader.GetDecimal(22);
                if (!reader.IsDBNull(23)) primaryBarcode = reader.GetString(23);
                if (!reader.IsDBNull(24)) reorderLevel = reader.GetDecimal(24);
                if (!reader.IsDBNull(25)) reorderQty = reader.GetDecimal(25);
                if (!reader.IsDBNull(26)) serialItem = reader.GetBoolean(26);
                if (!reader.IsDBNull(27)) downloadToPOS = reader.GetBoolean(27);
                if (!reader.IsDBNull(28)) downloadToCounter = reader.GetBoolean(28);
                if (!reader.IsDBNull(29)) status = reader.GetInt32(29);
                if (!reader.IsDBNull(30)) maxOnLoanQty = reader.GetDecimal(30);
                if (!reader.IsDBNull(31)) fixedPriceItem = reader.GetBoolean(31);
                if (!reader.IsDBNull(32)) createdOn = reader.GetDateTime(32);
                if (!reader.IsDBNull(33)) createdBy = reader.GetGuid(33);
                if (!reader.IsDBNull(34)) modifiedOn = reader.GetDateTime(34);
                if (!reader.IsDBNull(35)) modifiedBy = reader.GetGuid(35);
                if (!reader.IsDBNull(36)) retired = reader.GetBoolean(36);
                if (!reader.IsDBNull(37)) retiredOn = reader.GetDateTime(37);
                if (!reader.IsDBNull(38)) retiredBy = reader.GetGuid(38);
            }
        }
		
        public void Delete()
        {
            Delete(this.ProductId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != ProductId)
                    this.Delete();
                Update();
            }
        }

        public Guid ProductId
        {
            get { return productId; }
            set { productId = value; }
        }

        public string STKCODE
        {
            get { return sTKCODE; }
            set { sTKCODE = value; }
        }

        public string APPENDIX1
        {
            get { return aPPENDIX1; }
            set { aPPENDIX1 = value; }
        }

        public string APPENDIX2
        {
            get { return aPPENDIX2; }
            set { aPPENDIX2 = value; }
        }

        public string APPENDIX3
        {
            get { return aPPENDIX3; }
            set { aPPENDIX3 = value; }
        }

        public string CLASS1
        {
            get { return cLASS1; }
            set { cLASS1 = value; }
        }

        public string CLASS2
        {
            get { return cLASS2; }
            set { cLASS2 = value; }
        }

        public string CLASS3
        {
            get { return cLASS3; }
            set { cLASS3 = value; }
        }

        public string CLASS4
        {
            get { return cLASS4; }
            set { cLASS4 = value; }
        }

        public string CLASS5
        {
            get { return cLASS5; }
            set { cLASS5 = value; }
        }

        public string CLASS6
        {
            get { return cLASS6; }
            set { cLASS6 = value; }
        }

        public string ProductName
        {
            get { return productName; }
            set { productName = value; }
        }

        public string ProductName_Chs
        {
            get { return productName_Chs; }
            set { productName_Chs = value; }
        }

        public string ProductName_Cht
        {
            get { return productName_Cht; }
            set { productName_Cht = value; }
        }

        public Guid NatureId
        {
            get { return natureId; }
            set { natureId = value; }
        }

        public string UOM
        {
            get { return uOM; }
            set { uOM = value; }
        }

        public string AlternateItem
        {
            get { return alternateItem; }
            set { alternateItem = value; }
        }

        public string Remarks
        {
            get { return remarks; }
            set { remarks = value; }
        }

        public decimal Markup
        {
            get { return markup; }
            set { markup = value; }
        }

        public decimal RetailPrice
        {
            get { return retailPrice; }
            set { retailPrice = value; }
        }

        public decimal OriginalRetailPrice
        {
            get { return originalRetailPrice; }
            set { originalRetailPrice = value; }
        }

        public decimal WholesalePrice
        {
            get { return wholesalePrice; }
            set { wholesalePrice = value; }
        }

        public decimal NormalDiscount
        {
            get { return normalDiscount; }
            set { normalDiscount = value; }
        }

        public string PrimaryBarcode
        {
            get { return primaryBarcode; }
            set { primaryBarcode = value; }
        }

        public decimal ReorderLevel
        {
            get { return reorderLevel; }
            set { reorderLevel = value; }
        }

        public decimal ReorderQty
        {
            get { return reorderQty; }
            set { reorderQty = value; }
        }

        public bool SerialItem
        {
            get { return serialItem; }
            set { serialItem = value; }
        }

        public bool DownloadToPOS
        {
            get { return downloadToPOS; }
            set { downloadToPOS = value; }
        }

        public bool DownloadToCounter
        {
            get { return downloadToCounter; }
            set { downloadToCounter = value; }
        }

        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public decimal MaxOnLoanQty
        {
            get { return maxOnLoanQty; }
            set { maxOnLoanQty = value; }
        }

        public bool FixedPriceItem
        {
            get { return fixedPriceItem; }
            set { fixedPriceItem = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public Guid CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime ModifiedOn
        {
            get { return modifiedOn; }
            set { modifiedOn = value; }
        }

        public Guid ModifiedBy
        {
            get { return modifiedBy; }
            set { modifiedBy = value; }
        }

        public bool Retired
        {
            get { return retired; }
            set { retired = value; }
        }

        public DateTime RetiredOn
        {
            get { return retiredOn; }
            set { retiredOn = value; }
        }

        public Guid RetiredBy
        {
            get { return retiredBy; }
            set { retiredBy = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spProduct_InsRec", "@ProductId", out returnedValue, parameterValues);
            
            productId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spProduct_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[39];
            prams[0] = GetSqlParameter("@ProductId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.ProductId);
            prams[1] = GetSqlParameter("@STKCODE", ParameterDirection.Input, SqlDbType.VarChar, 10, this.STKCODE);
            prams[2] = GetSqlParameter("@APPENDIX1", ParameterDirection.Input, SqlDbType.VarChar, 4, this.APPENDIX1);
            prams[3] = GetSqlParameter("@APPENDIX2", ParameterDirection.Input, SqlDbType.VarChar, 4, this.APPENDIX2);
            prams[4] = GetSqlParameter("@APPENDIX3", ParameterDirection.Input, SqlDbType.VarChar, 4, this.APPENDIX3);
            prams[5] = GetSqlParameter("@CLASS1", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CLASS1);
            prams[6] = GetSqlParameter("@CLASS2", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CLASS2);
            prams[7] = GetSqlParameter("@CLASS3", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CLASS3);
            prams[8] = GetSqlParameter("@CLASS4", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CLASS4);
            prams[9] = GetSqlParameter("@CLASS5", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CLASS5);
            prams[10] = GetSqlParameter("@CLASS6", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CLASS6);
            prams[11] = GetSqlParameter("@ProductName", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.ProductName);
            prams[12] = GetSqlParameter("@ProductName_Chs", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.ProductName_Chs);
            prams[13] = GetSqlParameter("@ProductName_Cht", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.ProductName_Cht);
            prams[14] = GetSqlParameter("@NatureId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.NatureId);
            prams[15] = GetSqlParameter("@UOM", ParameterDirection.Input, SqlDbType.VarChar, 4, this.UOM);
            prams[16] = GetSqlParameter("@AlternateItem", ParameterDirection.Input, SqlDbType.NVarChar, 36, this.AlternateItem);
            prams[17] = GetSqlParameter("@Remarks", ParameterDirection.Input, SqlDbType.NVarChar, 512, this.Remarks);
            prams[18] = GetSqlParameter("@Markup", ParameterDirection.Input, SqlDbType.Decimal, 5, this.Markup);
            prams[19] = GetSqlParameter("@RetailPrice", ParameterDirection.Input, SqlDbType.Money, 8, this.RetailPrice);
            prams[20] = GetSqlParameter("@OriginalRetailPrice", ParameterDirection.Input, SqlDbType.Money, 8, this.OriginalRetailPrice);
            prams[21] = GetSqlParameter("@WholesalePrice", ParameterDirection.Input, SqlDbType.Money, 8, this.WholesalePrice);
            prams[22] = GetSqlParameter("@NormalDiscount", ParameterDirection.Input, SqlDbType.Decimal, 5, this.NormalDiscount);
            prams[23] = GetSqlParameter("@PrimaryBarcode", ParameterDirection.Input, SqlDbType.VarChar, 13, this.PrimaryBarcode);
            prams[24] = GetSqlParameter("@ReorderLevel", ParameterDirection.Input, SqlDbType.Decimal, 9, this.ReorderLevel);
            prams[25] = GetSqlParameter("@ReorderQty", ParameterDirection.Input, SqlDbType.Decimal, 9, this.ReorderQty);
            prams[26] = GetSqlParameter("@SerialItem", ParameterDirection.Input, SqlDbType.Bit, 1, this.SerialItem);
            prams[27] = GetSqlParameter("@DownloadToPOS", ParameterDirection.Input, SqlDbType.Bit, 1, this.DownloadToPOS);
            prams[28] = GetSqlParameter("@DownloadToCounter", ParameterDirection.Input, SqlDbType.Bit, 1, this.DownloadToCounter);
            prams[29] = GetSqlParameter("@Status", ParameterDirection.Input, SqlDbType.Int, 4, this.Status);
            prams[30] = GetSqlParameter("@MaxOnLoanQty", ParameterDirection.Input, SqlDbType.Decimal, 9, this.MaxOnLoanQty);
            prams[31] = GetSqlParameter("@FixedPriceItem", ParameterDirection.Input, SqlDbType.Bit, 1, this.FixedPriceItem);
            prams[32] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[33] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CreatedBy);
            prams[34] = GetSqlParameter("@ModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ModifiedOn);
            prams[35] = GetSqlParameter("@ModifiedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ModifiedBy);
            prams[36] = GetSqlParameter("@Retired", ParameterDirection.Input, SqlDbType.Bit, 1, this.Retired);
            prams[37] = GetSqlParameter("@RetiredOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RetiredOn);
            prams[38] = GetSqlParameter("@RetiredBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.RetiredBy);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@ProductId", SqlDbType.UniqueIdentifier, 16, this.ProductId),
                GetSqlParameterWithoutDirection("@STKCODE", SqlDbType.VarChar, 10, this.STKCODE),
                GetSqlParameterWithoutDirection("@APPENDIX1", SqlDbType.VarChar, 4, this.APPENDIX1),
                GetSqlParameterWithoutDirection("@APPENDIX2", SqlDbType.VarChar, 4, this.APPENDIX2),
                GetSqlParameterWithoutDirection("@APPENDIX3", SqlDbType.VarChar, 4, this.APPENDIX3),
                GetSqlParameterWithoutDirection("@CLASS1", SqlDbType.VarChar, 6, this.CLASS1),
                GetSqlParameterWithoutDirection("@CLASS2", SqlDbType.VarChar, 6, this.CLASS2),
                GetSqlParameterWithoutDirection("@CLASS3", SqlDbType.VarChar, 6, this.CLASS3),
                GetSqlParameterWithoutDirection("@CLASS4", SqlDbType.VarChar, 6, this.CLASS4),
                GetSqlParameterWithoutDirection("@CLASS5", SqlDbType.VarChar, 6, this.CLASS5),
                GetSqlParameterWithoutDirection("@CLASS6", SqlDbType.VarChar, 6, this.CLASS6),
                GetSqlParameterWithoutDirection("@ProductName", SqlDbType.NVarChar, 64, this.ProductName),
                GetSqlParameterWithoutDirection("@ProductName_Chs", SqlDbType.NVarChar, 64, this.ProductName_Chs),
                GetSqlParameterWithoutDirection("@ProductName_Cht", SqlDbType.NVarChar, 64, this.ProductName_Cht),
                GetSqlParameterWithoutDirection("@NatureId", SqlDbType.UniqueIdentifier, 16, this.NatureId),
                GetSqlParameterWithoutDirection("@UOM", SqlDbType.VarChar, 4, this.UOM),
                GetSqlParameterWithoutDirection("@AlternateItem", SqlDbType.NVarChar, 36, this.AlternateItem),
                GetSqlParameterWithoutDirection("@Remarks", SqlDbType.NVarChar, 512, this.Remarks),
                GetSqlParameterWithoutDirection("@Markup", SqlDbType.Decimal, 5, this.Markup),
                GetSqlParameterWithoutDirection("@RetailPrice", SqlDbType.Money, 8, this.RetailPrice),
                GetSqlParameterWithoutDirection("@OriginalRetailPrice", SqlDbType.Money, 8, this.OriginalRetailPrice),
                GetSqlParameterWithoutDirection("@WholesalePrice", SqlDbType.Money, 8, this.WholesalePrice),
                GetSqlParameterWithoutDirection("@NormalDiscount", SqlDbType.Decimal, 5, this.NormalDiscount),
                GetSqlParameterWithoutDirection("@PrimaryBarcode", SqlDbType.VarChar, 13, this.PrimaryBarcode),
                GetSqlParameterWithoutDirection("@ReorderLevel", SqlDbType.Decimal, 9, this.ReorderLevel),
                GetSqlParameterWithoutDirection("@ReorderQty", SqlDbType.Decimal, 9, this.ReorderQty),
                GetSqlParameterWithoutDirection("@SerialItem", SqlDbType.Bit, 1, this.SerialItem),
                GetSqlParameterWithoutDirection("@DownloadToPOS", SqlDbType.Bit, 1, this.DownloadToPOS),
                GetSqlParameterWithoutDirection("@DownloadToCounter", SqlDbType.Bit, 1, this.DownloadToCounter),
                GetSqlParameterWithoutDirection("@Status", SqlDbType.Int, 4, this.Status),
                GetSqlParameterWithoutDirection("@MaxOnLoanQty", SqlDbType.Decimal, 9, this.MaxOnLoanQty),
                GetSqlParameterWithoutDirection("@FixedPriceItem", SqlDbType.Bit, 1, this.FixedPriceItem),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.UniqueIdentifier, 16, this.CreatedBy),
                GetSqlParameterWithoutDirection("@ModifiedOn", SqlDbType.DateTime, 8, this.ModifiedOn),
                GetSqlParameterWithoutDirection("@ModifiedBy", SqlDbType.UniqueIdentifier, 16, this.ModifiedBy),
                GetSqlParameterWithoutDirection("@Retired", SqlDbType.Bit, 1, this.Retired),
                GetSqlParameterWithoutDirection("@RetiredOn", SqlDbType.DateTime, 8, this.RetiredOn),
                GetSqlParameterWithoutDirection("@RetiredBy", SqlDbType.UniqueIdentifier, 16, this.RetiredBy)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("productId: " + productId.ToString()).Append("\r\n");
            builder.Append("sTKCODE: " + sTKCODE.ToString()).Append("\r\n");
            builder.Append("aPPENDIX1: " + aPPENDIX1.ToString()).Append("\r\n");
            builder.Append("aPPENDIX2: " + aPPENDIX2.ToString()).Append("\r\n");
            builder.Append("aPPENDIX3: " + aPPENDIX3.ToString()).Append("\r\n");
            builder.Append("cLASS1: " + cLASS1.ToString()).Append("\r\n");
            builder.Append("cLASS2: " + cLASS2.ToString()).Append("\r\n");
            builder.Append("cLASS3: " + cLASS3.ToString()).Append("\r\n");
            builder.Append("cLASS4: " + cLASS4.ToString()).Append("\r\n");
            builder.Append("cLASS5: " + cLASS5.ToString()).Append("\r\n");
            builder.Append("cLASS6: " + cLASS6.ToString()).Append("\r\n");
            builder.Append("productName: " + productName.ToString()).Append("\r\n");
            builder.Append("productName_Chs: " + productName_Chs.ToString()).Append("\r\n");
            builder.Append("productName_Cht: " + productName_Cht.ToString()).Append("\r\n");
            builder.Append("natureId: " + natureId.ToString()).Append("\r\n");
            builder.Append("uOM: " + uOM.ToString()).Append("\r\n");
            builder.Append("alternateItem: " + alternateItem.ToString()).Append("\r\n");
            builder.Append("remarks: " + remarks.ToString()).Append("\r\n");
            builder.Append("markup: " + markup.ToString()).Append("\r\n");
            builder.Append("retailPrice: " + retailPrice.ToString()).Append("\r\n");
            builder.Append("originalRetailPrice: " + originalRetailPrice.ToString()).Append("\r\n");
            builder.Append("wholesalePrice: " + wholesalePrice.ToString()).Append("\r\n");
            builder.Append("normalDiscount: " + normalDiscount.ToString()).Append("\r\n");
            builder.Append("primaryBarcode: " + primaryBarcode.ToString()).Append("\r\n");
            builder.Append("reorderLevel: " + reorderLevel.ToString()).Append("\r\n");
            builder.Append("reorderQty: " + reorderQty.ToString()).Append("\r\n");
            builder.Append("serialItem: " + serialItem.ToString()).Append("\r\n");
            builder.Append("downloadToPOS: " + downloadToPOS.ToString()).Append("\r\n");
            builder.Append("downloadToCounter: " + downloadToCounter.ToString()).Append("\r\n");
            builder.Append("status: " + status.ToString()).Append("\r\n");
            builder.Append("maxOnLoanQty: " + maxOnLoanQty.ToString()).Append("\r\n");
            builder.Append("fixedPriceItem: " + fixedPriceItem.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("modifiedOn: " + modifiedOn.ToString()).Append("\r\n");
            builder.Append("modifiedBy: " + modifiedBy.ToString()).Append("\r\n");
            builder.Append("retired: " + retired.ToString()).Append("\r\n");
            builder.Append("retiredOn: " + retiredOn.ToString()).Append("\r\n");
            builder.Append("retiredBy: " + retiredBy.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			ProductCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			// Filter the retired records
			if (WhereClause.Length > 0)
			{
				WhereClause += " AND Retired = 0";
			}
			else
			{
				WhereClause = "Retired = 0";
			}
			
			if (WhereClause.Length > 0)
			{
				source = Product.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = Product.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (Product item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.NatureId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.ProductId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(Product target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.NatureId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				Product parentTemplate = Product.Load(target.NatureId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(Product target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="Product">Product</see> objects.
    /// </summary>
    public class ProductCollection : BindingList< Product>
    {
	}
}
