using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.MemberVipSupplement.
    /// Date Created:   2020-08-09 02:14:12
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class MemberVipSupplement
    {
        private Guid key = Guid.Empty;
        private Guid vipSupplementId = Guid.Empty;
        private Guid memberVipId = Guid.Empty;
        private string customerNumber = String.Empty;
        private string bRANCH = String.Empty;
        private string remarks1 = String.Empty;
        private string remarks2 = String.Empty;
        private string remarks3 = String.Empty;
        private string nature = String.Empty;
        private string memo = String.Empty;
        private string photo = String.Empty;
        private string mostVisitedMalls1 = String.Empty;
        private string mostVisitedMalls2 = String.Empty;
        private string mostVisitedMalls3 = String.Empty;
        private string mostBoughtBrands1 = String.Empty;
        private string mostBoughtBrands2 = String.Empty;
        private string mostBoughtBrands3 = String.Empty;
        private string mostReadMagazine1 = String.Empty;
        private string mostReadMagazine2 = String.Empty;
        private string mostReadMagazine3 = String.Empty;
        private string mostUsedCreditCards1 = String.Empty;
        private string mostUsedCreditCards2 = String.Empty;
        private string mostUsedCreditCards3 = String.Empty;

        /// <summary>
        /// Initialize an new empty MemberVipSupplement object.
        /// </summary>
        public MemberVipSupplement()
        {
        }
		
        /// <summary>
        /// Initialize a new MemberVipSupplement object with the given parameters.
        /// </summary>
        public MemberVipSupplement(Guid vipSupplementId, Guid memberVipId, string customerNumber, string bRANCH, string remarks1, string remarks2, string remarks3, string nature, string memo, string photo, string mostVisitedMalls1, string mostVisitedMalls2, string mostVisitedMalls3, string mostBoughtBrands1, string mostBoughtBrands2, string mostBoughtBrands3, string mostReadMagazine1, string mostReadMagazine2, string mostReadMagazine3, string mostUsedCreditCards1, string mostUsedCreditCards2, string mostUsedCreditCards3)
        {
                this.vipSupplementId = vipSupplementId;
                this.memberVipId = memberVipId;
                this.customerNumber = customerNumber;
                this.bRANCH = bRANCH;
                this.remarks1 = remarks1;
                this.remarks2 = remarks2;
                this.remarks3 = remarks3;
                this.nature = nature;
                this.memo = memo;
                this.photo = photo;
                this.mostVisitedMalls1 = mostVisitedMalls1;
                this.mostVisitedMalls2 = mostVisitedMalls2;
                this.mostVisitedMalls3 = mostVisitedMalls3;
                this.mostBoughtBrands1 = mostBoughtBrands1;
                this.mostBoughtBrands2 = mostBoughtBrands2;
                this.mostBoughtBrands3 = mostBoughtBrands3;
                this.mostReadMagazine1 = mostReadMagazine1;
                this.mostReadMagazine2 = mostReadMagazine2;
                this.mostReadMagazine3 = mostReadMagazine3;
                this.mostUsedCreditCards1 = mostUsedCreditCards1;
                this.mostUsedCreditCards2 = mostUsedCreditCards2;
                this.mostUsedCreditCards3 = mostUsedCreditCards3;
        }	
		
        /// <summary>
        /// Loads a MemberVipSupplement object from the database using the given VipSupplementId
        /// </summary>
        /// <param name="vipSupplementId">The primary key value</param>
        /// <returns>A MemberVipSupplement object</returns>
        public static MemberVipSupplement Load(Guid vipSupplementId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@VipSupplementId", vipSupplementId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spMemberVipSupplement_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    MemberVipSupplement result = new MemberVipSupplement();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a MemberVipSupplement object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A MemberVipSupplement object</returns>
        public static MemberVipSupplement LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spMemberVipSupplement_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    MemberVipSupplement result = new MemberVipSupplement();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of MemberVipSupplement objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the MemberVipSupplement objects in the database.</returns>
        public static MemberVipSupplementCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spMemberVipSupplement_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of MemberVipSupplement objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the MemberVipSupplement objects in the database ordered by the columns specified.</returns>
        public static MemberVipSupplementCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spMemberVipSupplement_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of MemberVipSupplement objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the MemberVipSupplement objects in the database.</returns>
        public static MemberVipSupplementCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spMemberVipSupplement_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of MemberVipSupplement objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the MemberVipSupplement objects in the database ordered by the columns specified.</returns>
        public static MemberVipSupplementCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spMemberVipSupplement_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of MemberVipSupplement objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the MemberVipSupplement objects in the database.</returns>
        public static MemberVipSupplementCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            MemberVipSupplementCollection result = new MemberVipSupplementCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    MemberVipSupplement tmp = new MemberVipSupplement();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a MemberVipSupplement object from the database.
        /// </summary>
        /// <param name="vipSupplementId">The primary key value</param>
        public static void Delete(Guid vipSupplementId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@VipSupplementId", vipSupplementId) };
            SqlHelper.Default.ExecuteNonQuery("spMemberVipSupplement_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) vipSupplementId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) memberVipId = reader.GetGuid(1);
                if (!reader.IsDBNull(2)) customerNumber = reader.GetString(2);
                if (!reader.IsDBNull(3)) bRANCH = reader.GetString(3);
                if (!reader.IsDBNull(4)) remarks1 = reader.GetString(4);
                if (!reader.IsDBNull(5)) remarks2 = reader.GetString(5);
                if (!reader.IsDBNull(6)) remarks3 = reader.GetString(6);
                if (!reader.IsDBNull(7)) nature = reader.GetString(7);
                if (!reader.IsDBNull(8)) memo = reader.GetString(8);
                if (!reader.IsDBNull(9)) photo = reader.GetString(9);
                if (!reader.IsDBNull(10)) mostVisitedMalls1 = reader.GetString(10);
                if (!reader.IsDBNull(11)) mostVisitedMalls2 = reader.GetString(11);
                if (!reader.IsDBNull(12)) mostVisitedMalls3 = reader.GetString(12);
                if (!reader.IsDBNull(13)) mostBoughtBrands1 = reader.GetString(13);
                if (!reader.IsDBNull(14)) mostBoughtBrands2 = reader.GetString(14);
                if (!reader.IsDBNull(15)) mostBoughtBrands3 = reader.GetString(15);
                if (!reader.IsDBNull(16)) mostReadMagazine1 = reader.GetString(16);
                if (!reader.IsDBNull(17)) mostReadMagazine2 = reader.GetString(17);
                if (!reader.IsDBNull(18)) mostReadMagazine3 = reader.GetString(18);
                if (!reader.IsDBNull(19)) mostUsedCreditCards1 = reader.GetString(19);
                if (!reader.IsDBNull(20)) mostUsedCreditCards2 = reader.GetString(20);
                if (!reader.IsDBNull(21)) mostUsedCreditCards3 = reader.GetString(21);
            }
        }
		
        public void Delete()
        {
            Delete(this.VipSupplementId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != VipSupplementId)
                    this.Delete();
                Update();
            }
        }

        public Guid VipSupplementId
        {
            get { return vipSupplementId; }
            set { vipSupplementId = value; }
        }

        public Guid MemberVipId
        {
            get { return memberVipId; }
            set { memberVipId = value; }
        }

        public string CustomerNumber
        {
            get { return customerNumber; }
            set { customerNumber = value; }
        }

        public string BRANCH
        {
            get { return bRANCH; }
            set { bRANCH = value; }
        }

        public string Remarks1
        {
            get { return remarks1; }
            set { remarks1 = value; }
        }

        public string Remarks2
        {
            get { return remarks2; }
            set { remarks2 = value; }
        }

        public string Remarks3
        {
            get { return remarks3; }
            set { remarks3 = value; }
        }

        public string Nature
        {
            get { return nature; }
            set { nature = value; }
        }

        public string Memo
        {
            get { return memo; }
            set { memo = value; }
        }

        public string Photo
        {
            get { return photo; }
            set { photo = value; }
        }

        public string MostVisitedMalls1
        {
            get { return mostVisitedMalls1; }
            set { mostVisitedMalls1 = value; }
        }

        public string MostVisitedMalls2
        {
            get { return mostVisitedMalls2; }
            set { mostVisitedMalls2 = value; }
        }

        public string MostVisitedMalls3
        {
            get { return mostVisitedMalls3; }
            set { mostVisitedMalls3 = value; }
        }

        public string MostBoughtBrands1
        {
            get { return mostBoughtBrands1; }
            set { mostBoughtBrands1 = value; }
        }

        public string MostBoughtBrands2
        {
            get { return mostBoughtBrands2; }
            set { mostBoughtBrands2 = value; }
        }

        public string MostBoughtBrands3
        {
            get { return mostBoughtBrands3; }
            set { mostBoughtBrands3 = value; }
        }

        public string MostReadMagazine1
        {
            get { return mostReadMagazine1; }
            set { mostReadMagazine1 = value; }
        }

        public string MostReadMagazine2
        {
            get { return mostReadMagazine2; }
            set { mostReadMagazine2 = value; }
        }

        public string MostReadMagazine3
        {
            get { return mostReadMagazine3; }
            set { mostReadMagazine3 = value; }
        }

        public string MostUsedCreditCards1
        {
            get { return mostUsedCreditCards1; }
            set { mostUsedCreditCards1 = value; }
        }

        public string MostUsedCreditCards2
        {
            get { return mostUsedCreditCards2; }
            set { mostUsedCreditCards2 = value; }
        }

        public string MostUsedCreditCards3
        {
            get { return mostUsedCreditCards3; }
            set { mostUsedCreditCards3 = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spMemberVipSupplement_InsRec", "@VipSupplementId", out returnedValue, parameterValues);
            
            vipSupplementId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spMemberVipSupplement_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[22];
            prams[0] = GetSqlParameter("@VipSupplementId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.VipSupplementId);
            prams[1] = GetSqlParameter("@MemberVipId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.MemberVipId);
            prams[2] = GetSqlParameter("@CustomerNumber", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CustomerNumber);
            prams[3] = GetSqlParameter("@BRANCH", ParameterDirection.Input, SqlDbType.VarChar, 4, this.BRANCH);
            prams[4] = GetSqlParameter("@Remarks1", ParameterDirection.Input, SqlDbType.NVarChar, 6, this.Remarks1);
            prams[5] = GetSqlParameter("@Remarks2", ParameterDirection.Input, SqlDbType.NVarChar, 6, this.Remarks2);
            prams[6] = GetSqlParameter("@Remarks3", ParameterDirection.Input, SqlDbType.NVarChar, 6, this.Remarks3);
            prams[7] = GetSqlParameter("@Nature", ParameterDirection.Input, SqlDbType.VarChar, 6, this.Nature);
            prams[8] = GetSqlParameter("@Memo", ParameterDirection.Input, SqlDbType.NVarChar, 1023, this.Memo);
            prams[9] = GetSqlParameter("@Photo", ParameterDirection.Input, SqlDbType.VarChar, 100, this.Photo);
            prams[10] = GetSqlParameter("@MostVisitedMalls1", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MostVisitedMalls1);
            prams[11] = GetSqlParameter("@MostVisitedMalls2", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MostVisitedMalls2);
            prams[12] = GetSqlParameter("@MostVisitedMalls3", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MostVisitedMalls3);
            prams[13] = GetSqlParameter("@MostBoughtBrands1", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MostBoughtBrands1);
            prams[14] = GetSqlParameter("@MostBoughtBrands2", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MostBoughtBrands2);
            prams[15] = GetSqlParameter("@MostBoughtBrands3", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MostBoughtBrands3);
            prams[16] = GetSqlParameter("@MostReadMagazine1", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MostReadMagazine1);
            prams[17] = GetSqlParameter("@MostReadMagazine2", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MostReadMagazine2);
            prams[18] = GetSqlParameter("@MostReadMagazine3", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MostReadMagazine3);
            prams[19] = GetSqlParameter("@MostUsedCreditCards1", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MostUsedCreditCards1);
            prams[20] = GetSqlParameter("@MostUsedCreditCards2", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MostUsedCreditCards2);
            prams[21] = GetSqlParameter("@MostUsedCreditCards3", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MostUsedCreditCards3);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@VipSupplementId", SqlDbType.UniqueIdentifier, 16, this.VipSupplementId),
                GetSqlParameterWithoutDirection("@MemberVipId", SqlDbType.UniqueIdentifier, 16, this.MemberVipId),
                GetSqlParameterWithoutDirection("@CustomerNumber", SqlDbType.VarChar, 6, this.CustomerNumber),
                GetSqlParameterWithoutDirection("@BRANCH", SqlDbType.VarChar, 4, this.BRANCH),
                GetSqlParameterWithoutDirection("@Remarks1", SqlDbType.NVarChar, 6, this.Remarks1),
                GetSqlParameterWithoutDirection("@Remarks2", SqlDbType.NVarChar, 6, this.Remarks2),
                GetSqlParameterWithoutDirection("@Remarks3", SqlDbType.NVarChar, 6, this.Remarks3),
                GetSqlParameterWithoutDirection("@Nature", SqlDbType.VarChar, 6, this.Nature),
                GetSqlParameterWithoutDirection("@Memo", SqlDbType.NVarChar, 1023, this.Memo),
                GetSqlParameterWithoutDirection("@Photo", SqlDbType.VarChar, 100, this.Photo),
                GetSqlParameterWithoutDirection("@MostVisitedMalls1", SqlDbType.NVarChar, 30, this.MostVisitedMalls1),
                GetSqlParameterWithoutDirection("@MostVisitedMalls2", SqlDbType.NVarChar, 30, this.MostVisitedMalls2),
                GetSqlParameterWithoutDirection("@MostVisitedMalls3", SqlDbType.NVarChar, 30, this.MostVisitedMalls3),
                GetSqlParameterWithoutDirection("@MostBoughtBrands1", SqlDbType.NVarChar, 30, this.MostBoughtBrands1),
                GetSqlParameterWithoutDirection("@MostBoughtBrands2", SqlDbType.NVarChar, 30, this.MostBoughtBrands2),
                GetSqlParameterWithoutDirection("@MostBoughtBrands3", SqlDbType.NVarChar, 30, this.MostBoughtBrands3),
                GetSqlParameterWithoutDirection("@MostReadMagazine1", SqlDbType.NVarChar, 30, this.MostReadMagazine1),
                GetSqlParameterWithoutDirection("@MostReadMagazine2", SqlDbType.NVarChar, 30, this.MostReadMagazine2),
                GetSqlParameterWithoutDirection("@MostReadMagazine3", SqlDbType.NVarChar, 30, this.MostReadMagazine3),
                GetSqlParameterWithoutDirection("@MostUsedCreditCards1", SqlDbType.NVarChar, 30, this.MostUsedCreditCards1),
                GetSqlParameterWithoutDirection("@MostUsedCreditCards2", SqlDbType.NVarChar, 30, this.MostUsedCreditCards2),
                GetSqlParameterWithoutDirection("@MostUsedCreditCards3", SqlDbType.NVarChar, 30, this.MostUsedCreditCards3)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("vipSupplementId: " + vipSupplementId.ToString()).Append("\r\n");
            builder.Append("memberVipId: " + memberVipId.ToString()).Append("\r\n");
            builder.Append("customerNumber: " + customerNumber.ToString()).Append("\r\n");
            builder.Append("bRANCH: " + bRANCH.ToString()).Append("\r\n");
            builder.Append("remarks1: " + remarks1.ToString()).Append("\r\n");
            builder.Append("remarks2: " + remarks2.ToString()).Append("\r\n");
            builder.Append("remarks3: " + remarks3.ToString()).Append("\r\n");
            builder.Append("nature: " + nature.ToString()).Append("\r\n");
            builder.Append("memo: " + memo.ToString()).Append("\r\n");
            builder.Append("photo: " + photo.ToString()).Append("\r\n");
            builder.Append("mostVisitedMalls1: " + mostVisitedMalls1.ToString()).Append("\r\n");
            builder.Append("mostVisitedMalls2: " + mostVisitedMalls2.ToString()).Append("\r\n");
            builder.Append("mostVisitedMalls3: " + mostVisitedMalls3.ToString()).Append("\r\n");
            builder.Append("mostBoughtBrands1: " + mostBoughtBrands1.ToString()).Append("\r\n");
            builder.Append("mostBoughtBrands2: " + mostBoughtBrands2.ToString()).Append("\r\n");
            builder.Append("mostBoughtBrands3: " + mostBoughtBrands3.ToString()).Append("\r\n");
            builder.Append("mostReadMagazine1: " + mostReadMagazine1.ToString()).Append("\r\n");
            builder.Append("mostReadMagazine2: " + mostReadMagazine2.ToString()).Append("\r\n");
            builder.Append("mostReadMagazine3: " + mostReadMagazine3.ToString()).Append("\r\n");
            builder.Append("mostUsedCreditCards1: " + mostUsedCreditCards1.ToString()).Append("\r\n");
            builder.Append("mostUsedCreditCards2: " + mostUsedCreditCards2.ToString()).Append("\r\n");
            builder.Append("mostUsedCreditCards3: " + mostUsedCreditCards3.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			MemberVipSupplementCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = MemberVipSupplement.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = MemberVipSupplement.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (MemberVipSupplement item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.MemberVipId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.VipSupplementId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(MemberVipSupplement target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.MemberVipId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				MemberVipSupplement parentTemplate = MemberVipSupplement.Load(target.MemberVipId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(MemberVipSupplement target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="MemberVipSupplement">MemberVipSupplement</see> objects.
    /// </summary>
    public class MemberVipSupplementCollection : BindingList< MemberVipSupplement>
    {
	}
}
