using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.EPOSBatchHeader.
    /// Date Created:   2020-08-09 02:14:09
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class EPOSBatchHeader
    {
        private Guid key = Guid.Empty;
        private Guid headerId = Guid.Empty;
        private string txNumber = String.Empty;
        private string txType = String.Empty;
        private DateTime txDate = DateTime.Parse("1900-1-1");
        private decimal totalAmount;
        private decimal depositAmount;
        private Guid staffId = Guid.Empty;
        private Guid staff1 = Guid.Empty;
        private Guid staff2 = Guid.Empty;
        private Guid workplaceId = Guid.Empty;
        private Guid vsLocationId = Guid.Empty;
        private Guid memberId = Guid.Empty;
        private Guid supplierId = Guid.Empty;
        private string reference = String.Empty;
        private string remarks = String.Empty;
        private int status = 0;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private Guid createdBy = Guid.Empty;
        private DateTime modifiedOn = DateTime.Parse("1900-1-1");
        private Guid modifiedBy = Guid.Empty;
        private DateTime postedOn = DateTime.Parse("1900-1-1");
        private Guid postedBy = Guid.Empty;
        private bool posted;
        private DateTime effectiveDate = DateTime.Parse("1900-1-1");
        private DateTime eXP_DELIVER = DateTime.Parse("1900-1-1");
        private string cONFIRM_TRF = String.Empty;
        private string sEX = String.Empty;
        private string rACE = String.Empty;
        private string aGE = String.Empty;
        private string pOSTNEG = String.Empty;
        private string eVT_CODE = String.Empty;
        private decimal tRNAMT_TTLSALES;
        private decimal tRNAMT_NETSALES;
        private decimal tRNAMT_TAX;
        private decimal tAX_RATE;
        private string pRICE_TYPE = String.Empty;
        private string currencyCode = String.Empty;
        private decimal exchangeRate;
        private string aNALYSIS_CODE01 = String.Empty;
        private string aNALYSIS_CODE02 = String.Empty;
        private string aNALYSIS_CODE03 = String.Empty;
        private string aNALYSIS_CODE04 = String.Empty;
        private string aNALYSIS_CODE05 = String.Empty;
        private string aNALYSIS_CODE06 = String.Empty;
        private string aNALYSIS_CODE07 = String.Empty;
        private string aNALYSIS_CODE08 = String.Empty;
        private string aNALYSIS_CODE09 = String.Empty;
        private string aNALYSIS_CODE10 = String.Empty;

        /// <summary>
        /// Initialize an new empty EPOSBatchHeader object.
        /// </summary>
        public EPOSBatchHeader()
        {
        }
		
        /// <summary>
        /// Initialize a new EPOSBatchHeader object with the given parameters.
        /// </summary>
        public EPOSBatchHeader(Guid headerId, string txNumber, string txType, DateTime txDate, decimal totalAmount, decimal depositAmount, Guid staffId, Guid staff1, Guid staff2, Guid workplaceId, Guid vsLocationId, Guid memberId, Guid supplierId, string reference, string remarks, int status, DateTime createdOn, Guid createdBy, DateTime modifiedOn, Guid modifiedBy, DateTime postedOn, Guid postedBy, bool posted, DateTime effectiveDate, DateTime eXP_DELIVER, string cONFIRM_TRF, string sEX, string rACE, string aGE, string pOSTNEG, string eVT_CODE, decimal tRNAMT_TTLSALES, decimal tRNAMT_NETSALES, decimal tRNAMT_TAX, decimal tAX_RATE, string pRICE_TYPE, string currencyCode, decimal exchangeRate, string aNALYSIS_CODE01, string aNALYSIS_CODE02, string aNALYSIS_CODE03, string aNALYSIS_CODE04, string aNALYSIS_CODE05, string aNALYSIS_CODE06, string aNALYSIS_CODE07, string aNALYSIS_CODE08, string aNALYSIS_CODE09, string aNALYSIS_CODE10)
        {
                this.headerId = headerId;
                this.txNumber = txNumber;
                this.txType = txType;
                this.txDate = txDate;
                this.totalAmount = totalAmount;
                this.depositAmount = depositAmount;
                this.staffId = staffId;
                this.staff1 = staff1;
                this.staff2 = staff2;
                this.workplaceId = workplaceId;
                this.vsLocationId = vsLocationId;
                this.memberId = memberId;
                this.supplierId = supplierId;
                this.reference = reference;
                this.remarks = remarks;
                this.status = status;
                this.createdOn = createdOn;
                this.createdBy = createdBy;
                this.modifiedOn = modifiedOn;
                this.modifiedBy = modifiedBy;
                this.postedOn = postedOn;
                this.postedBy = postedBy;
                this.posted = posted;
                this.effectiveDate = effectiveDate;
                this.eXP_DELIVER = eXP_DELIVER;
                this.cONFIRM_TRF = cONFIRM_TRF;
                this.sEX = sEX;
                this.rACE = rACE;
                this.aGE = aGE;
                this.pOSTNEG = pOSTNEG;
                this.eVT_CODE = eVT_CODE;
                this.tRNAMT_TTLSALES = tRNAMT_TTLSALES;
                this.tRNAMT_NETSALES = tRNAMT_NETSALES;
                this.tRNAMT_TAX = tRNAMT_TAX;
                this.tAX_RATE = tAX_RATE;
                this.pRICE_TYPE = pRICE_TYPE;
                this.currencyCode = currencyCode;
                this.exchangeRate = exchangeRate;
                this.aNALYSIS_CODE01 = aNALYSIS_CODE01;
                this.aNALYSIS_CODE02 = aNALYSIS_CODE02;
                this.aNALYSIS_CODE03 = aNALYSIS_CODE03;
                this.aNALYSIS_CODE04 = aNALYSIS_CODE04;
                this.aNALYSIS_CODE05 = aNALYSIS_CODE05;
                this.aNALYSIS_CODE06 = aNALYSIS_CODE06;
                this.aNALYSIS_CODE07 = aNALYSIS_CODE07;
                this.aNALYSIS_CODE08 = aNALYSIS_CODE08;
                this.aNALYSIS_CODE09 = aNALYSIS_CODE09;
                this.aNALYSIS_CODE10 = aNALYSIS_CODE10;
        }	
		
        /// <summary>
        /// Loads a EPOSBatchHeader object from the database using the given HeaderId
        /// </summary>
        /// <param name="headerId">The primary key value</param>
        /// <returns>A EPOSBatchHeader object</returns>
        public static EPOSBatchHeader Load(Guid headerId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@HeaderId", headerId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spEPOSBatchHeader_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    EPOSBatchHeader result = new EPOSBatchHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a EPOSBatchHeader object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A EPOSBatchHeader object</returns>
        public static EPOSBatchHeader LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spEPOSBatchHeader_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    EPOSBatchHeader result = new EPOSBatchHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of EPOSBatchHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the EPOSBatchHeader objects in the database.</returns>
        public static EPOSBatchHeaderCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spEPOSBatchHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of EPOSBatchHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the EPOSBatchHeader objects in the database ordered by the columns specified.</returns>
        public static EPOSBatchHeaderCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spEPOSBatchHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of EPOSBatchHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the EPOSBatchHeader objects in the database.</returns>
        public static EPOSBatchHeaderCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spEPOSBatchHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of EPOSBatchHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the EPOSBatchHeader objects in the database ordered by the columns specified.</returns>
        public static EPOSBatchHeaderCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spEPOSBatchHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of EPOSBatchHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the EPOSBatchHeader objects in the database.</returns>
        public static EPOSBatchHeaderCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            EPOSBatchHeaderCollection result = new EPOSBatchHeaderCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    EPOSBatchHeader tmp = new EPOSBatchHeader();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a EPOSBatchHeader object from the database.
        /// </summary>
        /// <param name="headerId">The primary key value</param>
        public static void Delete(Guid headerId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@HeaderId", headerId) };
            SqlHelper.Default.ExecuteNonQuery("spEPOSBatchHeader_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) headerId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) txNumber = reader.GetString(1);
                if (!reader.IsDBNull(2)) txType = reader.GetString(2);
                if (!reader.IsDBNull(3)) txDate = reader.GetDateTime(3);
                if (!reader.IsDBNull(4)) totalAmount = reader.GetDecimal(4);
                if (!reader.IsDBNull(5)) depositAmount = reader.GetDecimal(5);
                if (!reader.IsDBNull(6)) staffId = reader.GetGuid(6);
                if (!reader.IsDBNull(7)) staff1 = reader.GetGuid(7);
                if (!reader.IsDBNull(8)) staff2 = reader.GetGuid(8);
                if (!reader.IsDBNull(9)) workplaceId = reader.GetGuid(9);
                if (!reader.IsDBNull(10)) vsLocationId = reader.GetGuid(10);
                if (!reader.IsDBNull(11)) memberId = reader.GetGuid(11);
                if (!reader.IsDBNull(12)) supplierId = reader.GetGuid(12);
                if (!reader.IsDBNull(13)) reference = reader.GetString(13);
                if (!reader.IsDBNull(14)) remarks = reader.GetString(14);
                if (!reader.IsDBNull(15)) status = reader.GetInt32(15);
                if (!reader.IsDBNull(16)) createdOn = reader.GetDateTime(16);
                if (!reader.IsDBNull(17)) createdBy = reader.GetGuid(17);
                if (!reader.IsDBNull(18)) modifiedOn = reader.GetDateTime(18);
                if (!reader.IsDBNull(19)) modifiedBy = reader.GetGuid(19);
                if (!reader.IsDBNull(20)) postedOn = reader.GetDateTime(20);
                if (!reader.IsDBNull(21)) postedBy = reader.GetGuid(21);
                if (!reader.IsDBNull(22)) posted = reader.GetBoolean(22);
                if (!reader.IsDBNull(23)) effectiveDate = reader.GetDateTime(23);
                if (!reader.IsDBNull(24)) eXP_DELIVER = reader.GetDateTime(24);
                if (!reader.IsDBNull(25)) cONFIRM_TRF = reader.GetString(25);
                if (!reader.IsDBNull(26)) sEX = reader.GetString(26);
                if (!reader.IsDBNull(27)) rACE = reader.GetString(27);
                if (!reader.IsDBNull(28)) aGE = reader.GetString(28);
                if (!reader.IsDBNull(29)) pOSTNEG = reader.GetString(29);
                if (!reader.IsDBNull(30)) eVT_CODE = reader.GetString(30);
                if (!reader.IsDBNull(31)) tRNAMT_TTLSALES = reader.GetDecimal(31);
                if (!reader.IsDBNull(32)) tRNAMT_NETSALES = reader.GetDecimal(32);
                if (!reader.IsDBNull(33)) tRNAMT_TAX = reader.GetDecimal(33);
                if (!reader.IsDBNull(34)) tAX_RATE = reader.GetDecimal(34);
                if (!reader.IsDBNull(35)) pRICE_TYPE = reader.GetString(35);
                if (!reader.IsDBNull(36)) currencyCode = reader.GetString(36);
                if (!reader.IsDBNull(37)) exchangeRate = reader.GetDecimal(37);
                if (!reader.IsDBNull(38)) aNALYSIS_CODE01 = reader.GetString(38);
                if (!reader.IsDBNull(39)) aNALYSIS_CODE02 = reader.GetString(39);
                if (!reader.IsDBNull(40)) aNALYSIS_CODE03 = reader.GetString(40);
                if (!reader.IsDBNull(41)) aNALYSIS_CODE04 = reader.GetString(41);
                if (!reader.IsDBNull(42)) aNALYSIS_CODE05 = reader.GetString(42);
                if (!reader.IsDBNull(43)) aNALYSIS_CODE06 = reader.GetString(43);
                if (!reader.IsDBNull(44)) aNALYSIS_CODE07 = reader.GetString(44);
                if (!reader.IsDBNull(45)) aNALYSIS_CODE08 = reader.GetString(45);
                if (!reader.IsDBNull(46)) aNALYSIS_CODE09 = reader.GetString(46);
                if (!reader.IsDBNull(47)) aNALYSIS_CODE10 = reader.GetString(47);
            }
        }
		
        public void Delete()
        {
            Delete(this.HeaderId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != HeaderId)
                    this.Delete();
                Update();
            }
        }

        public Guid HeaderId
        {
            get { return headerId; }
            set { headerId = value; }
        }

        public string TxNumber
        {
            get { return txNumber; }
            set { txNumber = value; }
        }

        public string TxType
        {
            get { return txType; }
            set { txType = value; }
        }

        public DateTime TxDate
        {
            get { return txDate; }
            set { txDate = value; }
        }

        public decimal TotalAmount
        {
            get { return totalAmount; }
            set { totalAmount = value; }
        }

        public decimal DepositAmount
        {
            get { return depositAmount; }
            set { depositAmount = value; }
        }

        public Guid StaffId
        {
            get { return staffId; }
            set { staffId = value; }
        }

        public Guid Staff1
        {
            get { return staff1; }
            set { staff1 = value; }
        }

        public Guid Staff2
        {
            get { return staff2; }
            set { staff2 = value; }
        }

        public Guid WorkplaceId
        {
            get { return workplaceId; }
            set { workplaceId = value; }
        }

        public Guid VsLocationId
        {
            get { return vsLocationId; }
            set { vsLocationId = value; }
        }

        public Guid MemberId
        {
            get { return memberId; }
            set { memberId = value; }
        }

        public Guid SupplierId
        {
            get { return supplierId; }
            set { supplierId = value; }
        }

        public string Reference
        {
            get { return reference; }
            set { reference = value; }
        }

        public string Remarks
        {
            get { return remarks; }
            set { remarks = value; }
        }

        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public Guid CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime ModifiedOn
        {
            get { return modifiedOn; }
            set { modifiedOn = value; }
        }

        public Guid ModifiedBy
        {
            get { return modifiedBy; }
            set { modifiedBy = value; }
        }

        public DateTime PostedOn
        {
            get { return postedOn; }
            set { postedOn = value; }
        }

        public Guid PostedBy
        {
            get { return postedBy; }
            set { postedBy = value; }
        }

        public bool Posted
        {
            get { return posted; }
            set { posted = value; }
        }

        public DateTime EffectiveDate
        {
            get { return effectiveDate; }
            set { effectiveDate = value; }
        }

        public DateTime EXP_DELIVER
        {
            get { return eXP_DELIVER; }
            set { eXP_DELIVER = value; }
        }

        public string CONFIRM_TRF
        {
            get { return cONFIRM_TRF; }
            set { cONFIRM_TRF = value; }
        }

        public string SEX
        {
            get { return sEX; }
            set { sEX = value; }
        }

        public string RACE
        {
            get { return rACE; }
            set { rACE = value; }
        }

        public string AGE
        {
            get { return aGE; }
            set { aGE = value; }
        }

        public string POSTNEG
        {
            get { return pOSTNEG; }
            set { pOSTNEG = value; }
        }

        public string EVT_CODE
        {
            get { return eVT_CODE; }
            set { eVT_CODE = value; }
        }

        public decimal TRNAMT_TTLSALES
        {
            get { return tRNAMT_TTLSALES; }
            set { tRNAMT_TTLSALES = value; }
        }

        public decimal TRNAMT_NETSALES
        {
            get { return tRNAMT_NETSALES; }
            set { tRNAMT_NETSALES = value; }
        }

        public decimal TRNAMT_TAX
        {
            get { return tRNAMT_TAX; }
            set { tRNAMT_TAX = value; }
        }

        public decimal TAX_RATE
        {
            get { return tAX_RATE; }
            set { tAX_RATE = value; }
        }

        public string PRICE_TYPE
        {
            get { return pRICE_TYPE; }
            set { pRICE_TYPE = value; }
        }

        public string CurrencyCode
        {
            get { return currencyCode; }
            set { currencyCode = value; }
        }

        public decimal ExchangeRate
        {
            get { return exchangeRate; }
            set { exchangeRate = value; }
        }

        public string ANALYSIS_CODE01
        {
            get { return aNALYSIS_CODE01; }
            set { aNALYSIS_CODE01 = value; }
        }

        public string ANALYSIS_CODE02
        {
            get { return aNALYSIS_CODE02; }
            set { aNALYSIS_CODE02 = value; }
        }

        public string ANALYSIS_CODE03
        {
            get { return aNALYSIS_CODE03; }
            set { aNALYSIS_CODE03 = value; }
        }

        public string ANALYSIS_CODE04
        {
            get { return aNALYSIS_CODE04; }
            set { aNALYSIS_CODE04 = value; }
        }

        public string ANALYSIS_CODE05
        {
            get { return aNALYSIS_CODE05; }
            set { aNALYSIS_CODE05 = value; }
        }

        public string ANALYSIS_CODE06
        {
            get { return aNALYSIS_CODE06; }
            set { aNALYSIS_CODE06 = value; }
        }

        public string ANALYSIS_CODE07
        {
            get { return aNALYSIS_CODE07; }
            set { aNALYSIS_CODE07 = value; }
        }

        public string ANALYSIS_CODE08
        {
            get { return aNALYSIS_CODE08; }
            set { aNALYSIS_CODE08 = value; }
        }

        public string ANALYSIS_CODE09
        {
            get { return aNALYSIS_CODE09; }
            set { aNALYSIS_CODE09 = value; }
        }

        public string ANALYSIS_CODE10
        {
            get { return aNALYSIS_CODE10; }
            set { aNALYSIS_CODE10 = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spEPOSBatchHeader_InsRec", "@HeaderId", out returnedValue, parameterValues);
            
            headerId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spEPOSBatchHeader_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[48];
            prams[0] = GetSqlParameter("@HeaderId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.HeaderId);
            prams[1] = GetSqlParameter("@TxNumber", ParameterDirection.Input, SqlDbType.VarChar, 12, this.TxNumber);
            prams[2] = GetSqlParameter("@TxType", ParameterDirection.Input, SqlDbType.VarChar, 3, this.TxType);
            prams[3] = GetSqlParameter("@TxDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.TxDate);
            prams[4] = GetSqlParameter("@TotalAmount", ParameterDirection.Input, SqlDbType.Decimal, 9, this.TotalAmount);
            prams[5] = GetSqlParameter("@DepositAmount", ParameterDirection.Input, SqlDbType.Decimal, 9, this.DepositAmount);
            prams[6] = GetSqlParameter("@StaffId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.StaffId);
            prams[7] = GetSqlParameter("@Staff1", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.Staff1);
            prams[8] = GetSqlParameter("@Staff2", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.Staff2);
            prams[9] = GetSqlParameter("@WorkplaceId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.WorkplaceId);
            prams[10] = GetSqlParameter("@VsLocationId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.VsLocationId);
            prams[11] = GetSqlParameter("@MemberId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.MemberId);
            prams[12] = GetSqlParameter("@SupplierId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.SupplierId);
            prams[13] = GetSqlParameter("@Reference", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.Reference);
            prams[14] = GetSqlParameter("@Remarks", ParameterDirection.Input, SqlDbType.NVarChar, 128, this.Remarks);
            prams[15] = GetSqlParameter("@Status", ParameterDirection.Input, SqlDbType.Int, 4, this.Status);
            prams[16] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[17] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CreatedBy);
            prams[18] = GetSqlParameter("@ModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ModifiedOn);
            prams[19] = GetSqlParameter("@ModifiedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ModifiedBy);
            prams[20] = GetSqlParameter("@PostedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.PostedOn);
            prams[21] = GetSqlParameter("@PostedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.PostedBy);
            prams[22] = GetSqlParameter("@Posted", ParameterDirection.Input, SqlDbType.Bit, 1, this.Posted);
            prams[23] = GetSqlParameter("@EffectiveDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.EffectiveDate);
            prams[24] = GetSqlParameter("@EXP_DELIVER", ParameterDirection.Input, SqlDbType.DateTime, 8, this.EXP_DELIVER);
            prams[25] = GetSqlParameter("@CONFIRM_TRF", ParameterDirection.Input, SqlDbType.VarChar, 1, this.CONFIRM_TRF);
            prams[26] = GetSqlParameter("@SEX", ParameterDirection.Input, SqlDbType.VarChar, 1, this.SEX);
            prams[27] = GetSqlParameter("@RACE", ParameterDirection.Input, SqlDbType.VarChar, 1, this.RACE);
            prams[28] = GetSqlParameter("@AGE", ParameterDirection.Input, SqlDbType.VarChar, 1, this.AGE);
            prams[29] = GetSqlParameter("@POSTNEG", ParameterDirection.Input, SqlDbType.VarChar, 1, this.POSTNEG);
            prams[30] = GetSqlParameter("@EVT_CODE", ParameterDirection.Input, SqlDbType.VarChar, 6, this.EVT_CODE);
            prams[31] = GetSqlParameter("@TRNAMT_TTLSALES", ParameterDirection.Input, SqlDbType.Money, 8, this.TRNAMT_TTLSALES);
            prams[32] = GetSqlParameter("@TRNAMT_NETSALES", ParameterDirection.Input, SqlDbType.Money, 8, this.TRNAMT_NETSALES);
            prams[33] = GetSqlParameter("@TRNAMT_TAX", ParameterDirection.Input, SqlDbType.Money, 8, this.TRNAMT_TAX);
            prams[34] = GetSqlParameter("@TAX_RATE", ParameterDirection.Input, SqlDbType.Decimal, 9, this.TAX_RATE);
            prams[35] = GetSqlParameter("@PRICE_TYPE", ParameterDirection.Input, SqlDbType.VarChar, 10, this.PRICE_TYPE);
            prams[36] = GetSqlParameter("@CurrencyCode", ParameterDirection.Input, SqlDbType.VarChar, 3, this.CurrencyCode);
            prams[37] = GetSqlParameter("@ExchangeRate", ParameterDirection.Input, SqlDbType.Decimal, 9, this.ExchangeRate);
            prams[38] = GetSqlParameter("@ANALYSIS_CODE01", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE01);
            prams[39] = GetSqlParameter("@ANALYSIS_CODE02", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE02);
            prams[40] = GetSqlParameter("@ANALYSIS_CODE03", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE03);
            prams[41] = GetSqlParameter("@ANALYSIS_CODE04", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE04);
            prams[42] = GetSqlParameter("@ANALYSIS_CODE05", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE05);
            prams[43] = GetSqlParameter("@ANALYSIS_CODE06", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE06);
            prams[44] = GetSqlParameter("@ANALYSIS_CODE07", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE07);
            prams[45] = GetSqlParameter("@ANALYSIS_CODE08", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE08);
            prams[46] = GetSqlParameter("@ANALYSIS_CODE09", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE09);
            prams[47] = GetSqlParameter("@ANALYSIS_CODE10", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE10);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@HeaderId", SqlDbType.UniqueIdentifier, 16, this.HeaderId),
                GetSqlParameterWithoutDirection("@TxNumber", SqlDbType.VarChar, 12, this.TxNumber),
                GetSqlParameterWithoutDirection("@TxType", SqlDbType.VarChar, 3, this.TxType),
                GetSqlParameterWithoutDirection("@TxDate", SqlDbType.DateTime, 8, this.TxDate),
                GetSqlParameterWithoutDirection("@TotalAmount", SqlDbType.Decimal, 9, this.TotalAmount),
                GetSqlParameterWithoutDirection("@DepositAmount", SqlDbType.Decimal, 9, this.DepositAmount),
                GetSqlParameterWithoutDirection("@StaffId", SqlDbType.UniqueIdentifier, 16, this.StaffId),
                GetSqlParameterWithoutDirection("@Staff1", SqlDbType.UniqueIdentifier, 16, this.Staff1),
                GetSqlParameterWithoutDirection("@Staff2", SqlDbType.UniqueIdentifier, 16, this.Staff2),
                GetSqlParameterWithoutDirection("@WorkplaceId", SqlDbType.UniqueIdentifier, 16, this.WorkplaceId),
                GetSqlParameterWithoutDirection("@VsLocationId", SqlDbType.UniqueIdentifier, 16, this.VsLocationId),
                GetSqlParameterWithoutDirection("@MemberId", SqlDbType.UniqueIdentifier, 16, this.MemberId),
                GetSqlParameterWithoutDirection("@SupplierId", SqlDbType.UniqueIdentifier, 16, this.SupplierId),
                GetSqlParameterWithoutDirection("@Reference", SqlDbType.NVarChar, 64, this.Reference),
                GetSqlParameterWithoutDirection("@Remarks", SqlDbType.NVarChar, 128, this.Remarks),
                GetSqlParameterWithoutDirection("@Status", SqlDbType.Int, 4, this.Status),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.UniqueIdentifier, 16, this.CreatedBy),
                GetSqlParameterWithoutDirection("@ModifiedOn", SqlDbType.DateTime, 8, this.ModifiedOn),
                GetSqlParameterWithoutDirection("@ModifiedBy", SqlDbType.UniqueIdentifier, 16, this.ModifiedBy),
                GetSqlParameterWithoutDirection("@PostedOn", SqlDbType.DateTime, 8, this.PostedOn),
                GetSqlParameterWithoutDirection("@PostedBy", SqlDbType.UniqueIdentifier, 16, this.PostedBy),
                GetSqlParameterWithoutDirection("@Posted", SqlDbType.Bit, 1, this.Posted),
                GetSqlParameterWithoutDirection("@EffectiveDate", SqlDbType.DateTime, 8, this.EffectiveDate),
                GetSqlParameterWithoutDirection("@EXP_DELIVER", SqlDbType.DateTime, 8, this.EXP_DELIVER),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF", SqlDbType.VarChar, 1, this.CONFIRM_TRF),
                GetSqlParameterWithoutDirection("@SEX", SqlDbType.VarChar, 1, this.SEX),
                GetSqlParameterWithoutDirection("@RACE", SqlDbType.VarChar, 1, this.RACE),
                GetSqlParameterWithoutDirection("@AGE", SqlDbType.VarChar, 1, this.AGE),
                GetSqlParameterWithoutDirection("@POSTNEG", SqlDbType.VarChar, 1, this.POSTNEG),
                GetSqlParameterWithoutDirection("@EVT_CODE", SqlDbType.VarChar, 6, this.EVT_CODE),
                GetSqlParameterWithoutDirection("@TRNAMT_TTLSALES", SqlDbType.Money, 8, this.TRNAMT_TTLSALES),
                GetSqlParameterWithoutDirection("@TRNAMT_NETSALES", SqlDbType.Money, 8, this.TRNAMT_NETSALES),
                GetSqlParameterWithoutDirection("@TRNAMT_TAX", SqlDbType.Money, 8, this.TRNAMT_TAX),
                GetSqlParameterWithoutDirection("@TAX_RATE", SqlDbType.Decimal, 9, this.TAX_RATE),
                GetSqlParameterWithoutDirection("@PRICE_TYPE", SqlDbType.VarChar, 10, this.PRICE_TYPE),
                GetSqlParameterWithoutDirection("@CurrencyCode", SqlDbType.VarChar, 3, this.CurrencyCode),
                GetSqlParameterWithoutDirection("@ExchangeRate", SqlDbType.Decimal, 9, this.ExchangeRate),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE01", SqlDbType.VarChar, 2, this.ANALYSIS_CODE01),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE02", SqlDbType.VarChar, 2, this.ANALYSIS_CODE02),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE03", SqlDbType.VarChar, 2, this.ANALYSIS_CODE03),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE04", SqlDbType.VarChar, 2, this.ANALYSIS_CODE04),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE05", SqlDbType.VarChar, 2, this.ANALYSIS_CODE05),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE06", SqlDbType.VarChar, 2, this.ANALYSIS_CODE06),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE07", SqlDbType.VarChar, 2, this.ANALYSIS_CODE07),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE08", SqlDbType.VarChar, 2, this.ANALYSIS_CODE08),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE09", SqlDbType.VarChar, 2, this.ANALYSIS_CODE09),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE10", SqlDbType.VarChar, 2, this.ANALYSIS_CODE10)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("headerId: " + headerId.ToString()).Append("\r\n");
            builder.Append("txNumber: " + txNumber.ToString()).Append("\r\n");
            builder.Append("txType: " + txType.ToString()).Append("\r\n");
            builder.Append("txDate: " + txDate.ToString()).Append("\r\n");
            builder.Append("totalAmount: " + totalAmount.ToString()).Append("\r\n");
            builder.Append("depositAmount: " + depositAmount.ToString()).Append("\r\n");
            builder.Append("staffId: " + staffId.ToString()).Append("\r\n");
            builder.Append("staff1: " + staff1.ToString()).Append("\r\n");
            builder.Append("staff2: " + staff2.ToString()).Append("\r\n");
            builder.Append("workplaceId: " + workplaceId.ToString()).Append("\r\n");
            builder.Append("vsLocationId: " + vsLocationId.ToString()).Append("\r\n");
            builder.Append("memberId: " + memberId.ToString()).Append("\r\n");
            builder.Append("supplierId: " + supplierId.ToString()).Append("\r\n");
            builder.Append("reference: " + reference.ToString()).Append("\r\n");
            builder.Append("remarks: " + remarks.ToString()).Append("\r\n");
            builder.Append("status: " + status.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("modifiedOn: " + modifiedOn.ToString()).Append("\r\n");
            builder.Append("modifiedBy: " + modifiedBy.ToString()).Append("\r\n");
            builder.Append("postedOn: " + postedOn.ToString()).Append("\r\n");
            builder.Append("postedBy: " + postedBy.ToString()).Append("\r\n");
            builder.Append("posted: " + posted.ToString()).Append("\r\n");
            builder.Append("effectiveDate: " + effectiveDate.ToString()).Append("\r\n");
            builder.Append("eXP_DELIVER: " + eXP_DELIVER.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF: " + cONFIRM_TRF.ToString()).Append("\r\n");
            builder.Append("sEX: " + sEX.ToString()).Append("\r\n");
            builder.Append("rACE: " + rACE.ToString()).Append("\r\n");
            builder.Append("aGE: " + aGE.ToString()).Append("\r\n");
            builder.Append("pOSTNEG: " + pOSTNEG.ToString()).Append("\r\n");
            builder.Append("eVT_CODE: " + eVT_CODE.ToString()).Append("\r\n");
            builder.Append("tRNAMT_TTLSALES: " + tRNAMT_TTLSALES.ToString()).Append("\r\n");
            builder.Append("tRNAMT_NETSALES: " + tRNAMT_NETSALES.ToString()).Append("\r\n");
            builder.Append("tRNAMT_TAX: " + tRNAMT_TAX.ToString()).Append("\r\n");
            builder.Append("tAX_RATE: " + tAX_RATE.ToString()).Append("\r\n");
            builder.Append("pRICE_TYPE: " + pRICE_TYPE.ToString()).Append("\r\n");
            builder.Append("currencyCode: " + currencyCode.ToString()).Append("\r\n");
            builder.Append("exchangeRate: " + exchangeRate.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE01: " + aNALYSIS_CODE01.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE02: " + aNALYSIS_CODE02.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE03: " + aNALYSIS_CODE03.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE04: " + aNALYSIS_CODE04.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE05: " + aNALYSIS_CODE05.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE06: " + aNALYSIS_CODE06.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE07: " + aNALYSIS_CODE07.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE08: " + aNALYSIS_CODE08.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE09: " + aNALYSIS_CODE09.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE10: " + aNALYSIS_CODE10.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			EPOSBatchHeaderCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = EPOSBatchHeader.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = EPOSBatchHeader.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (EPOSBatchHeader item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.StaffId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.HeaderId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(EPOSBatchHeader target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.StaffId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				EPOSBatchHeader parentTemplate = EPOSBatchHeader.Load(target.StaffId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(EPOSBatchHeader target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="EPOSBatchHeader">EPOSBatchHeader</see> objects.
    /// </summary>
    public class EPOSBatchHeaderCollection : BindingList< EPOSBatchHeader>
    {
	}
}
