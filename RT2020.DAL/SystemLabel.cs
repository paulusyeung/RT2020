using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.SystemLabel.
    /// Date Created:   2020-08-09 02:14:17
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class SystemLabel
    {
        private Guid key = Guid.Empty;
        private Guid labelId = Guid.Empty;
        private string languageCode = String.Empty;
        private string sTKCODE = String.Empty;
        private string cLASS1 = String.Empty;
        private string cLASS2 = String.Empty;
        private string cLASS3 = String.Empty;
        private string cLASS4 = String.Empty;
        private string cLASS5 = String.Empty;
        private string cLASS6 = String.Empty;
        private string aPPENDIX1 = String.Empty;
        private string aPPENDIX2 = String.Empty;
        private string aPPENDIX3 = String.Empty;
        private string sERIALNO = String.Empty;
        private string vITEMNO = String.Empty;
        private string cOUPONNO = String.Empty;
        private string dLFLAG = String.Empty;
        private string rEMARK1 = String.Empty;
        private string rEMARK2 = String.Empty;
        private string rEMARK3 = String.Empty;
        private string rEMARK4 = String.Empty;
        private string rEMARK5 = String.Empty;
        private string rEMARK6 = String.Empty;

        /// <summary>
        /// Initialize an new empty SystemLabel object.
        /// </summary>
        public SystemLabel()
        {
        }
		
        /// <summary>
        /// Initialize a new SystemLabel object with the given parameters.
        /// </summary>
        public SystemLabel(Guid labelId, string languageCode, string sTKCODE, string cLASS1, string cLASS2, string cLASS3, string cLASS4, string cLASS5, string cLASS6, string aPPENDIX1, string aPPENDIX2, string aPPENDIX3, string sERIALNO, string vITEMNO, string cOUPONNO, string dLFLAG, string rEMARK1, string rEMARK2, string rEMARK3, string rEMARK4, string rEMARK5, string rEMARK6)
        {
                this.labelId = labelId;
                this.languageCode = languageCode;
                this.sTKCODE = sTKCODE;
                this.cLASS1 = cLASS1;
                this.cLASS2 = cLASS2;
                this.cLASS3 = cLASS3;
                this.cLASS4 = cLASS4;
                this.cLASS5 = cLASS5;
                this.cLASS6 = cLASS6;
                this.aPPENDIX1 = aPPENDIX1;
                this.aPPENDIX2 = aPPENDIX2;
                this.aPPENDIX3 = aPPENDIX3;
                this.sERIALNO = sERIALNO;
                this.vITEMNO = vITEMNO;
                this.cOUPONNO = cOUPONNO;
                this.dLFLAG = dLFLAG;
                this.rEMARK1 = rEMARK1;
                this.rEMARK2 = rEMARK2;
                this.rEMARK3 = rEMARK3;
                this.rEMARK4 = rEMARK4;
                this.rEMARK5 = rEMARK5;
                this.rEMARK6 = rEMARK6;
        }	
		
        /// <summary>
        /// Loads a SystemLabel object from the database using the given LabelId
        /// </summary>
        /// <param name="labelId">The primary key value</param>
        /// <returns>A SystemLabel object</returns>
        public static SystemLabel Load(Guid labelId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@LabelId", labelId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spSystemLabel_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    SystemLabel result = new SystemLabel();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a SystemLabel object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A SystemLabel object</returns>
        public static SystemLabel LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spSystemLabel_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    SystemLabel result = new SystemLabel();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of SystemLabel objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the SystemLabel objects in the database.</returns>
        public static SystemLabelCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spSystemLabel_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of SystemLabel objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the SystemLabel objects in the database ordered by the columns specified.</returns>
        public static SystemLabelCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spSystemLabel_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of SystemLabel objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the SystemLabel objects in the database.</returns>
        public static SystemLabelCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spSystemLabel_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of SystemLabel objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the SystemLabel objects in the database ordered by the columns specified.</returns>
        public static SystemLabelCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spSystemLabel_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of SystemLabel objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the SystemLabel objects in the database.</returns>
        public static SystemLabelCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            SystemLabelCollection result = new SystemLabelCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    SystemLabel tmp = new SystemLabel();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a SystemLabel object from the database.
        /// </summary>
        /// <param name="labelId">The primary key value</param>
        public static void Delete(Guid labelId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@LabelId", labelId) };
            SqlHelper.Default.ExecuteNonQuery("spSystemLabel_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) labelId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) languageCode = reader.GetString(1);
                if (!reader.IsDBNull(2)) sTKCODE = reader.GetString(2);
                if (!reader.IsDBNull(3)) cLASS1 = reader.GetString(3);
                if (!reader.IsDBNull(4)) cLASS2 = reader.GetString(4);
                if (!reader.IsDBNull(5)) cLASS3 = reader.GetString(5);
                if (!reader.IsDBNull(6)) cLASS4 = reader.GetString(6);
                if (!reader.IsDBNull(7)) cLASS5 = reader.GetString(7);
                if (!reader.IsDBNull(8)) cLASS6 = reader.GetString(8);
                if (!reader.IsDBNull(9)) aPPENDIX1 = reader.GetString(9);
                if (!reader.IsDBNull(10)) aPPENDIX2 = reader.GetString(10);
                if (!reader.IsDBNull(11)) aPPENDIX3 = reader.GetString(11);
                if (!reader.IsDBNull(12)) sERIALNO = reader.GetString(12);
                if (!reader.IsDBNull(13)) vITEMNO = reader.GetString(13);
                if (!reader.IsDBNull(14)) cOUPONNO = reader.GetString(14);
                if (!reader.IsDBNull(15)) dLFLAG = reader.GetString(15);
                if (!reader.IsDBNull(16)) rEMARK1 = reader.GetString(16);
                if (!reader.IsDBNull(17)) rEMARK2 = reader.GetString(17);
                if (!reader.IsDBNull(18)) rEMARK3 = reader.GetString(18);
                if (!reader.IsDBNull(19)) rEMARK4 = reader.GetString(19);
                if (!reader.IsDBNull(20)) rEMARK5 = reader.GetString(20);
                if (!reader.IsDBNull(21)) rEMARK6 = reader.GetString(21);
            }
        }
		
        public void Delete()
        {
            Delete(this.LabelId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != LabelId)
                    this.Delete();
                Update();
            }
        }

        public Guid LabelId
        {
            get { return labelId; }
            set { labelId = value; }
        }

        public string LanguageCode
        {
            get { return languageCode; }
            set { languageCode = value; }
        }

        public string STKCODE
        {
            get { return sTKCODE; }
            set { sTKCODE = value; }
        }

        public string CLASS1
        {
            get { return cLASS1; }
            set { cLASS1 = value; }
        }

        public string CLASS2
        {
            get { return cLASS2; }
            set { cLASS2 = value; }
        }

        public string CLASS3
        {
            get { return cLASS3; }
            set { cLASS3 = value; }
        }

        public string CLASS4
        {
            get { return cLASS4; }
            set { cLASS4 = value; }
        }

        public string CLASS5
        {
            get { return cLASS5; }
            set { cLASS5 = value; }
        }

        public string CLASS6
        {
            get { return cLASS6; }
            set { cLASS6 = value; }
        }

        public string APPENDIX1
        {
            get { return aPPENDIX1; }
            set { aPPENDIX1 = value; }
        }

        public string APPENDIX2
        {
            get { return aPPENDIX2; }
            set { aPPENDIX2 = value; }
        }

        public string APPENDIX3
        {
            get { return aPPENDIX3; }
            set { aPPENDIX3 = value; }
        }

        public string SERIALNO
        {
            get { return sERIALNO; }
            set { sERIALNO = value; }
        }

        public string VITEMNO
        {
            get { return vITEMNO; }
            set { vITEMNO = value; }
        }

        public string COUPONNO
        {
            get { return cOUPONNO; }
            set { cOUPONNO = value; }
        }

        public string DLFLAG
        {
            get { return dLFLAG; }
            set { dLFLAG = value; }
        }

        public string REMARK1
        {
            get { return rEMARK1; }
            set { rEMARK1 = value; }
        }

        public string REMARK2
        {
            get { return rEMARK2; }
            set { rEMARK2 = value; }
        }

        public string REMARK3
        {
            get { return rEMARK3; }
            set { rEMARK3 = value; }
        }

        public string REMARK4
        {
            get { return rEMARK4; }
            set { rEMARK4 = value; }
        }

        public string REMARK5
        {
            get { return rEMARK5; }
            set { rEMARK5 = value; }
        }

        public string REMARK6
        {
            get { return rEMARK6; }
            set { rEMARK6 = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spSystemLabel_InsRec", "@LabelId", out returnedValue, parameterValues);
            
            labelId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spSystemLabel_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[22];
            prams[0] = GetSqlParameter("@LabelId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.LabelId);
            prams[1] = GetSqlParameter("@LanguageCode", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.LanguageCode);
            prams[2] = GetSqlParameter("@STKCODE", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.STKCODE);
            prams[3] = GetSqlParameter("@CLASS1", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.CLASS1);
            prams[4] = GetSqlParameter("@CLASS2", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.CLASS2);
            prams[5] = GetSqlParameter("@CLASS3", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.CLASS3);
            prams[6] = GetSqlParameter("@CLASS4", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.CLASS4);
            prams[7] = GetSqlParameter("@CLASS5", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.CLASS5);
            prams[8] = GetSqlParameter("@CLASS6", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.CLASS6);
            prams[9] = GetSqlParameter("@APPENDIX1", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.APPENDIX1);
            prams[10] = GetSqlParameter("@APPENDIX2", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.APPENDIX2);
            prams[11] = GetSqlParameter("@APPENDIX3", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.APPENDIX3);
            prams[12] = GetSqlParameter("@SERIALNO", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.SERIALNO);
            prams[13] = GetSqlParameter("@VITEMNO", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.VITEMNO);
            prams[14] = GetSqlParameter("@COUPONNO", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.COUPONNO);
            prams[15] = GetSqlParameter("@DLFLAG", ParameterDirection.Input, SqlDbType.VarChar, 1, this.DLFLAG);
            prams[16] = GetSqlParameter("@REMARK1", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.REMARK1);
            prams[17] = GetSqlParameter("@REMARK2", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.REMARK2);
            prams[18] = GetSqlParameter("@REMARK3", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.REMARK3);
            prams[19] = GetSqlParameter("@REMARK4", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.REMARK4);
            prams[20] = GetSqlParameter("@REMARK5", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.REMARK5);
            prams[21] = GetSqlParameter("@REMARK6", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.REMARK6);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@LabelId", SqlDbType.UniqueIdentifier, 16, this.LabelId),
                GetSqlParameterWithoutDirection("@LanguageCode", SqlDbType.NVarChar, 10, this.LanguageCode),
                GetSqlParameterWithoutDirection("@STKCODE", SqlDbType.NVarChar, 10, this.STKCODE),
                GetSqlParameterWithoutDirection("@CLASS1", SqlDbType.NVarChar, 10, this.CLASS1),
                GetSqlParameterWithoutDirection("@CLASS2", SqlDbType.NVarChar, 10, this.CLASS2),
                GetSqlParameterWithoutDirection("@CLASS3", SqlDbType.NVarChar, 10, this.CLASS3),
                GetSqlParameterWithoutDirection("@CLASS4", SqlDbType.NVarChar, 10, this.CLASS4),
                GetSqlParameterWithoutDirection("@CLASS5", SqlDbType.NVarChar, 10, this.CLASS5),
                GetSqlParameterWithoutDirection("@CLASS6", SqlDbType.NVarChar, 10, this.CLASS6),
                GetSqlParameterWithoutDirection("@APPENDIX1", SqlDbType.NVarChar, 10, this.APPENDIX1),
                GetSqlParameterWithoutDirection("@APPENDIX2", SqlDbType.NVarChar, 10, this.APPENDIX2),
                GetSqlParameterWithoutDirection("@APPENDIX3", SqlDbType.NVarChar, 10, this.APPENDIX3),
                GetSqlParameterWithoutDirection("@SERIALNO", SqlDbType.NVarChar, 10, this.SERIALNO),
                GetSqlParameterWithoutDirection("@VITEMNO", SqlDbType.NVarChar, 10, this.VITEMNO),
                GetSqlParameterWithoutDirection("@COUPONNO", SqlDbType.NVarChar, 10, this.COUPONNO),
                GetSqlParameterWithoutDirection("@DLFLAG", SqlDbType.VarChar, 1, this.DLFLAG),
                GetSqlParameterWithoutDirection("@REMARK1", SqlDbType.NVarChar, 10, this.REMARK1),
                GetSqlParameterWithoutDirection("@REMARK2", SqlDbType.NVarChar, 10, this.REMARK2),
                GetSqlParameterWithoutDirection("@REMARK3", SqlDbType.NVarChar, 10, this.REMARK3),
                GetSqlParameterWithoutDirection("@REMARK4", SqlDbType.NVarChar, 10, this.REMARK4),
                GetSqlParameterWithoutDirection("@REMARK5", SqlDbType.NVarChar, 10, this.REMARK5),
                GetSqlParameterWithoutDirection("@REMARK6", SqlDbType.NVarChar, 10, this.REMARK6)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("labelId: " + labelId.ToString()).Append("\r\n");
            builder.Append("languageCode: " + languageCode.ToString()).Append("\r\n");
            builder.Append("sTKCODE: " + sTKCODE.ToString()).Append("\r\n");
            builder.Append("cLASS1: " + cLASS1.ToString()).Append("\r\n");
            builder.Append("cLASS2: " + cLASS2.ToString()).Append("\r\n");
            builder.Append("cLASS3: " + cLASS3.ToString()).Append("\r\n");
            builder.Append("cLASS4: " + cLASS4.ToString()).Append("\r\n");
            builder.Append("cLASS5: " + cLASS5.ToString()).Append("\r\n");
            builder.Append("cLASS6: " + cLASS6.ToString()).Append("\r\n");
            builder.Append("aPPENDIX1: " + aPPENDIX1.ToString()).Append("\r\n");
            builder.Append("aPPENDIX2: " + aPPENDIX2.ToString()).Append("\r\n");
            builder.Append("aPPENDIX3: " + aPPENDIX3.ToString()).Append("\r\n");
            builder.Append("sERIALNO: " + sERIALNO.ToString()).Append("\r\n");
            builder.Append("vITEMNO: " + vITEMNO.ToString()).Append("\r\n");
            builder.Append("cOUPONNO: " + cOUPONNO.ToString()).Append("\r\n");
            builder.Append("dLFLAG: " + dLFLAG.ToString()).Append("\r\n");
            builder.Append("rEMARK1: " + rEMARK1.ToString()).Append("\r\n");
            builder.Append("rEMARK2: " + rEMARK2.ToString()).Append("\r\n");
            builder.Append("rEMARK3: " + rEMARK3.ToString()).Append("\r\n");
            builder.Append("rEMARK4: " + rEMARK4.ToString()).Append("\r\n");
            builder.Append("rEMARK5: " + rEMARK5.ToString()).Append("\r\n");
            builder.Append("rEMARK6: " + rEMARK6.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			SystemLabelCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = SystemLabel.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = SystemLabel.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (SystemLabel item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = IgnorThis(item, ParentFilter);
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.LabelId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(SystemLabel target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
			string filterField = (string)pi.GetValue(target, null);
			if (filterField.ToLower() == parsed[1].ToLower())
			{
				result = false;
			}
			return result;
		}

		private static string GetFormatedText(SystemLabel target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="SystemLabel">SystemLabel</see> objects.
    /// </summary>
    public class SystemLabelCollection : BindingList< SystemLabel>
    {
	}
}
