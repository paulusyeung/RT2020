using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.StaffAddress.
    /// Date Created:   2020-08-09 02:14:16
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class StaffAddress
    {
        private Guid key = Guid.Empty;
        private Guid addressId = Guid.Empty;
        private Guid staffId = Guid.Empty;
        private string address = String.Empty;
        private string postalCode = String.Empty;
        private Guid cityId = Guid.Empty;
        private Guid provinceId = Guid.Empty;
        private Guid countryId = Guid.Empty;
        private Guid phoneTag1 = Guid.Empty;
        private string phoneTag1Value = String.Empty;
        private Guid phoneTag2 = Guid.Empty;
        private string phoneTag2Value = String.Empty;
        private Guid phoneTag3 = Guid.Empty;
        private string phoneTag3Value = String.Empty;
        private Guid phoneTag4 = Guid.Empty;
        private string phoneTag4Value = String.Empty;

        /// <summary>
        /// Initialize an new empty StaffAddress object.
        /// </summary>
        public StaffAddress()
        {
        }
		
        /// <summary>
        /// Initialize a new StaffAddress object with the given parameters.
        /// </summary>
        public StaffAddress(Guid addressId, Guid staffId, string address, string postalCode, Guid cityId, Guid provinceId, Guid countryId, Guid phoneTag1, string phoneTag1Value, Guid phoneTag2, string phoneTag2Value, Guid phoneTag3, string phoneTag3Value, Guid phoneTag4, string phoneTag4Value)
        {
                this.addressId = addressId;
                this.staffId = staffId;
                this.address = address;
                this.postalCode = postalCode;
                this.cityId = cityId;
                this.provinceId = provinceId;
                this.countryId = countryId;
                this.phoneTag1 = phoneTag1;
                this.phoneTag1Value = phoneTag1Value;
                this.phoneTag2 = phoneTag2;
                this.phoneTag2Value = phoneTag2Value;
                this.phoneTag3 = phoneTag3;
                this.phoneTag3Value = phoneTag3Value;
                this.phoneTag4 = phoneTag4;
                this.phoneTag4Value = phoneTag4Value;
        }	
		
        /// <summary>
        /// Loads a StaffAddress object from the database using the given AddressId
        /// </summary>
        /// <param name="addressId">The primary key value</param>
        /// <returns>A StaffAddress object</returns>
        public static StaffAddress Load(Guid addressId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@AddressId", addressId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spStaffAddress_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    StaffAddress result = new StaffAddress();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a StaffAddress object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A StaffAddress object</returns>
        public static StaffAddress LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spStaffAddress_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    StaffAddress result = new StaffAddress();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of StaffAddress objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the StaffAddress objects in the database.</returns>
        public static StaffAddressCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spStaffAddress_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of StaffAddress objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the StaffAddress objects in the database ordered by the columns specified.</returns>
        public static StaffAddressCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spStaffAddress_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of StaffAddress objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the StaffAddress objects in the database.</returns>
        public static StaffAddressCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spStaffAddress_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of StaffAddress objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the StaffAddress objects in the database ordered by the columns specified.</returns>
        public static StaffAddressCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spStaffAddress_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of StaffAddress objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the StaffAddress objects in the database.</returns>
        public static StaffAddressCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            StaffAddressCollection result = new StaffAddressCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    StaffAddress tmp = new StaffAddress();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a StaffAddress object from the database.
        /// </summary>
        /// <param name="addressId">The primary key value</param>
        public static void Delete(Guid addressId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@AddressId", addressId) };
            SqlHelper.Default.ExecuteNonQuery("spStaffAddress_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) addressId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) staffId = reader.GetGuid(1);
                if (!reader.IsDBNull(2)) address = reader.GetString(2);
                if (!reader.IsDBNull(3)) postalCode = reader.GetString(3);
                if (!reader.IsDBNull(4)) cityId = reader.GetGuid(4);
                if (!reader.IsDBNull(5)) provinceId = reader.GetGuid(5);
                if (!reader.IsDBNull(6)) countryId = reader.GetGuid(6);
                if (!reader.IsDBNull(7)) phoneTag1 = reader.GetGuid(7);
                if (!reader.IsDBNull(8)) phoneTag1Value = reader.GetString(8);
                if (!reader.IsDBNull(9)) phoneTag2 = reader.GetGuid(9);
                if (!reader.IsDBNull(10)) phoneTag2Value = reader.GetString(10);
                if (!reader.IsDBNull(11)) phoneTag3 = reader.GetGuid(11);
                if (!reader.IsDBNull(12)) phoneTag3Value = reader.GetString(12);
                if (!reader.IsDBNull(13)) phoneTag4 = reader.GetGuid(13);
                if (!reader.IsDBNull(14)) phoneTag4Value = reader.GetString(14);
            }
        }
		
        public void Delete()
        {
            Delete(this.AddressId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != AddressId)
                    this.Delete();
                Update();
            }
        }

        public Guid AddressId
        {
            get { return addressId; }
            set { addressId = value; }
        }

        public Guid StaffId
        {
            get { return staffId; }
            set { staffId = value; }
        }

        public string Address
        {
            get { return address; }
            set { address = value; }
        }

        public string PostalCode
        {
            get { return postalCode; }
            set { postalCode = value; }
        }

        public Guid CityId
        {
            get { return cityId; }
            set { cityId = value; }
        }

        public Guid ProvinceId
        {
            get { return provinceId; }
            set { provinceId = value; }
        }

        public Guid CountryId
        {
            get { return countryId; }
            set { countryId = value; }
        }

        public Guid PhoneTag1
        {
            get { return phoneTag1; }
            set { phoneTag1 = value; }
        }

        public string PhoneTag1Value
        {
            get { return phoneTag1Value; }
            set { phoneTag1Value = value; }
        }

        public Guid PhoneTag2
        {
            get { return phoneTag2; }
            set { phoneTag2 = value; }
        }

        public string PhoneTag2Value
        {
            get { return phoneTag2Value; }
            set { phoneTag2Value = value; }
        }

        public Guid PhoneTag3
        {
            get { return phoneTag3; }
            set { phoneTag3 = value; }
        }

        public string PhoneTag3Value
        {
            get { return phoneTag3Value; }
            set { phoneTag3Value = value; }
        }

        public Guid PhoneTag4
        {
            get { return phoneTag4; }
            set { phoneTag4 = value; }
        }

        public string PhoneTag4Value
        {
            get { return phoneTag4Value; }
            set { phoneTag4Value = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spStaffAddress_InsRec", "@AddressId", out returnedValue, parameterValues);
            
            addressId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spStaffAddress_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[15];
            prams[0] = GetSqlParameter("@AddressId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.AddressId);
            prams[1] = GetSqlParameter("@StaffId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.StaffId);
            prams[2] = GetSqlParameter("@Address", ParameterDirection.Input, SqlDbType.NVarChar, 512, this.Address);
            prams[3] = GetSqlParameter("@PostalCode", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.PostalCode);
            prams[4] = GetSqlParameter("@CityId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CityId);
            prams[5] = GetSqlParameter("@ProvinceId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ProvinceId);
            prams[6] = GetSqlParameter("@CountryId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CountryId);
            prams[7] = GetSqlParameter("@PhoneTag1", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.PhoneTag1);
            prams[8] = GetSqlParameter("@PhoneTag1Value", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.PhoneTag1Value);
            prams[9] = GetSqlParameter("@PhoneTag2", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.PhoneTag2);
            prams[10] = GetSqlParameter("@PhoneTag2Value", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.PhoneTag2Value);
            prams[11] = GetSqlParameter("@PhoneTag3", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.PhoneTag3);
            prams[12] = GetSqlParameter("@PhoneTag3Value", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.PhoneTag3Value);
            prams[13] = GetSqlParameter("@PhoneTag4", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.PhoneTag4);
            prams[14] = GetSqlParameter("@PhoneTag4Value", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.PhoneTag4Value);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@AddressId", SqlDbType.UniqueIdentifier, 16, this.AddressId),
                GetSqlParameterWithoutDirection("@StaffId", SqlDbType.UniqueIdentifier, 16, this.StaffId),
                GetSqlParameterWithoutDirection("@Address", SqlDbType.NVarChar, 512, this.Address),
                GetSqlParameterWithoutDirection("@PostalCode", SqlDbType.NVarChar, 10, this.PostalCode),
                GetSqlParameterWithoutDirection("@CityId", SqlDbType.UniqueIdentifier, 16, this.CityId),
                GetSqlParameterWithoutDirection("@ProvinceId", SqlDbType.UniqueIdentifier, 16, this.ProvinceId),
                GetSqlParameterWithoutDirection("@CountryId", SqlDbType.UniqueIdentifier, 16, this.CountryId),
                GetSqlParameterWithoutDirection("@PhoneTag1", SqlDbType.UniqueIdentifier, 16, this.PhoneTag1),
                GetSqlParameterWithoutDirection("@PhoneTag1Value", SqlDbType.NVarChar, 64, this.PhoneTag1Value),
                GetSqlParameterWithoutDirection("@PhoneTag2", SqlDbType.UniqueIdentifier, 16, this.PhoneTag2),
                GetSqlParameterWithoutDirection("@PhoneTag2Value", SqlDbType.NVarChar, 64, this.PhoneTag2Value),
                GetSqlParameterWithoutDirection("@PhoneTag3", SqlDbType.UniqueIdentifier, 16, this.PhoneTag3),
                GetSqlParameterWithoutDirection("@PhoneTag3Value", SqlDbType.NVarChar, 64, this.PhoneTag3Value),
                GetSqlParameterWithoutDirection("@PhoneTag4", SqlDbType.UniqueIdentifier, 16, this.PhoneTag4),
                GetSqlParameterWithoutDirection("@PhoneTag4Value", SqlDbType.NVarChar, 64, this.PhoneTag4Value)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("addressId: " + addressId.ToString()).Append("\r\n");
            builder.Append("staffId: " + staffId.ToString()).Append("\r\n");
            builder.Append("address: " + address.ToString()).Append("\r\n");
            builder.Append("postalCode: " + postalCode.ToString()).Append("\r\n");
            builder.Append("cityId: " + cityId.ToString()).Append("\r\n");
            builder.Append("provinceId: " + provinceId.ToString()).Append("\r\n");
            builder.Append("countryId: " + countryId.ToString()).Append("\r\n");
            builder.Append("phoneTag1: " + phoneTag1.ToString()).Append("\r\n");
            builder.Append("phoneTag1Value: " + phoneTag1Value.ToString()).Append("\r\n");
            builder.Append("phoneTag2: " + phoneTag2.ToString()).Append("\r\n");
            builder.Append("phoneTag2Value: " + phoneTag2Value.ToString()).Append("\r\n");
            builder.Append("phoneTag3: " + phoneTag3.ToString()).Append("\r\n");
            builder.Append("phoneTag3Value: " + phoneTag3Value.ToString()).Append("\r\n");
            builder.Append("phoneTag4: " + phoneTag4.ToString()).Append("\r\n");
            builder.Append("phoneTag4Value: " + phoneTag4Value.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			StaffAddressCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = StaffAddress.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = StaffAddress.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (StaffAddress item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.StaffId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.AddressId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(StaffAddress target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.StaffId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				StaffAddress parentTemplate = StaffAddress.Load(target.StaffId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(StaffAddress target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="StaffAddress">StaffAddress</see> objects.
    /// </summary>
    public class StaffAddressCollection : BindingList< StaffAddress>
    {
	}
}
