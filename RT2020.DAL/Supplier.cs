using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.Supplier.
    /// Date Created:   2020-08-09 02:14:16
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class Supplier
    {
        private Guid key = Guid.Empty;
        private Guid supplierId = Guid.Empty;
        private string supplierCode = String.Empty;
        private string supplierInitial = String.Empty;
        private string supplierName = String.Empty;
        private string supplierName_Chs = String.Empty;
        private string supplierName_Cht = String.Empty;
        private string email = String.Empty;
        private string alternateSupplier = String.Empty;
        private Guid marketSectorId = Guid.Empty;
        private Guid termsId = Guid.Empty;
        private decimal creditAmount;
        private string remarks = String.Empty;
        private decimal normalDiscount;
        private decimal wholesaleDiscount;
        private decimal quotaDiscount;
        private decimal yearEndDiscount;
        private decimal cashDiscount;
        private decimal otherDiscount;
        private DateTime dateLastPurchase = DateTime.Parse("1900-1-1");
        private DateTime dateLastPay = DateTime.Parse("1900-1-1");
        private DateTime dateLastReturn = DateTime.Parse("1900-1-1");
        private decimal bFBAL;
        private decimal cDBAL;
        private string currencyCode = String.Empty;
        private int status = 0;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private Guid createdBy = Guid.Empty;
        private DateTime modifiedOn = DateTime.Parse("1900-1-1");
        private Guid modifiedBy = Guid.Empty;
        private bool retired;
        private DateTime retiredOn = DateTime.Parse("1900-1-1");
        private Guid retiredBy = Guid.Empty;

        /// <summary>
        /// Initialize an new empty Supplier object.
        /// </summary>
        public Supplier()
        {
        }
		
        /// <summary>
        /// Initialize a new Supplier object with the given parameters.
        /// </summary>
        public Supplier(Guid supplierId, string supplierCode, string supplierInitial, string supplierName, string supplierName_Chs, string supplierName_Cht, string email, string alternateSupplier, Guid marketSectorId, Guid termsId, decimal creditAmount, string remarks, decimal normalDiscount, decimal wholesaleDiscount, decimal quotaDiscount, decimal yearEndDiscount, decimal cashDiscount, decimal otherDiscount, DateTime dateLastPurchase, DateTime dateLastPay, DateTime dateLastReturn, decimal bFBAL, decimal cDBAL, string currencyCode, int status, DateTime createdOn, Guid createdBy, DateTime modifiedOn, Guid modifiedBy, bool retired, DateTime retiredOn, Guid retiredBy)
        {
                this.supplierId = supplierId;
                this.supplierCode = supplierCode;
                this.supplierInitial = supplierInitial;
                this.supplierName = supplierName;
                this.supplierName_Chs = supplierName_Chs;
                this.supplierName_Cht = supplierName_Cht;
                this.email = email;
                this.alternateSupplier = alternateSupplier;
                this.marketSectorId = marketSectorId;
                this.termsId = termsId;
                this.creditAmount = creditAmount;
                this.remarks = remarks;
                this.normalDiscount = normalDiscount;
                this.wholesaleDiscount = wholesaleDiscount;
                this.quotaDiscount = quotaDiscount;
                this.yearEndDiscount = yearEndDiscount;
                this.cashDiscount = cashDiscount;
                this.otherDiscount = otherDiscount;
                this.dateLastPurchase = dateLastPurchase;
                this.dateLastPay = dateLastPay;
                this.dateLastReturn = dateLastReturn;
                this.bFBAL = bFBAL;
                this.cDBAL = cDBAL;
                this.currencyCode = currencyCode;
                this.status = status;
                this.createdOn = createdOn;
                this.createdBy = createdBy;
                this.modifiedOn = modifiedOn;
                this.modifiedBy = modifiedBy;
                this.retired = retired;
                this.retiredOn = retiredOn;
                this.retiredBy = retiredBy;
        }	
		
        /// <summary>
        /// Loads a Supplier object from the database using the given SupplierId
        /// </summary>
        /// <param name="supplierId">The primary key value</param>
        /// <returns>A Supplier object</returns>
        public static Supplier Load(Guid supplierId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@SupplierId", supplierId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spSupplier_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    Supplier result = new Supplier();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a Supplier object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A Supplier object</returns>
        public static Supplier LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spSupplier_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    Supplier result = new Supplier();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of Supplier objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Supplier objects in the database.</returns>
        public static SupplierCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spSupplier_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Supplier objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the Supplier objects in the database ordered by the columns specified.</returns>
        public static SupplierCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spSupplier_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Supplier objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Supplier objects in the database.</returns>
        public static SupplierCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spSupplier_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Supplier objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the Supplier objects in the database ordered by the columns specified.</returns>
        public static SupplierCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spSupplier_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Supplier objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Supplier objects in the database.</returns>
        public static SupplierCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            SupplierCollection result = new SupplierCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    Supplier tmp = new Supplier();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a Supplier object from the database.
        /// </summary>
        /// <param name="supplierId">The primary key value</param>
        public static void Delete(Guid supplierId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@SupplierId", supplierId) };
            SqlHelper.Default.ExecuteNonQuery("spSupplier_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) supplierId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) supplierCode = reader.GetString(1);
                if (!reader.IsDBNull(2)) supplierInitial = reader.GetString(2);
                if (!reader.IsDBNull(3)) supplierName = reader.GetString(3);
                if (!reader.IsDBNull(4)) supplierName_Chs = reader.GetString(4);
                if (!reader.IsDBNull(5)) supplierName_Cht = reader.GetString(5);
                if (!reader.IsDBNull(6)) email = reader.GetString(6);
                if (!reader.IsDBNull(7)) alternateSupplier = reader.GetString(7);
                if (!reader.IsDBNull(8)) marketSectorId = reader.GetGuid(8);
                if (!reader.IsDBNull(9)) termsId = reader.GetGuid(9);
                if (!reader.IsDBNull(10)) creditAmount = reader.GetDecimal(10);
                if (!reader.IsDBNull(11)) remarks = reader.GetString(11);
                if (!reader.IsDBNull(12)) normalDiscount = reader.GetDecimal(12);
                if (!reader.IsDBNull(13)) wholesaleDiscount = reader.GetDecimal(13);
                if (!reader.IsDBNull(14)) quotaDiscount = reader.GetDecimal(14);
                if (!reader.IsDBNull(15)) yearEndDiscount = reader.GetDecimal(15);
                if (!reader.IsDBNull(16)) cashDiscount = reader.GetDecimal(16);
                if (!reader.IsDBNull(17)) otherDiscount = reader.GetDecimal(17);
                if (!reader.IsDBNull(18)) dateLastPurchase = reader.GetDateTime(18);
                if (!reader.IsDBNull(19)) dateLastPay = reader.GetDateTime(19);
                if (!reader.IsDBNull(20)) dateLastReturn = reader.GetDateTime(20);
                if (!reader.IsDBNull(21)) bFBAL = reader.GetDecimal(21);
                if (!reader.IsDBNull(22)) cDBAL = reader.GetDecimal(22);
                if (!reader.IsDBNull(23)) currencyCode = reader.GetString(23);
                if (!reader.IsDBNull(24)) status = reader.GetInt32(24);
                if (!reader.IsDBNull(25)) createdOn = reader.GetDateTime(25);
                if (!reader.IsDBNull(26)) createdBy = reader.GetGuid(26);
                if (!reader.IsDBNull(27)) modifiedOn = reader.GetDateTime(27);
                if (!reader.IsDBNull(28)) modifiedBy = reader.GetGuid(28);
                if (!reader.IsDBNull(29)) retired = reader.GetBoolean(29);
                if (!reader.IsDBNull(30)) retiredOn = reader.GetDateTime(30);
                if (!reader.IsDBNull(31)) retiredBy = reader.GetGuid(31);
            }
        }
		
        public void Delete()
        {
            Delete(this.SupplierId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != SupplierId)
                    this.Delete();
                Update();
            }
        }

        public Guid SupplierId
        {
            get { return supplierId; }
            set { supplierId = value; }
        }

        public string SupplierCode
        {
            get { return supplierCode; }
            set { supplierCode = value; }
        }

        public string SupplierInitial
        {
            get { return supplierInitial; }
            set { supplierInitial = value; }
        }

        public string SupplierName
        {
            get { return supplierName; }
            set { supplierName = value; }
        }

        public string SupplierName_Chs
        {
            get { return supplierName_Chs; }
            set { supplierName_Chs = value; }
        }

        public string SupplierName_Cht
        {
            get { return supplierName_Cht; }
            set { supplierName_Cht = value; }
        }

        public string Email
        {
            get { return email; }
            set { email = value; }
        }

        public string AlternateSupplier
        {
            get { return alternateSupplier; }
            set { alternateSupplier = value; }
        }

        public Guid MarketSectorId
        {
            get { return marketSectorId; }
            set { marketSectorId = value; }
        }

        public Guid TermsId
        {
            get { return termsId; }
            set { termsId = value; }
        }

        public decimal CreditAmount
        {
            get { return creditAmount; }
            set { creditAmount = value; }
        }

        public string Remarks
        {
            get { return remarks; }
            set { remarks = value; }
        }

        public decimal NormalDiscount
        {
            get { return normalDiscount; }
            set { normalDiscount = value; }
        }

        public decimal WholesaleDiscount
        {
            get { return wholesaleDiscount; }
            set { wholesaleDiscount = value; }
        }

        public decimal QuotaDiscount
        {
            get { return quotaDiscount; }
            set { quotaDiscount = value; }
        }

        public decimal YearEndDiscount
        {
            get { return yearEndDiscount; }
            set { yearEndDiscount = value; }
        }

        public decimal CashDiscount
        {
            get { return cashDiscount; }
            set { cashDiscount = value; }
        }

        public decimal OtherDiscount
        {
            get { return otherDiscount; }
            set { otherDiscount = value; }
        }

        public DateTime DateLastPurchase
        {
            get { return dateLastPurchase; }
            set { dateLastPurchase = value; }
        }

        public DateTime DateLastPay
        {
            get { return dateLastPay; }
            set { dateLastPay = value; }
        }

        public DateTime DateLastReturn
        {
            get { return dateLastReturn; }
            set { dateLastReturn = value; }
        }

        public decimal BFBAL
        {
            get { return bFBAL; }
            set { bFBAL = value; }
        }

        public decimal CDBAL
        {
            get { return cDBAL; }
            set { cDBAL = value; }
        }

        public string CurrencyCode
        {
            get { return currencyCode; }
            set { currencyCode = value; }
        }

        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public Guid CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime ModifiedOn
        {
            get { return modifiedOn; }
            set { modifiedOn = value; }
        }

        public Guid ModifiedBy
        {
            get { return modifiedBy; }
            set { modifiedBy = value; }
        }

        public bool Retired
        {
            get { return retired; }
            set { retired = value; }
        }

        public DateTime RetiredOn
        {
            get { return retiredOn; }
            set { retiredOn = value; }
        }

        public Guid RetiredBy
        {
            get { return retiredBy; }
            set { retiredBy = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spSupplier_InsRec", "@SupplierId", out returnedValue, parameterValues);
            
            supplierId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spSupplier_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[32];
            prams[0] = GetSqlParameter("@SupplierId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.SupplierId);
            prams[1] = GetSqlParameter("@SupplierCode", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.SupplierCode);
            prams[2] = GetSqlParameter("@SupplierInitial", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.SupplierInitial);
            prams[3] = GetSqlParameter("@SupplierName", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.SupplierName);
            prams[4] = GetSqlParameter("@SupplierName_Chs", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.SupplierName_Chs);
            prams[5] = GetSqlParameter("@SupplierName_Cht", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.SupplierName_Cht);
            prams[6] = GetSqlParameter("@Email", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.Email);
            prams[7] = GetSqlParameter("@AlternateSupplier", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.AlternateSupplier);
            prams[8] = GetSqlParameter("@MarketSectorId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.MarketSectorId);
            prams[9] = GetSqlParameter("@TermsId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.TermsId);
            prams[10] = GetSqlParameter("@CreditAmount", ParameterDirection.Input, SqlDbType.Money, 8, this.CreditAmount);
            prams[11] = GetSqlParameter("@Remarks", ParameterDirection.Input, SqlDbType.NVarChar, 512, this.Remarks);
            prams[12] = GetSqlParameter("@NormalDiscount", ParameterDirection.Input, SqlDbType.Decimal, 5, this.NormalDiscount);
            prams[13] = GetSqlParameter("@WholesaleDiscount", ParameterDirection.Input, SqlDbType.Decimal, 5, this.WholesaleDiscount);
            prams[14] = GetSqlParameter("@QuotaDiscount", ParameterDirection.Input, SqlDbType.Decimal, 5, this.QuotaDiscount);
            prams[15] = GetSqlParameter("@YearEndDiscount", ParameterDirection.Input, SqlDbType.Decimal, 5, this.YearEndDiscount);
            prams[16] = GetSqlParameter("@CashDiscount", ParameterDirection.Input, SqlDbType.Decimal, 5, this.CashDiscount);
            prams[17] = GetSqlParameter("@OtherDiscount", ParameterDirection.Input, SqlDbType.Decimal, 5, this.OtherDiscount);
            prams[18] = GetSqlParameter("@DateLastPurchase", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DateLastPurchase);
            prams[19] = GetSqlParameter("@DateLastPay", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DateLastPay);
            prams[20] = GetSqlParameter("@DateLastReturn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DateLastReturn);
            prams[21] = GetSqlParameter("@BFBAL", ParameterDirection.Input, SqlDbType.Money, 8, this.BFBAL);
            prams[22] = GetSqlParameter("@CDBAL", ParameterDirection.Input, SqlDbType.Money, 8, this.CDBAL);
            prams[23] = GetSqlParameter("@CurrencyCode", ParameterDirection.Input, SqlDbType.VarChar, 3, this.CurrencyCode);
            prams[24] = GetSqlParameter("@Status", ParameterDirection.Input, SqlDbType.Int, 4, this.Status);
            prams[25] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[26] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CreatedBy);
            prams[27] = GetSqlParameter("@ModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ModifiedOn);
            prams[28] = GetSqlParameter("@ModifiedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ModifiedBy);
            prams[29] = GetSqlParameter("@Retired", ParameterDirection.Input, SqlDbType.Bit, 1, this.Retired);
            prams[30] = GetSqlParameter("@RetiredOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RetiredOn);
            prams[31] = GetSqlParameter("@RetiredBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.RetiredBy);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@SupplierId", SqlDbType.UniqueIdentifier, 16, this.SupplierId),
                GetSqlParameterWithoutDirection("@SupplierCode", SqlDbType.NVarChar, 10, this.SupplierCode),
                GetSqlParameterWithoutDirection("@SupplierInitial", SqlDbType.NVarChar, 10, this.SupplierInitial),
                GetSqlParameterWithoutDirection("@SupplierName", SqlDbType.NVarChar, 64, this.SupplierName),
                GetSqlParameterWithoutDirection("@SupplierName_Chs", SqlDbType.NVarChar, 64, this.SupplierName_Chs),
                GetSqlParameterWithoutDirection("@SupplierName_Cht", SqlDbType.NVarChar, 64, this.SupplierName_Cht),
                GetSqlParameterWithoutDirection("@Email", SqlDbType.NVarChar, 50, this.Email),
                GetSqlParameterWithoutDirection("@AlternateSupplier", SqlDbType.NVarChar, 10, this.AlternateSupplier),
                GetSqlParameterWithoutDirection("@MarketSectorId", SqlDbType.UniqueIdentifier, 16, this.MarketSectorId),
                GetSqlParameterWithoutDirection("@TermsId", SqlDbType.UniqueIdentifier, 16, this.TermsId),
                GetSqlParameterWithoutDirection("@CreditAmount", SqlDbType.Money, 8, this.CreditAmount),
                GetSqlParameterWithoutDirection("@Remarks", SqlDbType.NVarChar, 512, this.Remarks),
                GetSqlParameterWithoutDirection("@NormalDiscount", SqlDbType.Decimal, 5, this.NormalDiscount),
                GetSqlParameterWithoutDirection("@WholesaleDiscount", SqlDbType.Decimal, 5, this.WholesaleDiscount),
                GetSqlParameterWithoutDirection("@QuotaDiscount", SqlDbType.Decimal, 5, this.QuotaDiscount),
                GetSqlParameterWithoutDirection("@YearEndDiscount", SqlDbType.Decimal, 5, this.YearEndDiscount),
                GetSqlParameterWithoutDirection("@CashDiscount", SqlDbType.Decimal, 5, this.CashDiscount),
                GetSqlParameterWithoutDirection("@OtherDiscount", SqlDbType.Decimal, 5, this.OtherDiscount),
                GetSqlParameterWithoutDirection("@DateLastPurchase", SqlDbType.DateTime, 8, this.DateLastPurchase),
                GetSqlParameterWithoutDirection("@DateLastPay", SqlDbType.DateTime, 8, this.DateLastPay),
                GetSqlParameterWithoutDirection("@DateLastReturn", SqlDbType.DateTime, 8, this.DateLastReturn),
                GetSqlParameterWithoutDirection("@BFBAL", SqlDbType.Money, 8, this.BFBAL),
                GetSqlParameterWithoutDirection("@CDBAL", SqlDbType.Money, 8, this.CDBAL),
                GetSqlParameterWithoutDirection("@CurrencyCode", SqlDbType.VarChar, 3, this.CurrencyCode),
                GetSqlParameterWithoutDirection("@Status", SqlDbType.Int, 4, this.Status),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.UniqueIdentifier, 16, this.CreatedBy),
                GetSqlParameterWithoutDirection("@ModifiedOn", SqlDbType.DateTime, 8, this.ModifiedOn),
                GetSqlParameterWithoutDirection("@ModifiedBy", SqlDbType.UniqueIdentifier, 16, this.ModifiedBy),
                GetSqlParameterWithoutDirection("@Retired", SqlDbType.Bit, 1, this.Retired),
                GetSqlParameterWithoutDirection("@RetiredOn", SqlDbType.DateTime, 8, this.RetiredOn),
                GetSqlParameterWithoutDirection("@RetiredBy", SqlDbType.UniqueIdentifier, 16, this.RetiredBy)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("supplierId: " + supplierId.ToString()).Append("\r\n");
            builder.Append("supplierCode: " + supplierCode.ToString()).Append("\r\n");
            builder.Append("supplierInitial: " + supplierInitial.ToString()).Append("\r\n");
            builder.Append("supplierName: " + supplierName.ToString()).Append("\r\n");
            builder.Append("supplierName_Chs: " + supplierName_Chs.ToString()).Append("\r\n");
            builder.Append("supplierName_Cht: " + supplierName_Cht.ToString()).Append("\r\n");
            builder.Append("email: " + email.ToString()).Append("\r\n");
            builder.Append("alternateSupplier: " + alternateSupplier.ToString()).Append("\r\n");
            builder.Append("marketSectorId: " + marketSectorId.ToString()).Append("\r\n");
            builder.Append("termsId: " + termsId.ToString()).Append("\r\n");
            builder.Append("creditAmount: " + creditAmount.ToString()).Append("\r\n");
            builder.Append("remarks: " + remarks.ToString()).Append("\r\n");
            builder.Append("normalDiscount: " + normalDiscount.ToString()).Append("\r\n");
            builder.Append("wholesaleDiscount: " + wholesaleDiscount.ToString()).Append("\r\n");
            builder.Append("quotaDiscount: " + quotaDiscount.ToString()).Append("\r\n");
            builder.Append("yearEndDiscount: " + yearEndDiscount.ToString()).Append("\r\n");
            builder.Append("cashDiscount: " + cashDiscount.ToString()).Append("\r\n");
            builder.Append("otherDiscount: " + otherDiscount.ToString()).Append("\r\n");
            builder.Append("dateLastPurchase: " + dateLastPurchase.ToString()).Append("\r\n");
            builder.Append("dateLastPay: " + dateLastPay.ToString()).Append("\r\n");
            builder.Append("dateLastReturn: " + dateLastReturn.ToString()).Append("\r\n");
            builder.Append("bFBAL: " + bFBAL.ToString()).Append("\r\n");
            builder.Append("cDBAL: " + cDBAL.ToString()).Append("\r\n");
            builder.Append("currencyCode: " + currencyCode.ToString()).Append("\r\n");
            builder.Append("status: " + status.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("modifiedOn: " + modifiedOn.ToString()).Append("\r\n");
            builder.Append("modifiedBy: " + modifiedBy.ToString()).Append("\r\n");
            builder.Append("retired: " + retired.ToString()).Append("\r\n");
            builder.Append("retiredOn: " + retiredOn.ToString()).Append("\r\n");
            builder.Append("retiredBy: " + retiredBy.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			SupplierCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			// Filter the retired records
			if (WhereClause.Length > 0)
			{
				WhereClause += " AND Retired = 0";
			}
			else
			{
				WhereClause = "Retired = 0";
			}
			
			if (WhereClause.Length > 0)
			{
				source = Supplier.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = Supplier.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (Supplier item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.MarketSectorId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.SupplierId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(Supplier target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.MarketSectorId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				Supplier parentTemplate = Supplier.Load(target.MarketSectorId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(Supplier target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="Supplier">Supplier</see> objects.
    /// </summary>
    public class SupplierCollection : BindingList< Supplier>
    {
	}
}
