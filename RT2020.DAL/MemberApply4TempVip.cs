using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.MemberApply4TempVip.
    /// Date Created:   2020-08-09 02:14:12
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class MemberApply4TempVip
    {
        private Guid key = Guid.Empty;
        private Guid tempVipId = Guid.Empty;
        private string vIPNO = String.Empty;
        private string gROUP = String.Empty;
        private string sALUTE = String.Empty;
        private string lNAME = String.Empty;
        private string fNAME = String.Empty;
        private string nNAME = String.Empty;
        private string cNAME = String.Empty;
        private string tITLE = String.Empty;
        private string cOMPNAME = String.Empty;
        private string cOMPNAMEC = String.Empty;
        private string aDDRESS1 = String.Empty;
        private string aDDRESS2 = String.Empty;
        private string aDDRESS3 = String.Empty;
        private string aDDRESS4 = String.Empty;
        private string aDDRESS1C = String.Empty;
        private string aDDRESS2C = String.Empty;
        private string aDDRESS3C = String.Empty;
        private string aDDRESS4C = String.Empty;
        private string tELW = String.Empty;
        private string tELH = String.Empty;
        private string tELP = String.Empty;
        private string fAX = String.Empty;
        private string tELOTHER = String.Empty;
        private string eMAIL = String.Empty;
        private string sEX = String.Empty;
        private string rACE = String.Empty;
        private string rEMARKS = String.Empty;
        private float nRDISC;
        private string gRADE = String.Empty;
        private string iD_NO = String.Empty;
        private DateTime dATE_BIRTH = DateTime.Parse("1900-1-1");
        private DateTime dATE_REGIS = DateTime.Parse("1900-1-1");
        private string dLFLAG = String.Empty;
        private string aGE = String.Empty;
        private string r1 = String.Empty;
        private string r2 = String.Empty;
        private string r3 = String.Empty;
        private string nATION = String.Empty;
        private string mEMO = String.Empty;
        private string pHOTO = String.Empty;
        private DateTime dATE_COMM = DateTime.Parse("1900-1-1");
        private DateTime dATE_MIGRATE = DateTime.Parse("1900-1-1");
        private DateTime cARD_ISSUE = DateTime.Parse("1900-1-1");
        private DateTime cARD_EXPIRE = DateTime.Parse("1900-1-1");
        private string cARD_NAME = String.Empty;
        private bool cARD_RECEIVE;
        private bool cARD_ACTIVE;
        private string fORMER_PPNO = String.Empty;
        private decimal aCREDIT;
        private int tERMS = 0;
        private float pYDISC;
        private DateTime dATECREATE = DateTime.Parse("1900-1-1");
        private DateTime dATELCHG = DateTime.Parse("1900-1-1");
        private string uSERLCHG = String.Empty;
        private string nATURE = String.Empty;
        private string cUSTNUM = String.Empty;
        private string bRANCH = String.Empty;
        private decimal aTDAMTPUR;
        private decimal aTDAMTPAY;
        private decimal aTDAMTRET;
        private decimal aTDAMTDIS;
        private float pRO_DISC;
        private string lOOID = String.Empty;
        private string cODENUM = String.Empty;
        private string lOYALTYNUM = String.Empty;
        private string aGE_GROUP = String.Empty;
        private string pROFILE = String.Empty;
        private string mALL1 = String.Empty;
        private string mALL2 = String.Empty;
        private string mALL3 = String.Empty;
        private string bRAND1 = String.Empty;
        private string bRAND2 = String.Empty;
        private string bRAND3 = String.Empty;
        private string mAGAZINE1 = String.Empty;
        private string mAGAZINE2 = String.Empty;
        private string mAGAZINE3 = String.Empty;
        private string cARD1 = String.Empty;
        private string cARD2 = String.Empty;
        private string cARD3 = String.Empty;
        private string pHONEBOOK = String.Empty;
        private decimal sTAFF_QUOTA;
        private string bADDONDISC = String.Empty;
        private string rECORD_SOURCE = String.Empty;

        /// <summary>
        /// Initialize an new empty MemberApply4TempVip object.
        /// </summary>
        public MemberApply4TempVip()
        {
        }
		
        /// <summary>
        /// Initialize a new MemberApply4TempVip object with the given parameters.
        /// </summary>
        public MemberApply4TempVip(Guid tempVipId, string vIPNO, string gROUP, string sALUTE, string lNAME, string fNAME, string nNAME, string cNAME, string tITLE, string cOMPNAME, string cOMPNAMEC, string aDDRESS1, string aDDRESS2, string aDDRESS3, string aDDRESS4, string aDDRESS1C, string aDDRESS2C, string aDDRESS3C, string aDDRESS4C, string tELW, string tELH, string tELP, string fAX, string tELOTHER, string eMAIL, string sEX, string rACE, string rEMARKS, float nRDISC, string gRADE, string iD_NO, DateTime dATE_BIRTH, DateTime dATE_REGIS, string dLFLAG, string aGE, string r1, string r2, string r3, string nATION, string mEMO, string pHOTO, DateTime dATE_COMM, DateTime dATE_MIGRATE, DateTime cARD_ISSUE, DateTime cARD_EXPIRE, string cARD_NAME, bool cARD_RECEIVE, bool cARD_ACTIVE, string fORMER_PPNO, decimal aCREDIT, int tERMS, float pYDISC, DateTime dATECREATE, DateTime dATELCHG, string uSERLCHG, string nATURE, string cUSTNUM, string bRANCH, decimal aTDAMTPUR, decimal aTDAMTPAY, decimal aTDAMTRET, decimal aTDAMTDIS, float pRO_DISC, string lOOID, string cODENUM, string lOYALTYNUM, string aGE_GROUP, string pROFILE, string mALL1, string mALL2, string mALL3, string bRAND1, string bRAND2, string bRAND3, string mAGAZINE1, string mAGAZINE2, string mAGAZINE3, string cARD1, string cARD2, string cARD3, string pHONEBOOK, decimal sTAFF_QUOTA, string bADDONDISC, string rECORD_SOURCE)
        {
                this.tempVipId = tempVipId;
                this.vIPNO = vIPNO;
                this.gROUP = gROUP;
                this.sALUTE = sALUTE;
                this.lNAME = lNAME;
                this.fNAME = fNAME;
                this.nNAME = nNAME;
                this.cNAME = cNAME;
                this.tITLE = tITLE;
                this.cOMPNAME = cOMPNAME;
                this.cOMPNAMEC = cOMPNAMEC;
                this.aDDRESS1 = aDDRESS1;
                this.aDDRESS2 = aDDRESS2;
                this.aDDRESS3 = aDDRESS3;
                this.aDDRESS4 = aDDRESS4;
                this.aDDRESS1C = aDDRESS1C;
                this.aDDRESS2C = aDDRESS2C;
                this.aDDRESS3C = aDDRESS3C;
                this.aDDRESS4C = aDDRESS4C;
                this.tELW = tELW;
                this.tELH = tELH;
                this.tELP = tELP;
                this.fAX = fAX;
                this.tELOTHER = tELOTHER;
                this.eMAIL = eMAIL;
                this.sEX = sEX;
                this.rACE = rACE;
                this.rEMARKS = rEMARKS;
                this.nRDISC = nRDISC;
                this.gRADE = gRADE;
                this.iD_NO = iD_NO;
                this.dATE_BIRTH = dATE_BIRTH;
                this.dATE_REGIS = dATE_REGIS;
                this.dLFLAG = dLFLAG;
                this.aGE = aGE;
                this.r1 = r1;
                this.r2 = r2;
                this.r3 = r3;
                this.nATION = nATION;
                this.mEMO = mEMO;
                this.pHOTO = pHOTO;
                this.dATE_COMM = dATE_COMM;
                this.dATE_MIGRATE = dATE_MIGRATE;
                this.cARD_ISSUE = cARD_ISSUE;
                this.cARD_EXPIRE = cARD_EXPIRE;
                this.cARD_NAME = cARD_NAME;
                this.cARD_RECEIVE = cARD_RECEIVE;
                this.cARD_ACTIVE = cARD_ACTIVE;
                this.fORMER_PPNO = fORMER_PPNO;
                this.aCREDIT = aCREDIT;
                this.tERMS = tERMS;
                this.pYDISC = pYDISC;
                this.dATECREATE = dATECREATE;
                this.dATELCHG = dATELCHG;
                this.uSERLCHG = uSERLCHG;
                this.nATURE = nATURE;
                this.cUSTNUM = cUSTNUM;
                this.bRANCH = bRANCH;
                this.aTDAMTPUR = aTDAMTPUR;
                this.aTDAMTPAY = aTDAMTPAY;
                this.aTDAMTRET = aTDAMTRET;
                this.aTDAMTDIS = aTDAMTDIS;
                this.pRO_DISC = pRO_DISC;
                this.lOOID = lOOID;
                this.cODENUM = cODENUM;
                this.lOYALTYNUM = lOYALTYNUM;
                this.aGE_GROUP = aGE_GROUP;
                this.pROFILE = pROFILE;
                this.mALL1 = mALL1;
                this.mALL2 = mALL2;
                this.mALL3 = mALL3;
                this.bRAND1 = bRAND1;
                this.bRAND2 = bRAND2;
                this.bRAND3 = bRAND3;
                this.mAGAZINE1 = mAGAZINE1;
                this.mAGAZINE2 = mAGAZINE2;
                this.mAGAZINE3 = mAGAZINE3;
                this.cARD1 = cARD1;
                this.cARD2 = cARD2;
                this.cARD3 = cARD3;
                this.pHONEBOOK = pHONEBOOK;
                this.sTAFF_QUOTA = sTAFF_QUOTA;
                this.bADDONDISC = bADDONDISC;
                this.rECORD_SOURCE = rECORD_SOURCE;
        }	
		
        /// <summary>
        /// Loads a MemberApply4TempVip object from the database using the given TempVipId
        /// </summary>
        /// <param name="tempVipId">The primary key value</param>
        /// <returns>A MemberApply4TempVip object</returns>
        public static MemberApply4TempVip Load(Guid tempVipId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@TempVipId", tempVipId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spMemberApply4TempVip_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    MemberApply4TempVip result = new MemberApply4TempVip();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a MemberApply4TempVip object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A MemberApply4TempVip object</returns>
        public static MemberApply4TempVip LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spMemberApply4TempVip_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    MemberApply4TempVip result = new MemberApply4TempVip();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of MemberApply4TempVip objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the MemberApply4TempVip objects in the database.</returns>
        public static MemberApply4TempVipCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spMemberApply4TempVip_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of MemberApply4TempVip objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the MemberApply4TempVip objects in the database ordered by the columns specified.</returns>
        public static MemberApply4TempVipCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spMemberApply4TempVip_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of MemberApply4TempVip objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the MemberApply4TempVip objects in the database.</returns>
        public static MemberApply4TempVipCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spMemberApply4TempVip_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of MemberApply4TempVip objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the MemberApply4TempVip objects in the database ordered by the columns specified.</returns>
        public static MemberApply4TempVipCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spMemberApply4TempVip_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of MemberApply4TempVip objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the MemberApply4TempVip objects in the database.</returns>
        public static MemberApply4TempVipCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            MemberApply4TempVipCollection result = new MemberApply4TempVipCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    MemberApply4TempVip tmp = new MemberApply4TempVip();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a MemberApply4TempVip object from the database.
        /// </summary>
        /// <param name="tempVipId">The primary key value</param>
        public static void Delete(Guid tempVipId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@TempVipId", tempVipId) };
            SqlHelper.Default.ExecuteNonQuery("spMemberApply4TempVip_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) tempVipId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) vIPNO = reader.GetString(1);
                if (!reader.IsDBNull(2)) gROUP = reader.GetString(2);
                if (!reader.IsDBNull(3)) sALUTE = reader.GetString(3);
                if (!reader.IsDBNull(4)) lNAME = reader.GetString(4);
                if (!reader.IsDBNull(5)) fNAME = reader.GetString(5);
                if (!reader.IsDBNull(6)) nNAME = reader.GetString(6);
                if (!reader.IsDBNull(7)) cNAME = reader.GetString(7);
                if (!reader.IsDBNull(8)) tITLE = reader.GetString(8);
                if (!reader.IsDBNull(9)) cOMPNAME = reader.GetString(9);
                if (!reader.IsDBNull(10)) cOMPNAMEC = reader.GetString(10);
                if (!reader.IsDBNull(11)) aDDRESS1 = reader.GetString(11);
                if (!reader.IsDBNull(12)) aDDRESS2 = reader.GetString(12);
                if (!reader.IsDBNull(13)) aDDRESS3 = reader.GetString(13);
                if (!reader.IsDBNull(14)) aDDRESS4 = reader.GetString(14);
                if (!reader.IsDBNull(15)) aDDRESS1C = reader.GetString(15);
                if (!reader.IsDBNull(16)) aDDRESS2C = reader.GetString(16);
                if (!reader.IsDBNull(17)) aDDRESS3C = reader.GetString(17);
                if (!reader.IsDBNull(18)) aDDRESS4C = reader.GetString(18);
                if (!reader.IsDBNull(19)) tELW = reader.GetString(19);
                if (!reader.IsDBNull(20)) tELH = reader.GetString(20);
                if (!reader.IsDBNull(21)) tELP = reader.GetString(21);
                if (!reader.IsDBNull(22)) fAX = reader.GetString(22);
                if (!reader.IsDBNull(23)) tELOTHER = reader.GetString(23);
                if (!reader.IsDBNull(24)) eMAIL = reader.GetString(24);
                if (!reader.IsDBNull(25)) sEX = reader.GetString(25);
                if (!reader.IsDBNull(26)) rACE = reader.GetString(26);
                if (!reader.IsDBNull(27)) rEMARKS = reader.GetString(27);
                if (!reader.IsDBNull(28)) nRDISC = reader.GetFloat(28);
                if (!reader.IsDBNull(29)) gRADE = reader.GetString(29);
                if (!reader.IsDBNull(30)) iD_NO = reader.GetString(30);
                if (!reader.IsDBNull(31)) dATE_BIRTH = reader.GetDateTime(31);
                if (!reader.IsDBNull(32)) dATE_REGIS = reader.GetDateTime(32);
                if (!reader.IsDBNull(33)) dLFLAG = reader.GetString(33);
                if (!reader.IsDBNull(34)) aGE = reader.GetString(34);
                if (!reader.IsDBNull(35)) r1 = reader.GetString(35);
                if (!reader.IsDBNull(36)) r2 = reader.GetString(36);
                if (!reader.IsDBNull(37)) r3 = reader.GetString(37);
                if (!reader.IsDBNull(38)) nATION = reader.GetString(38);
                if (!reader.IsDBNull(39)) mEMO = reader.GetString(39);
                if (!reader.IsDBNull(40)) pHOTO = reader.GetString(40);
                if (!reader.IsDBNull(41)) dATE_COMM = reader.GetDateTime(41);
                if (!reader.IsDBNull(42)) dATE_MIGRATE = reader.GetDateTime(42);
                if (!reader.IsDBNull(43)) cARD_ISSUE = reader.GetDateTime(43);
                if (!reader.IsDBNull(44)) cARD_EXPIRE = reader.GetDateTime(44);
                if (!reader.IsDBNull(45)) cARD_NAME = reader.GetString(45);
                if (!reader.IsDBNull(46)) cARD_RECEIVE = reader.GetBoolean(46);
                if (!reader.IsDBNull(47)) cARD_ACTIVE = reader.GetBoolean(47);
                if (!reader.IsDBNull(48)) fORMER_PPNO = reader.GetString(48);
                if (!reader.IsDBNull(49)) aCREDIT = reader.GetDecimal(49);
                if (!reader.IsDBNull(50)) tERMS = reader.GetInt32(50);
                if (!reader.IsDBNull(51)) pYDISC = reader.GetFloat(51);
                if (!reader.IsDBNull(52)) dATECREATE = reader.GetDateTime(52);
                if (!reader.IsDBNull(53)) dATELCHG = reader.GetDateTime(53);
                if (!reader.IsDBNull(54)) uSERLCHG = reader.GetString(54);
                if (!reader.IsDBNull(55)) nATURE = reader.GetString(55);
                if (!reader.IsDBNull(56)) cUSTNUM = reader.GetString(56);
                if (!reader.IsDBNull(57)) bRANCH = reader.GetString(57);
                if (!reader.IsDBNull(58)) aTDAMTPUR = reader.GetDecimal(58);
                if (!reader.IsDBNull(59)) aTDAMTPAY = reader.GetDecimal(59);
                if (!reader.IsDBNull(60)) aTDAMTRET = reader.GetDecimal(60);
                if (!reader.IsDBNull(61)) aTDAMTDIS = reader.GetDecimal(61);
                if (!reader.IsDBNull(62)) pRO_DISC = reader.GetFloat(62);
                if (!reader.IsDBNull(63)) lOOID = reader.GetString(63);
                if (!reader.IsDBNull(64)) cODENUM = reader.GetString(64);
                if (!reader.IsDBNull(65)) lOYALTYNUM = reader.GetString(65);
                if (!reader.IsDBNull(66)) aGE_GROUP = reader.GetString(66);
                if (!reader.IsDBNull(67)) pROFILE = reader.GetString(67);
                if (!reader.IsDBNull(68)) mALL1 = reader.GetString(68);
                if (!reader.IsDBNull(69)) mALL2 = reader.GetString(69);
                if (!reader.IsDBNull(70)) mALL3 = reader.GetString(70);
                if (!reader.IsDBNull(71)) bRAND1 = reader.GetString(71);
                if (!reader.IsDBNull(72)) bRAND2 = reader.GetString(72);
                if (!reader.IsDBNull(73)) bRAND3 = reader.GetString(73);
                if (!reader.IsDBNull(74)) mAGAZINE1 = reader.GetString(74);
                if (!reader.IsDBNull(75)) mAGAZINE2 = reader.GetString(75);
                if (!reader.IsDBNull(76)) mAGAZINE3 = reader.GetString(76);
                if (!reader.IsDBNull(77)) cARD1 = reader.GetString(77);
                if (!reader.IsDBNull(78)) cARD2 = reader.GetString(78);
                if (!reader.IsDBNull(79)) cARD3 = reader.GetString(79);
                if (!reader.IsDBNull(80)) pHONEBOOK = reader.GetString(80);
                if (!reader.IsDBNull(81)) sTAFF_QUOTA = reader.GetDecimal(81);
                if (!reader.IsDBNull(82)) bADDONDISC = reader.GetString(82);
                if (!reader.IsDBNull(83)) rECORD_SOURCE = reader.GetString(83);
            }
        }
		
        public void Delete()
        {
            Delete(this.TempVipId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != TempVipId)
                    this.Delete();
                Update();
            }
        }

        public Guid TempVipId
        {
            get { return tempVipId; }
            set { tempVipId = value; }
        }

        public string VIPNO
        {
            get { return vIPNO; }
            set { vIPNO = value; }
        }

        public string GROUP
        {
            get { return gROUP; }
            set { gROUP = value; }
        }

        public string SALUTE
        {
            get { return sALUTE; }
            set { sALUTE = value; }
        }

        public string LNAME
        {
            get { return lNAME; }
            set { lNAME = value; }
        }

        public string FNAME
        {
            get { return fNAME; }
            set { fNAME = value; }
        }

        public string NNAME
        {
            get { return nNAME; }
            set { nNAME = value; }
        }

        public string CNAME
        {
            get { return cNAME; }
            set { cNAME = value; }
        }

        public string TITLE
        {
            get { return tITLE; }
            set { tITLE = value; }
        }

        public string COMPNAME
        {
            get { return cOMPNAME; }
            set { cOMPNAME = value; }
        }

        public string COMPNAMEC
        {
            get { return cOMPNAMEC; }
            set { cOMPNAMEC = value; }
        }

        public string ADDRESS1
        {
            get { return aDDRESS1; }
            set { aDDRESS1 = value; }
        }

        public string ADDRESS2
        {
            get { return aDDRESS2; }
            set { aDDRESS2 = value; }
        }

        public string ADDRESS3
        {
            get { return aDDRESS3; }
            set { aDDRESS3 = value; }
        }

        public string ADDRESS4
        {
            get { return aDDRESS4; }
            set { aDDRESS4 = value; }
        }

        public string ADDRESS1C
        {
            get { return aDDRESS1C; }
            set { aDDRESS1C = value; }
        }

        public string ADDRESS2C
        {
            get { return aDDRESS2C; }
            set { aDDRESS2C = value; }
        }

        public string ADDRESS3C
        {
            get { return aDDRESS3C; }
            set { aDDRESS3C = value; }
        }

        public string ADDRESS4C
        {
            get { return aDDRESS4C; }
            set { aDDRESS4C = value; }
        }

        public string TELW
        {
            get { return tELW; }
            set { tELW = value; }
        }

        public string TELH
        {
            get { return tELH; }
            set { tELH = value; }
        }

        public string TELP
        {
            get { return tELP; }
            set { tELP = value; }
        }

        public string FAX
        {
            get { return fAX; }
            set { fAX = value; }
        }

        public string TELOTHER
        {
            get { return tELOTHER; }
            set { tELOTHER = value; }
        }

        public string EMAIL
        {
            get { return eMAIL; }
            set { eMAIL = value; }
        }

        public string SEX
        {
            get { return sEX; }
            set { sEX = value; }
        }

        public string RACE
        {
            get { return rACE; }
            set { rACE = value; }
        }

        public string REMARKS
        {
            get { return rEMARKS; }
            set { rEMARKS = value; }
        }

        public float NRDISC
        {
            get { return nRDISC; }
            set { nRDISC = value; }
        }

        public string GRADE
        {
            get { return gRADE; }
            set { gRADE = value; }
        }

        public string ID_NO
        {
            get { return iD_NO; }
            set { iD_NO = value; }
        }

        public DateTime DATE_BIRTH
        {
            get { return dATE_BIRTH; }
            set { dATE_BIRTH = value; }
        }

        public DateTime DATE_REGIS
        {
            get { return dATE_REGIS; }
            set { dATE_REGIS = value; }
        }

        public string DLFLAG
        {
            get { return dLFLAG; }
            set { dLFLAG = value; }
        }

        public string AGE
        {
            get { return aGE; }
            set { aGE = value; }
        }

        public string R1
        {
            get { return r1; }
            set { r1 = value; }
        }

        public string R2
        {
            get { return r2; }
            set { r2 = value; }
        }

        public string R3
        {
            get { return r3; }
            set { r3 = value; }
        }

        public string NATION
        {
            get { return nATION; }
            set { nATION = value; }
        }

        public string MEMO
        {
            get { return mEMO; }
            set { mEMO = value; }
        }

        public string PHOTO
        {
            get { return pHOTO; }
            set { pHOTO = value; }
        }

        public DateTime DATE_COMM
        {
            get { return dATE_COMM; }
            set { dATE_COMM = value; }
        }

        public DateTime DATE_MIGRATE
        {
            get { return dATE_MIGRATE; }
            set { dATE_MIGRATE = value; }
        }

        public DateTime CARD_ISSUE
        {
            get { return cARD_ISSUE; }
            set { cARD_ISSUE = value; }
        }

        public DateTime CARD_EXPIRE
        {
            get { return cARD_EXPIRE; }
            set { cARD_EXPIRE = value; }
        }

        public string CARD_NAME
        {
            get { return cARD_NAME; }
            set { cARD_NAME = value; }
        }

        public bool CARD_RECEIVE
        {
            get { return cARD_RECEIVE; }
            set { cARD_RECEIVE = value; }
        }

        public bool CARD_ACTIVE
        {
            get { return cARD_ACTIVE; }
            set { cARD_ACTIVE = value; }
        }

        public string FORMER_PPNO
        {
            get { return fORMER_PPNO; }
            set { fORMER_PPNO = value; }
        }

        public decimal ACREDIT
        {
            get { return aCREDIT; }
            set { aCREDIT = value; }
        }

        public int TERMS
        {
            get { return tERMS; }
            set { tERMS = value; }
        }

        public float PYDISC
        {
            get { return pYDISC; }
            set { pYDISC = value; }
        }

        public DateTime DATECREATE
        {
            get { return dATECREATE; }
            set { dATECREATE = value; }
        }

        public DateTime DATELCHG
        {
            get { return dATELCHG; }
            set { dATELCHG = value; }
        }

        public string USERLCHG
        {
            get { return uSERLCHG; }
            set { uSERLCHG = value; }
        }

        public string NATURE
        {
            get { return nATURE; }
            set { nATURE = value; }
        }

        public string CUSTNUM
        {
            get { return cUSTNUM; }
            set { cUSTNUM = value; }
        }

        public string BRANCH
        {
            get { return bRANCH; }
            set { bRANCH = value; }
        }

        public decimal ATDAMTPUR
        {
            get { return aTDAMTPUR; }
            set { aTDAMTPUR = value; }
        }

        public decimal ATDAMTPAY
        {
            get { return aTDAMTPAY; }
            set { aTDAMTPAY = value; }
        }

        public decimal ATDAMTRET
        {
            get { return aTDAMTRET; }
            set { aTDAMTRET = value; }
        }

        public decimal ATDAMTDIS
        {
            get { return aTDAMTDIS; }
            set { aTDAMTDIS = value; }
        }

        public float PRO_DISC
        {
            get { return pRO_DISC; }
            set { pRO_DISC = value; }
        }

        public string LOOID
        {
            get { return lOOID; }
            set { lOOID = value; }
        }

        public string CODENUM
        {
            get { return cODENUM; }
            set { cODENUM = value; }
        }

        public string LOYALTYNUM
        {
            get { return lOYALTYNUM; }
            set { lOYALTYNUM = value; }
        }

        public string AGE_GROUP
        {
            get { return aGE_GROUP; }
            set { aGE_GROUP = value; }
        }

        public string PROFILE
        {
            get { return pROFILE; }
            set { pROFILE = value; }
        }

        public string MALL1
        {
            get { return mALL1; }
            set { mALL1 = value; }
        }

        public string MALL2
        {
            get { return mALL2; }
            set { mALL2 = value; }
        }

        public string MALL3
        {
            get { return mALL3; }
            set { mALL3 = value; }
        }

        public string BRAND1
        {
            get { return bRAND1; }
            set { bRAND1 = value; }
        }

        public string BRAND2
        {
            get { return bRAND2; }
            set { bRAND2 = value; }
        }

        public string BRAND3
        {
            get { return bRAND3; }
            set { bRAND3 = value; }
        }

        public string MAGAZINE1
        {
            get { return mAGAZINE1; }
            set { mAGAZINE1 = value; }
        }

        public string MAGAZINE2
        {
            get { return mAGAZINE2; }
            set { mAGAZINE2 = value; }
        }

        public string MAGAZINE3
        {
            get { return mAGAZINE3; }
            set { mAGAZINE3 = value; }
        }

        public string CARD1
        {
            get { return cARD1; }
            set { cARD1 = value; }
        }

        public string CARD2
        {
            get { return cARD2; }
            set { cARD2 = value; }
        }

        public string CARD3
        {
            get { return cARD3; }
            set { cARD3 = value; }
        }

        public string PHONEBOOK
        {
            get { return pHONEBOOK; }
            set { pHONEBOOK = value; }
        }

        public decimal STAFF_QUOTA
        {
            get { return sTAFF_QUOTA; }
            set { sTAFF_QUOTA = value; }
        }

        public string BADDONDISC
        {
            get { return bADDONDISC; }
            set { bADDONDISC = value; }
        }

        public string RECORD_SOURCE
        {
            get { return rECORD_SOURCE; }
            set { rECORD_SOURCE = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spMemberApply4TempVip_InsRec", "@TempVipId", out returnedValue, parameterValues);
            
            tempVipId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spMemberApply4TempVip_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[84];
            prams[0] = GetSqlParameter("@TempVipId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.TempVipId);
            prams[1] = GetSqlParameter("@VIPNO", ParameterDirection.Input, SqlDbType.VarChar, 13, this.VIPNO);
            prams[2] = GetSqlParameter("@GROUP", ParameterDirection.Input, SqlDbType.NVarChar, 6, this.GROUP);
            prams[3] = GetSqlParameter("@SALUTE", ParameterDirection.Input, SqlDbType.NVarChar, 6, this.SALUTE);
            prams[4] = GetSqlParameter("@LNAME", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.LNAME);
            prams[5] = GetSqlParameter("@FNAME", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.FNAME);
            prams[6] = GetSqlParameter("@NNAME", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.NNAME);
            prams[7] = GetSqlParameter("@CNAME", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.CNAME);
            prams[8] = GetSqlParameter("@TITLE", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.TITLE);
            prams[9] = GetSqlParameter("@COMPNAME", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.COMPNAME);
            prams[10] = GetSqlParameter("@COMPNAMEC", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.COMPNAMEC);
            prams[11] = GetSqlParameter("@ADDRESS1", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.ADDRESS1);
            prams[12] = GetSqlParameter("@ADDRESS2", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.ADDRESS2);
            prams[13] = GetSqlParameter("@ADDRESS3", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.ADDRESS3);
            prams[14] = GetSqlParameter("@ADDRESS4", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.ADDRESS4);
            prams[15] = GetSqlParameter("@ADDRESS1C", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.ADDRESS1C);
            prams[16] = GetSqlParameter("@ADDRESS2C", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.ADDRESS2C);
            prams[17] = GetSqlParameter("@ADDRESS3C", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.ADDRESS3C);
            prams[18] = GetSqlParameter("@ADDRESS4C", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.ADDRESS4C);
            prams[19] = GetSqlParameter("@TELW", ParameterDirection.Input, SqlDbType.VarChar, 20, this.TELW);
            prams[20] = GetSqlParameter("@TELH", ParameterDirection.Input, SqlDbType.VarChar, 20, this.TELH);
            prams[21] = GetSqlParameter("@TELP", ParameterDirection.Input, SqlDbType.VarChar, 20, this.TELP);
            prams[22] = GetSqlParameter("@FAX", ParameterDirection.Input, SqlDbType.VarChar, 20, this.FAX);
            prams[23] = GetSqlParameter("@TELOTHER", ParameterDirection.Input, SqlDbType.VarChar, 20, this.TELOTHER);
            prams[24] = GetSqlParameter("@EMAIL", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.EMAIL);
            prams[25] = GetSqlParameter("@SEX", ParameterDirection.Input, SqlDbType.VarChar, 1, this.SEX);
            prams[26] = GetSqlParameter("@RACE", ParameterDirection.Input, SqlDbType.VarChar, 1, this.RACE);
            prams[27] = GetSqlParameter("@REMARKS", ParameterDirection.Input, SqlDbType.NVarChar, 50, this.REMARKS);
            prams[28] = GetSqlParameter("@NRDISC", ParameterDirection.Input, SqlDbType.Real, 4, this.NRDISC);
            prams[29] = GetSqlParameter("@GRADE", ParameterDirection.Input, SqlDbType.NVarChar, 2, this.GRADE);
            prams[30] = GetSqlParameter("@ID_NO", ParameterDirection.Input, SqlDbType.VarChar, 20, this.ID_NO);
            prams[31] = GetSqlParameter("@DATE_BIRTH", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATE_BIRTH);
            prams[32] = GetSqlParameter("@DATE_REGIS", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATE_REGIS);
            prams[33] = GetSqlParameter("@DLFLAG", ParameterDirection.Input, SqlDbType.VarChar, 1, this.DLFLAG);
            prams[34] = GetSqlParameter("@AGE", ParameterDirection.Input, SqlDbType.VarChar, 1, this.AGE);
            prams[35] = GetSqlParameter("@R1", ParameterDirection.Input, SqlDbType.NVarChar, 6, this.R1);
            prams[36] = GetSqlParameter("@R2", ParameterDirection.Input, SqlDbType.NVarChar, 6, this.R2);
            prams[37] = GetSqlParameter("@R3", ParameterDirection.Input, SqlDbType.NVarChar, 6, this.R3);
            prams[38] = GetSqlParameter("@NATION", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.NATION);
            prams[39] = GetSqlParameter("@MEMO", ParameterDirection.Input, SqlDbType.NVarChar, 1023, this.MEMO);
            prams[40] = GetSqlParameter("@PHOTO", ParameterDirection.Input, SqlDbType.VarChar, 100, this.PHOTO);
            prams[41] = GetSqlParameter("@DATE_COMM", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATE_COMM);
            prams[42] = GetSqlParameter("@DATE_MIGRATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATE_MIGRATE);
            prams[43] = GetSqlParameter("@CARD_ISSUE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CARD_ISSUE);
            prams[44] = GetSqlParameter("@CARD_EXPIRE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CARD_EXPIRE);
            prams[45] = GetSqlParameter("@CARD_NAME", ParameterDirection.Input, SqlDbType.VarChar, 50, this.CARD_NAME);
            prams[46] = GetSqlParameter("@CARD_RECEIVE", ParameterDirection.Input, SqlDbType.Bit, 1, this.CARD_RECEIVE);
            prams[47] = GetSqlParameter("@CARD_ACTIVE", ParameterDirection.Input, SqlDbType.Bit, 1, this.CARD_ACTIVE);
            prams[48] = GetSqlParameter("@FORMER_PPNO", ParameterDirection.Input, SqlDbType.VarChar, 13, this.FORMER_PPNO);
            prams[49] = GetSqlParameter("@ACREDIT", ParameterDirection.Input, SqlDbType.Money, 8, this.ACREDIT);
            prams[50] = GetSqlParameter("@TERMS", ParameterDirection.Input, SqlDbType.Int, 4, this.TERMS);
            prams[51] = GetSqlParameter("@PYDISC", ParameterDirection.Input, SqlDbType.Real, 4, this.PYDISC);
            prams[52] = GetSqlParameter("@DATECREATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATECREATE);
            prams[53] = GetSqlParameter("@DATELCHG", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATELCHG);
            prams[54] = GetSqlParameter("@USERLCHG", ParameterDirection.Input, SqlDbType.VarChar, 4, this.USERLCHG);
            prams[55] = GetSqlParameter("@NATURE", ParameterDirection.Input, SqlDbType.VarChar, 6, this.NATURE);
            prams[56] = GetSqlParameter("@CUSTNUM", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CUSTNUM);
            prams[57] = GetSqlParameter("@BRANCH", ParameterDirection.Input, SqlDbType.VarChar, 4, this.BRANCH);
            prams[58] = GetSqlParameter("@ATDAMTPUR", ParameterDirection.Input, SqlDbType.Money, 8, this.ATDAMTPUR);
            prams[59] = GetSqlParameter("@ATDAMTPAY", ParameterDirection.Input, SqlDbType.Money, 8, this.ATDAMTPAY);
            prams[60] = GetSqlParameter("@ATDAMTRET", ParameterDirection.Input, SqlDbType.Money, 8, this.ATDAMTRET);
            prams[61] = GetSqlParameter("@ATDAMTDIS", ParameterDirection.Input, SqlDbType.Money, 8, this.ATDAMTDIS);
            prams[62] = GetSqlParameter("@PRO_DISC", ParameterDirection.Input, SqlDbType.Real, 4, this.PRO_DISC);
            prams[63] = GetSqlParameter("@LOOID", ParameterDirection.Input, SqlDbType.VarChar, 4, this.LOOID);
            prams[64] = GetSqlParameter("@CODENUM", ParameterDirection.Input, SqlDbType.VarChar, 20, this.CODENUM);
            prams[65] = GetSqlParameter("@LOYALTYNUM", ParameterDirection.Input, SqlDbType.VarChar, 20, this.LOYALTYNUM);
            prams[66] = GetSqlParameter("@AGE_GROUP", ParameterDirection.Input, SqlDbType.VarChar, 6, this.AGE_GROUP);
            prams[67] = GetSqlParameter("@PROFILE", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.PROFILE);
            prams[68] = GetSqlParameter("@MALL1", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MALL1);
            prams[69] = GetSqlParameter("@MALL2", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MALL2);
            prams[70] = GetSqlParameter("@MALL3", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MALL3);
            prams[71] = GetSqlParameter("@BRAND1", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.BRAND1);
            prams[72] = GetSqlParameter("@BRAND2", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.BRAND2);
            prams[73] = GetSqlParameter("@BRAND3", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.BRAND3);
            prams[74] = GetSqlParameter("@MAGAZINE1", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MAGAZINE1);
            prams[75] = GetSqlParameter("@MAGAZINE2", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MAGAZINE2);
            prams[76] = GetSqlParameter("@MAGAZINE3", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.MAGAZINE3);
            prams[77] = GetSqlParameter("@CARD1", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.CARD1);
            prams[78] = GetSqlParameter("@CARD2", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.CARD2);
            prams[79] = GetSqlParameter("@CARD3", ParameterDirection.Input, SqlDbType.NVarChar, 30, this.CARD3);
            prams[80] = GetSqlParameter("@PHONEBOOK", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.PHONEBOOK);
            prams[81] = GetSqlParameter("@STAFF_QUOTA", ParameterDirection.Input, SqlDbType.Money, 8, this.STAFF_QUOTA);
            prams[82] = GetSqlParameter("@BADDONDISC", ParameterDirection.Input, SqlDbType.VarChar, 1, this.BADDONDISC);
            prams[83] = GetSqlParameter("@RECORD_SOURCE", ParameterDirection.Input, SqlDbType.VarChar, 10, this.RECORD_SOURCE);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@TempVipId", SqlDbType.UniqueIdentifier, 16, this.TempVipId),
                GetSqlParameterWithoutDirection("@VIPNO", SqlDbType.VarChar, 13, this.VIPNO),
                GetSqlParameterWithoutDirection("@GROUP", SqlDbType.NVarChar, 6, this.GROUP),
                GetSqlParameterWithoutDirection("@SALUTE", SqlDbType.NVarChar, 6, this.SALUTE),
                GetSqlParameterWithoutDirection("@LNAME", SqlDbType.NVarChar, 50, this.LNAME),
                GetSqlParameterWithoutDirection("@FNAME", SqlDbType.NVarChar, 50, this.FNAME),
                GetSqlParameterWithoutDirection("@NNAME", SqlDbType.NVarChar, 50, this.NNAME),
                GetSqlParameterWithoutDirection("@CNAME", SqlDbType.NVarChar, 50, this.CNAME),
                GetSqlParameterWithoutDirection("@TITLE", SqlDbType.NVarChar, 50, this.TITLE),
                GetSqlParameterWithoutDirection("@COMPNAME", SqlDbType.NVarChar, 50, this.COMPNAME),
                GetSqlParameterWithoutDirection("@COMPNAMEC", SqlDbType.NVarChar, 50, this.COMPNAMEC),
                GetSqlParameterWithoutDirection("@ADDRESS1", SqlDbType.NVarChar, 50, this.ADDRESS1),
                GetSqlParameterWithoutDirection("@ADDRESS2", SqlDbType.NVarChar, 50, this.ADDRESS2),
                GetSqlParameterWithoutDirection("@ADDRESS3", SqlDbType.NVarChar, 50, this.ADDRESS3),
                GetSqlParameterWithoutDirection("@ADDRESS4", SqlDbType.NVarChar, 50, this.ADDRESS4),
                GetSqlParameterWithoutDirection("@ADDRESS1C", SqlDbType.NVarChar, 50, this.ADDRESS1C),
                GetSqlParameterWithoutDirection("@ADDRESS2C", SqlDbType.NVarChar, 50, this.ADDRESS2C),
                GetSqlParameterWithoutDirection("@ADDRESS3C", SqlDbType.NVarChar, 50, this.ADDRESS3C),
                GetSqlParameterWithoutDirection("@ADDRESS4C", SqlDbType.NVarChar, 50, this.ADDRESS4C),
                GetSqlParameterWithoutDirection("@TELW", SqlDbType.VarChar, 20, this.TELW),
                GetSqlParameterWithoutDirection("@TELH", SqlDbType.VarChar, 20, this.TELH),
                GetSqlParameterWithoutDirection("@TELP", SqlDbType.VarChar, 20, this.TELP),
                GetSqlParameterWithoutDirection("@FAX", SqlDbType.VarChar, 20, this.FAX),
                GetSqlParameterWithoutDirection("@TELOTHER", SqlDbType.VarChar, 20, this.TELOTHER),
                GetSqlParameterWithoutDirection("@EMAIL", SqlDbType.NVarChar, 50, this.EMAIL),
                GetSqlParameterWithoutDirection("@SEX", SqlDbType.VarChar, 1, this.SEX),
                GetSqlParameterWithoutDirection("@RACE", SqlDbType.VarChar, 1, this.RACE),
                GetSqlParameterWithoutDirection("@REMARKS", SqlDbType.NVarChar, 50, this.REMARKS),
                GetSqlParameterWithoutDirection("@NRDISC", SqlDbType.Real, 4, this.NRDISC),
                GetSqlParameterWithoutDirection("@GRADE", SqlDbType.NVarChar, 2, this.GRADE),
                GetSqlParameterWithoutDirection("@ID_NO", SqlDbType.VarChar, 20, this.ID_NO),
                GetSqlParameterWithoutDirection("@DATE_BIRTH", SqlDbType.DateTime, 8, this.DATE_BIRTH),
                GetSqlParameterWithoutDirection("@DATE_REGIS", SqlDbType.DateTime, 8, this.DATE_REGIS),
                GetSqlParameterWithoutDirection("@DLFLAG", SqlDbType.VarChar, 1, this.DLFLAG),
                GetSqlParameterWithoutDirection("@AGE", SqlDbType.VarChar, 1, this.AGE),
                GetSqlParameterWithoutDirection("@R1", SqlDbType.NVarChar, 6, this.R1),
                GetSqlParameterWithoutDirection("@R2", SqlDbType.NVarChar, 6, this.R2),
                GetSqlParameterWithoutDirection("@R3", SqlDbType.NVarChar, 6, this.R3),
                GetSqlParameterWithoutDirection("@NATION", SqlDbType.NVarChar, 30, this.NATION),
                GetSqlParameterWithoutDirection("@MEMO", SqlDbType.NVarChar, 1023, this.MEMO),
                GetSqlParameterWithoutDirection("@PHOTO", SqlDbType.VarChar, 100, this.PHOTO),
                GetSqlParameterWithoutDirection("@DATE_COMM", SqlDbType.DateTime, 8, this.DATE_COMM),
                GetSqlParameterWithoutDirection("@DATE_MIGRATE", SqlDbType.DateTime, 8, this.DATE_MIGRATE),
                GetSqlParameterWithoutDirection("@CARD_ISSUE", SqlDbType.DateTime, 8, this.CARD_ISSUE),
                GetSqlParameterWithoutDirection("@CARD_EXPIRE", SqlDbType.DateTime, 8, this.CARD_EXPIRE),
                GetSqlParameterWithoutDirection("@CARD_NAME", SqlDbType.VarChar, 50, this.CARD_NAME),
                GetSqlParameterWithoutDirection("@CARD_RECEIVE", SqlDbType.Bit, 1, this.CARD_RECEIVE),
                GetSqlParameterWithoutDirection("@CARD_ACTIVE", SqlDbType.Bit, 1, this.CARD_ACTIVE),
                GetSqlParameterWithoutDirection("@FORMER_PPNO", SqlDbType.VarChar, 13, this.FORMER_PPNO),
                GetSqlParameterWithoutDirection("@ACREDIT", SqlDbType.Money, 8, this.ACREDIT),
                GetSqlParameterWithoutDirection("@TERMS", SqlDbType.Int, 4, this.TERMS),
                GetSqlParameterWithoutDirection("@PYDISC", SqlDbType.Real, 4, this.PYDISC),
                GetSqlParameterWithoutDirection("@DATECREATE", SqlDbType.DateTime, 8, this.DATECREATE),
                GetSqlParameterWithoutDirection("@DATELCHG", SqlDbType.DateTime, 8, this.DATELCHG),
                GetSqlParameterWithoutDirection("@USERLCHG", SqlDbType.VarChar, 4, this.USERLCHG),
                GetSqlParameterWithoutDirection("@NATURE", SqlDbType.VarChar, 6, this.NATURE),
                GetSqlParameterWithoutDirection("@CUSTNUM", SqlDbType.VarChar, 6, this.CUSTNUM),
                GetSqlParameterWithoutDirection("@BRANCH", SqlDbType.VarChar, 4, this.BRANCH),
                GetSqlParameterWithoutDirection("@ATDAMTPUR", SqlDbType.Money, 8, this.ATDAMTPUR),
                GetSqlParameterWithoutDirection("@ATDAMTPAY", SqlDbType.Money, 8, this.ATDAMTPAY),
                GetSqlParameterWithoutDirection("@ATDAMTRET", SqlDbType.Money, 8, this.ATDAMTRET),
                GetSqlParameterWithoutDirection("@ATDAMTDIS", SqlDbType.Money, 8, this.ATDAMTDIS),
                GetSqlParameterWithoutDirection("@PRO_DISC", SqlDbType.Real, 4, this.PRO_DISC),
                GetSqlParameterWithoutDirection("@LOOID", SqlDbType.VarChar, 4, this.LOOID),
                GetSqlParameterWithoutDirection("@CODENUM", SqlDbType.VarChar, 20, this.CODENUM),
                GetSqlParameterWithoutDirection("@LOYALTYNUM", SqlDbType.VarChar, 20, this.LOYALTYNUM),
                GetSqlParameterWithoutDirection("@AGE_GROUP", SqlDbType.VarChar, 6, this.AGE_GROUP),
                GetSqlParameterWithoutDirection("@PROFILE", SqlDbType.NVarChar, 30, this.PROFILE),
                GetSqlParameterWithoutDirection("@MALL1", SqlDbType.NVarChar, 30, this.MALL1),
                GetSqlParameterWithoutDirection("@MALL2", SqlDbType.NVarChar, 30, this.MALL2),
                GetSqlParameterWithoutDirection("@MALL3", SqlDbType.NVarChar, 30, this.MALL3),
                GetSqlParameterWithoutDirection("@BRAND1", SqlDbType.NVarChar, 30, this.BRAND1),
                GetSqlParameterWithoutDirection("@BRAND2", SqlDbType.NVarChar, 30, this.BRAND2),
                GetSqlParameterWithoutDirection("@BRAND3", SqlDbType.NVarChar, 30, this.BRAND3),
                GetSqlParameterWithoutDirection("@MAGAZINE1", SqlDbType.NVarChar, 30, this.MAGAZINE1),
                GetSqlParameterWithoutDirection("@MAGAZINE2", SqlDbType.NVarChar, 30, this.MAGAZINE2),
                GetSqlParameterWithoutDirection("@MAGAZINE3", SqlDbType.NVarChar, 30, this.MAGAZINE3),
                GetSqlParameterWithoutDirection("@CARD1", SqlDbType.NVarChar, 30, this.CARD1),
                GetSqlParameterWithoutDirection("@CARD2", SqlDbType.NVarChar, 30, this.CARD2),
                GetSqlParameterWithoutDirection("@CARD3", SqlDbType.NVarChar, 30, this.CARD3),
                GetSqlParameterWithoutDirection("@PHONEBOOK", SqlDbType.NVarChar, 10, this.PHONEBOOK),
                GetSqlParameterWithoutDirection("@STAFF_QUOTA", SqlDbType.Money, 8, this.STAFF_QUOTA),
                GetSqlParameterWithoutDirection("@BADDONDISC", SqlDbType.VarChar, 1, this.BADDONDISC),
                GetSqlParameterWithoutDirection("@RECORD_SOURCE", SqlDbType.VarChar, 10, this.RECORD_SOURCE)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("tempVipId: " + tempVipId.ToString()).Append("\r\n");
            builder.Append("vIPNO: " + vIPNO.ToString()).Append("\r\n");
            builder.Append("gROUP: " + gROUP.ToString()).Append("\r\n");
            builder.Append("sALUTE: " + sALUTE.ToString()).Append("\r\n");
            builder.Append("lNAME: " + lNAME.ToString()).Append("\r\n");
            builder.Append("fNAME: " + fNAME.ToString()).Append("\r\n");
            builder.Append("nNAME: " + nNAME.ToString()).Append("\r\n");
            builder.Append("cNAME: " + cNAME.ToString()).Append("\r\n");
            builder.Append("tITLE: " + tITLE.ToString()).Append("\r\n");
            builder.Append("cOMPNAME: " + cOMPNAME.ToString()).Append("\r\n");
            builder.Append("cOMPNAMEC: " + cOMPNAMEC.ToString()).Append("\r\n");
            builder.Append("aDDRESS1: " + aDDRESS1.ToString()).Append("\r\n");
            builder.Append("aDDRESS2: " + aDDRESS2.ToString()).Append("\r\n");
            builder.Append("aDDRESS3: " + aDDRESS3.ToString()).Append("\r\n");
            builder.Append("aDDRESS4: " + aDDRESS4.ToString()).Append("\r\n");
            builder.Append("aDDRESS1C: " + aDDRESS1C.ToString()).Append("\r\n");
            builder.Append("aDDRESS2C: " + aDDRESS2C.ToString()).Append("\r\n");
            builder.Append("aDDRESS3C: " + aDDRESS3C.ToString()).Append("\r\n");
            builder.Append("aDDRESS4C: " + aDDRESS4C.ToString()).Append("\r\n");
            builder.Append("tELW: " + tELW.ToString()).Append("\r\n");
            builder.Append("tELH: " + tELH.ToString()).Append("\r\n");
            builder.Append("tELP: " + tELP.ToString()).Append("\r\n");
            builder.Append("fAX: " + fAX.ToString()).Append("\r\n");
            builder.Append("tELOTHER: " + tELOTHER.ToString()).Append("\r\n");
            builder.Append("eMAIL: " + eMAIL.ToString()).Append("\r\n");
            builder.Append("sEX: " + sEX.ToString()).Append("\r\n");
            builder.Append("rACE: " + rACE.ToString()).Append("\r\n");
            builder.Append("rEMARKS: " + rEMARKS.ToString()).Append("\r\n");
            builder.Append("nRDISC: " + nRDISC.ToString()).Append("\r\n");
            builder.Append("gRADE: " + gRADE.ToString()).Append("\r\n");
            builder.Append("iD_NO: " + iD_NO.ToString()).Append("\r\n");
            builder.Append("dATE_BIRTH: " + dATE_BIRTH.ToString()).Append("\r\n");
            builder.Append("dATE_REGIS: " + dATE_REGIS.ToString()).Append("\r\n");
            builder.Append("dLFLAG: " + dLFLAG.ToString()).Append("\r\n");
            builder.Append("aGE: " + aGE.ToString()).Append("\r\n");
            builder.Append("r1: " + r1.ToString()).Append("\r\n");
            builder.Append("r2: " + r2.ToString()).Append("\r\n");
            builder.Append("r3: " + r3.ToString()).Append("\r\n");
            builder.Append("nATION: " + nATION.ToString()).Append("\r\n");
            builder.Append("mEMO: " + mEMO.ToString()).Append("\r\n");
            builder.Append("pHOTO: " + pHOTO.ToString()).Append("\r\n");
            builder.Append("dATE_COMM: " + dATE_COMM.ToString()).Append("\r\n");
            builder.Append("dATE_MIGRATE: " + dATE_MIGRATE.ToString()).Append("\r\n");
            builder.Append("cARD_ISSUE: " + cARD_ISSUE.ToString()).Append("\r\n");
            builder.Append("cARD_EXPIRE: " + cARD_EXPIRE.ToString()).Append("\r\n");
            builder.Append("cARD_NAME: " + cARD_NAME.ToString()).Append("\r\n");
            builder.Append("cARD_RECEIVE: " + cARD_RECEIVE.ToString()).Append("\r\n");
            builder.Append("cARD_ACTIVE: " + cARD_ACTIVE.ToString()).Append("\r\n");
            builder.Append("fORMER_PPNO: " + fORMER_PPNO.ToString()).Append("\r\n");
            builder.Append("aCREDIT: " + aCREDIT.ToString()).Append("\r\n");
            builder.Append("tERMS: " + tERMS.ToString()).Append("\r\n");
            builder.Append("pYDISC: " + pYDISC.ToString()).Append("\r\n");
            builder.Append("dATECREATE: " + dATECREATE.ToString()).Append("\r\n");
            builder.Append("dATELCHG: " + dATELCHG.ToString()).Append("\r\n");
            builder.Append("uSERLCHG: " + uSERLCHG.ToString()).Append("\r\n");
            builder.Append("nATURE: " + nATURE.ToString()).Append("\r\n");
            builder.Append("cUSTNUM: " + cUSTNUM.ToString()).Append("\r\n");
            builder.Append("bRANCH: " + bRANCH.ToString()).Append("\r\n");
            builder.Append("aTDAMTPUR: " + aTDAMTPUR.ToString()).Append("\r\n");
            builder.Append("aTDAMTPAY: " + aTDAMTPAY.ToString()).Append("\r\n");
            builder.Append("aTDAMTRET: " + aTDAMTRET.ToString()).Append("\r\n");
            builder.Append("aTDAMTDIS: " + aTDAMTDIS.ToString()).Append("\r\n");
            builder.Append("pRO_DISC: " + pRO_DISC.ToString()).Append("\r\n");
            builder.Append("lOOID: " + lOOID.ToString()).Append("\r\n");
            builder.Append("cODENUM: " + cODENUM.ToString()).Append("\r\n");
            builder.Append("lOYALTYNUM: " + lOYALTYNUM.ToString()).Append("\r\n");
            builder.Append("aGE_GROUP: " + aGE_GROUP.ToString()).Append("\r\n");
            builder.Append("pROFILE: " + pROFILE.ToString()).Append("\r\n");
            builder.Append("mALL1: " + mALL1.ToString()).Append("\r\n");
            builder.Append("mALL2: " + mALL2.ToString()).Append("\r\n");
            builder.Append("mALL3: " + mALL3.ToString()).Append("\r\n");
            builder.Append("bRAND1: " + bRAND1.ToString()).Append("\r\n");
            builder.Append("bRAND2: " + bRAND2.ToString()).Append("\r\n");
            builder.Append("bRAND3: " + bRAND3.ToString()).Append("\r\n");
            builder.Append("mAGAZINE1: " + mAGAZINE1.ToString()).Append("\r\n");
            builder.Append("mAGAZINE2: " + mAGAZINE2.ToString()).Append("\r\n");
            builder.Append("mAGAZINE3: " + mAGAZINE3.ToString()).Append("\r\n");
            builder.Append("cARD1: " + cARD1.ToString()).Append("\r\n");
            builder.Append("cARD2: " + cARD2.ToString()).Append("\r\n");
            builder.Append("cARD3: " + cARD3.ToString()).Append("\r\n");
            builder.Append("pHONEBOOK: " + pHONEBOOK.ToString()).Append("\r\n");
            builder.Append("sTAFF_QUOTA: " + sTAFF_QUOTA.ToString()).Append("\r\n");
            builder.Append("bADDONDISC: " + bADDONDISC.ToString()).Append("\r\n");
            builder.Append("rECORD_SOURCE: " + rECORD_SOURCE.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			MemberApply4TempVipCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = MemberApply4TempVip.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = MemberApply4TempVip.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (MemberApply4TempVip item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = IgnorThis(item, ParentFilter);
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.TempVipId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(MemberApply4TempVip target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
			string filterField = (string)pi.GetValue(target, null);
			if (filterField.ToLower() == parsed[1].ToLower())
			{
				result = false;
			}
			return result;
		}

		private static string GetFormatedText(MemberApply4TempVip target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="MemberApply4TempVip">MemberApply4TempVip</see> objects.
    /// </summary>
    public class MemberApply4TempVipCollection : BindingList< MemberApply4TempVip>
    {
	}
}
