using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.FepBatchHeader.
    /// Date Created:   2020-08-09 02:14:10
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class FepBatchHeader
    {
        private Guid key = Guid.Empty;
        private Guid headerId = Guid.Empty;
        private string txType = String.Empty;
        private string txNumber = String.Empty;
        private DateTime txDate = DateTime.Parse("1900-1-1");
        private string sHOP = String.Empty;
        private string tERMINAL = String.Empty;
        private string fTSHOP = String.Empty;
        private decimal tOTAMT;
        private decimal dEPAMT;
        private string sTAFF1 = String.Empty;
        private string sTAFF2 = String.Empty;
        private string vIPNO = String.Empty;
        private string sUPPNUM = String.Empty;
        private string rEF = String.Empty;
        private string rEMARKS = String.Empty;
        private string sTATUS = String.Empty;
        private string oPERATOR = String.Empty;
        private DateTime rECEIVEDATE = DateTime.Parse("1900-1-1");
        private DateTime pOSTDATE = DateTime.Parse("1900-1-1");
        private string pOSTUSER = String.Empty;
        private string eRRORTYPE = String.Empty;
        private bool eXPORTFLAG;
        private DateTime eXP_DELIVER = DateTime.Parse("1900-1-1");
        private string cONFIRM_TRF = String.Empty;
        private DateTime cONFIRM_TRF_LASTUPDATE = DateTime.Parse("1900-1-1");
        private string cONFIRM_TRF_LASTUSER = String.Empty;
        private string sEX = String.Empty;
        private string rACE = String.Empty;
        private string aGE = String.Empty;
        private string sTK_XCHG = String.Empty;
        private DateTime pICKUP_DATE = DateTime.Parse("1900-1-1");
        private string pICKUP_LOCNO = String.Empty;
        private string pOSFLAG = String.Empty;
        private string eVT_CODE = String.Empty;
        private decimal tRNAMT_TTLSALES;
        private decimal tRNAMT_NETSALES;
        private decimal tRNAMT_TAX;
        private decimal tAX_RATE;
        private string uNIONINVOICE_STARTNUM = String.Empty;
        private string uNIONINVOICE_ENDNUM = String.Empty;
        private string uNIONINVOICE_CUSTNUM = String.Empty;
        private string fLAG_DELIVERY = String.Empty;
        private DateTime dELI_DATE = DateTime.Parse("1900-1-1");
        private string dELI_PERIOD = String.Empty;
        private string dELI_REMARKS = String.Empty;
        private string dELI_ADDR1 = String.Empty;
        private string dELI_ADDR2 = String.Empty;
        private string dELI_ADDR3 = String.Empty;
        private string dELI_ADDR4 = String.Empty;
        private string dELI_TEL = String.Empty;
        private string dELI_FAX = String.Empty;
        private string dELI_TLX = String.Empty;
        private string dELI_PSN = String.Empty;
        private string cONFIRM_DELIVERY = String.Empty;
        private DateTime cONFIRM_DATE = DateTime.Parse("1900-1-1");
        private string cONFIRM_USER = String.Empty;
        private string aNALYSIS_CODE01 = String.Empty;
        private string aNALYSIS_CODE02 = String.Empty;
        private string aNALYSIS_CODE03 = String.Empty;
        private string aNALYSIS_CODE04 = String.Empty;
        private string aNALYSIS_CODE05 = String.Empty;
        private string aNALYSIS_CODE06 = String.Empty;
        private string aNALYSIS_CODE07 = String.Empty;
        private string aNALYSIS_CODE08 = String.Empty;
        private string aNALYSIS_CODE09 = String.Empty;
        private string aNALYSIS_CODE10 = String.Empty;
        private bool exportFEPFlag;
        private string tRF_REASON = String.Empty;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private Guid createdBy = Guid.Empty;
        private DateTime modifiedOn = DateTime.Parse("1900-1-1");
        private Guid modifiedBy = Guid.Empty;
        private bool retired;
        private DateTime retiredOn = DateTime.Parse("1900-1-1");
        private Guid retiredBy = Guid.Empty;

        /// <summary>
        /// Initialize an new empty FepBatchHeader object.
        /// </summary>
        public FepBatchHeader()
        {
        }
		
        /// <summary>
        /// Initialize a new FepBatchHeader object with the given parameters.
        /// </summary>
        public FepBatchHeader(Guid headerId, string txType, string txNumber, DateTime txDate, string sHOP, string tERMINAL, string fTSHOP, decimal tOTAMT, decimal dEPAMT, string sTAFF1, string sTAFF2, string vIPNO, string sUPPNUM, string rEF, string rEMARKS, string sTATUS, string oPERATOR, DateTime rECEIVEDATE, DateTime pOSTDATE, string pOSTUSER, string eRRORTYPE, bool eXPORTFLAG, DateTime eXP_DELIVER, string cONFIRM_TRF, DateTime cONFIRM_TRF_LASTUPDATE, string cONFIRM_TRF_LASTUSER, string sEX, string rACE, string aGE, string sTK_XCHG, DateTime pICKUP_DATE, string pICKUP_LOCNO, string pOSFLAG, string eVT_CODE, decimal tRNAMT_TTLSALES, decimal tRNAMT_NETSALES, decimal tRNAMT_TAX, decimal tAX_RATE, string uNIONINVOICE_STARTNUM, string uNIONINVOICE_ENDNUM, string uNIONINVOICE_CUSTNUM, string fLAG_DELIVERY, DateTime dELI_DATE, string dELI_PERIOD, string dELI_REMARKS, string dELI_ADDR1, string dELI_ADDR2, string dELI_ADDR3, string dELI_ADDR4, string dELI_TEL, string dELI_FAX, string dELI_TLX, string dELI_PSN, string cONFIRM_DELIVERY, DateTime cONFIRM_DATE, string cONFIRM_USER, string aNALYSIS_CODE01, string aNALYSIS_CODE02, string aNALYSIS_CODE03, string aNALYSIS_CODE04, string aNALYSIS_CODE05, string aNALYSIS_CODE06, string aNALYSIS_CODE07, string aNALYSIS_CODE08, string aNALYSIS_CODE09, string aNALYSIS_CODE10, bool exportFEPFlag, string tRF_REASON, DateTime createdOn, Guid createdBy, DateTime modifiedOn, Guid modifiedBy, bool retired, DateTime retiredOn, Guid retiredBy)
        {
                this.headerId = headerId;
                this.txType = txType;
                this.txNumber = txNumber;
                this.txDate = txDate;
                this.sHOP = sHOP;
                this.tERMINAL = tERMINAL;
                this.fTSHOP = fTSHOP;
                this.tOTAMT = tOTAMT;
                this.dEPAMT = dEPAMT;
                this.sTAFF1 = sTAFF1;
                this.sTAFF2 = sTAFF2;
                this.vIPNO = vIPNO;
                this.sUPPNUM = sUPPNUM;
                this.rEF = rEF;
                this.rEMARKS = rEMARKS;
                this.sTATUS = sTATUS;
                this.oPERATOR = oPERATOR;
                this.rECEIVEDATE = rECEIVEDATE;
                this.pOSTDATE = pOSTDATE;
                this.pOSTUSER = pOSTUSER;
                this.eRRORTYPE = eRRORTYPE;
                this.eXPORTFLAG = eXPORTFLAG;
                this.eXP_DELIVER = eXP_DELIVER;
                this.cONFIRM_TRF = cONFIRM_TRF;
                this.cONFIRM_TRF_LASTUPDATE = cONFIRM_TRF_LASTUPDATE;
                this.cONFIRM_TRF_LASTUSER = cONFIRM_TRF_LASTUSER;
                this.sEX = sEX;
                this.rACE = rACE;
                this.aGE = aGE;
                this.sTK_XCHG = sTK_XCHG;
                this.pICKUP_DATE = pICKUP_DATE;
                this.pICKUP_LOCNO = pICKUP_LOCNO;
                this.pOSFLAG = pOSFLAG;
                this.eVT_CODE = eVT_CODE;
                this.tRNAMT_TTLSALES = tRNAMT_TTLSALES;
                this.tRNAMT_NETSALES = tRNAMT_NETSALES;
                this.tRNAMT_TAX = tRNAMT_TAX;
                this.tAX_RATE = tAX_RATE;
                this.uNIONINVOICE_STARTNUM = uNIONINVOICE_STARTNUM;
                this.uNIONINVOICE_ENDNUM = uNIONINVOICE_ENDNUM;
                this.uNIONINVOICE_CUSTNUM = uNIONINVOICE_CUSTNUM;
                this.fLAG_DELIVERY = fLAG_DELIVERY;
                this.dELI_DATE = dELI_DATE;
                this.dELI_PERIOD = dELI_PERIOD;
                this.dELI_REMARKS = dELI_REMARKS;
                this.dELI_ADDR1 = dELI_ADDR1;
                this.dELI_ADDR2 = dELI_ADDR2;
                this.dELI_ADDR3 = dELI_ADDR3;
                this.dELI_ADDR4 = dELI_ADDR4;
                this.dELI_TEL = dELI_TEL;
                this.dELI_FAX = dELI_FAX;
                this.dELI_TLX = dELI_TLX;
                this.dELI_PSN = dELI_PSN;
                this.cONFIRM_DELIVERY = cONFIRM_DELIVERY;
                this.cONFIRM_DATE = cONFIRM_DATE;
                this.cONFIRM_USER = cONFIRM_USER;
                this.aNALYSIS_CODE01 = aNALYSIS_CODE01;
                this.aNALYSIS_CODE02 = aNALYSIS_CODE02;
                this.aNALYSIS_CODE03 = aNALYSIS_CODE03;
                this.aNALYSIS_CODE04 = aNALYSIS_CODE04;
                this.aNALYSIS_CODE05 = aNALYSIS_CODE05;
                this.aNALYSIS_CODE06 = aNALYSIS_CODE06;
                this.aNALYSIS_CODE07 = aNALYSIS_CODE07;
                this.aNALYSIS_CODE08 = aNALYSIS_CODE08;
                this.aNALYSIS_CODE09 = aNALYSIS_CODE09;
                this.aNALYSIS_CODE10 = aNALYSIS_CODE10;
                this.exportFEPFlag = exportFEPFlag;
                this.tRF_REASON = tRF_REASON;
                this.createdOn = createdOn;
                this.createdBy = createdBy;
                this.modifiedOn = modifiedOn;
                this.modifiedBy = modifiedBy;
                this.retired = retired;
                this.retiredOn = retiredOn;
                this.retiredBy = retiredBy;
        }	
		
        /// <summary>
        /// Loads a FepBatchHeader object from the database using the given HeaderId
        /// </summary>
        /// <param name="headerId">The primary key value</param>
        /// <returns>A FepBatchHeader object</returns>
        public static FepBatchHeader Load(Guid headerId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@HeaderId", headerId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spFepBatchHeader_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    FepBatchHeader result = new FepBatchHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a FepBatchHeader object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A FepBatchHeader object</returns>
        public static FepBatchHeader LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spFepBatchHeader_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    FepBatchHeader result = new FepBatchHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of FepBatchHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the FepBatchHeader objects in the database.</returns>
        public static FepBatchHeaderCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spFepBatchHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of FepBatchHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the FepBatchHeader objects in the database ordered by the columns specified.</returns>
        public static FepBatchHeaderCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spFepBatchHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of FepBatchHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the FepBatchHeader objects in the database.</returns>
        public static FepBatchHeaderCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spFepBatchHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of FepBatchHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the FepBatchHeader objects in the database ordered by the columns specified.</returns>
        public static FepBatchHeaderCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spFepBatchHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of FepBatchHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the FepBatchHeader objects in the database.</returns>
        public static FepBatchHeaderCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            FepBatchHeaderCollection result = new FepBatchHeaderCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    FepBatchHeader tmp = new FepBatchHeader();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a FepBatchHeader object from the database.
        /// </summary>
        /// <param name="headerId">The primary key value</param>
        public static void Delete(Guid headerId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@HeaderId", headerId) };
            SqlHelper.Default.ExecuteNonQuery("spFepBatchHeader_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) headerId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) txType = reader.GetString(1);
                if (!reader.IsDBNull(2)) txNumber = reader.GetString(2);
                if (!reader.IsDBNull(3)) txDate = reader.GetDateTime(3);
                if (!reader.IsDBNull(4)) sHOP = reader.GetString(4);
                if (!reader.IsDBNull(5)) tERMINAL = reader.GetString(5);
                if (!reader.IsDBNull(6)) fTSHOP = reader.GetString(6);
                if (!reader.IsDBNull(7)) tOTAMT = reader.GetDecimal(7);
                if (!reader.IsDBNull(8)) dEPAMT = reader.GetDecimal(8);
                if (!reader.IsDBNull(9)) sTAFF1 = reader.GetString(9);
                if (!reader.IsDBNull(10)) sTAFF2 = reader.GetString(10);
                if (!reader.IsDBNull(11)) vIPNO = reader.GetString(11);
                if (!reader.IsDBNull(12)) sUPPNUM = reader.GetString(12);
                if (!reader.IsDBNull(13)) rEF = reader.GetString(13);
                if (!reader.IsDBNull(14)) rEMARKS = reader.GetString(14);
                if (!reader.IsDBNull(15)) sTATUS = reader.GetString(15);
                if (!reader.IsDBNull(16)) oPERATOR = reader.GetString(16);
                if (!reader.IsDBNull(17)) rECEIVEDATE = reader.GetDateTime(17);
                if (!reader.IsDBNull(18)) pOSTDATE = reader.GetDateTime(18);
                if (!reader.IsDBNull(19)) pOSTUSER = reader.GetString(19);
                if (!reader.IsDBNull(20)) eRRORTYPE = reader.GetString(20);
                if (!reader.IsDBNull(21)) eXPORTFLAG = reader.GetBoolean(21);
                if (!reader.IsDBNull(22)) eXP_DELIVER = reader.GetDateTime(22);
                if (!reader.IsDBNull(23)) cONFIRM_TRF = reader.GetString(23);
                if (!reader.IsDBNull(24)) cONFIRM_TRF_LASTUPDATE = reader.GetDateTime(24);
                if (!reader.IsDBNull(25)) cONFIRM_TRF_LASTUSER = reader.GetString(25);
                if (!reader.IsDBNull(26)) sEX = reader.GetString(26);
                if (!reader.IsDBNull(27)) rACE = reader.GetString(27);
                if (!reader.IsDBNull(28)) aGE = reader.GetString(28);
                if (!reader.IsDBNull(29)) sTK_XCHG = reader.GetString(29);
                if (!reader.IsDBNull(30)) pICKUP_DATE = reader.GetDateTime(30);
                if (!reader.IsDBNull(31)) pICKUP_LOCNO = reader.GetString(31);
                if (!reader.IsDBNull(32)) pOSFLAG = reader.GetString(32);
                if (!reader.IsDBNull(33)) eVT_CODE = reader.GetString(33);
                if (!reader.IsDBNull(34)) tRNAMT_TTLSALES = reader.GetDecimal(34);
                if (!reader.IsDBNull(35)) tRNAMT_NETSALES = reader.GetDecimal(35);
                if (!reader.IsDBNull(36)) tRNAMT_TAX = reader.GetDecimal(36);
                if (!reader.IsDBNull(37)) tAX_RATE = reader.GetDecimal(37);
                if (!reader.IsDBNull(38)) uNIONINVOICE_STARTNUM = reader.GetString(38);
                if (!reader.IsDBNull(39)) uNIONINVOICE_ENDNUM = reader.GetString(39);
                if (!reader.IsDBNull(40)) uNIONINVOICE_CUSTNUM = reader.GetString(40);
                if (!reader.IsDBNull(41)) fLAG_DELIVERY = reader.GetString(41);
                if (!reader.IsDBNull(42)) dELI_DATE = reader.GetDateTime(42);
                if (!reader.IsDBNull(43)) dELI_PERIOD = reader.GetString(43);
                if (!reader.IsDBNull(44)) dELI_REMARKS = reader.GetString(44);
                if (!reader.IsDBNull(45)) dELI_ADDR1 = reader.GetString(45);
                if (!reader.IsDBNull(46)) dELI_ADDR2 = reader.GetString(46);
                if (!reader.IsDBNull(47)) dELI_ADDR3 = reader.GetString(47);
                if (!reader.IsDBNull(48)) dELI_ADDR4 = reader.GetString(48);
                if (!reader.IsDBNull(49)) dELI_TEL = reader.GetString(49);
                if (!reader.IsDBNull(50)) dELI_FAX = reader.GetString(50);
                if (!reader.IsDBNull(51)) dELI_TLX = reader.GetString(51);
                if (!reader.IsDBNull(52)) dELI_PSN = reader.GetString(52);
                if (!reader.IsDBNull(53)) cONFIRM_DELIVERY = reader.GetString(53);
                if (!reader.IsDBNull(54)) cONFIRM_DATE = reader.GetDateTime(54);
                if (!reader.IsDBNull(55)) cONFIRM_USER = reader.GetString(55);
                if (!reader.IsDBNull(56)) aNALYSIS_CODE01 = reader.GetString(56);
                if (!reader.IsDBNull(57)) aNALYSIS_CODE02 = reader.GetString(57);
                if (!reader.IsDBNull(58)) aNALYSIS_CODE03 = reader.GetString(58);
                if (!reader.IsDBNull(59)) aNALYSIS_CODE04 = reader.GetString(59);
                if (!reader.IsDBNull(60)) aNALYSIS_CODE05 = reader.GetString(60);
                if (!reader.IsDBNull(61)) aNALYSIS_CODE06 = reader.GetString(61);
                if (!reader.IsDBNull(62)) aNALYSIS_CODE07 = reader.GetString(62);
                if (!reader.IsDBNull(63)) aNALYSIS_CODE08 = reader.GetString(63);
                if (!reader.IsDBNull(64)) aNALYSIS_CODE09 = reader.GetString(64);
                if (!reader.IsDBNull(65)) aNALYSIS_CODE10 = reader.GetString(65);
                if (!reader.IsDBNull(66)) exportFEPFlag = reader.GetBoolean(66);
                if (!reader.IsDBNull(67)) tRF_REASON = reader.GetString(67);
                if (!reader.IsDBNull(68)) createdOn = reader.GetDateTime(68);
                if (!reader.IsDBNull(69)) createdBy = reader.GetGuid(69);
                if (!reader.IsDBNull(70)) modifiedOn = reader.GetDateTime(70);
                if (!reader.IsDBNull(71)) modifiedBy = reader.GetGuid(71);
                if (!reader.IsDBNull(72)) retired = reader.GetBoolean(72);
                if (!reader.IsDBNull(73)) retiredOn = reader.GetDateTime(73);
                if (!reader.IsDBNull(74)) retiredBy = reader.GetGuid(74);
            }
        }
		
        public void Delete()
        {
            Delete(this.HeaderId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != HeaderId)
                    this.Delete();
                Update();
            }
        }

        public Guid HeaderId
        {
            get { return headerId; }
            set { headerId = value; }
        }

        public string TxType
        {
            get { return txType; }
            set { txType = value; }
        }

        public string TxNumber
        {
            get { return txNumber; }
            set { txNumber = value; }
        }

        public DateTime TxDate
        {
            get { return txDate; }
            set { txDate = value; }
        }

        public string SHOP
        {
            get { return sHOP; }
            set { sHOP = value; }
        }

        public string TERMINAL
        {
            get { return tERMINAL; }
            set { tERMINAL = value; }
        }

        public string FTSHOP
        {
            get { return fTSHOP; }
            set { fTSHOP = value; }
        }

        public decimal TOTAMT
        {
            get { return tOTAMT; }
            set { tOTAMT = value; }
        }

        public decimal DEPAMT
        {
            get { return dEPAMT; }
            set { dEPAMT = value; }
        }

        public string STAFF1
        {
            get { return sTAFF1; }
            set { sTAFF1 = value; }
        }

        public string STAFF2
        {
            get { return sTAFF2; }
            set { sTAFF2 = value; }
        }

        public string VIPNO
        {
            get { return vIPNO; }
            set { vIPNO = value; }
        }

        public string SUPPNUM
        {
            get { return sUPPNUM; }
            set { sUPPNUM = value; }
        }

        public string REF
        {
            get { return rEF; }
            set { rEF = value; }
        }

        public string REMARKS
        {
            get { return rEMARKS; }
            set { rEMARKS = value; }
        }

        public string STATUS
        {
            get { return sTATUS; }
            set { sTATUS = value; }
        }

        public string OPERATOR
        {
            get { return oPERATOR; }
            set { oPERATOR = value; }
        }

        public DateTime RECEIVEDATE
        {
            get { return rECEIVEDATE; }
            set { rECEIVEDATE = value; }
        }

        public DateTime POSTDATE
        {
            get { return pOSTDATE; }
            set { pOSTDATE = value; }
        }

        public string POSTUSER
        {
            get { return pOSTUSER; }
            set { pOSTUSER = value; }
        }

        public string ERRORTYPE
        {
            get { return eRRORTYPE; }
            set { eRRORTYPE = value; }
        }

        public bool EXPORTFLAG
        {
            get { return eXPORTFLAG; }
            set { eXPORTFLAG = value; }
        }

        public DateTime EXP_DELIVER
        {
            get { return eXP_DELIVER; }
            set { eXP_DELIVER = value; }
        }

        public string CONFIRM_TRF
        {
            get { return cONFIRM_TRF; }
            set { cONFIRM_TRF = value; }
        }

        public DateTime CONFIRM_TRF_LASTUPDATE
        {
            get { return cONFIRM_TRF_LASTUPDATE; }
            set { cONFIRM_TRF_LASTUPDATE = value; }
        }

        public string CONFIRM_TRF_LASTUSER
        {
            get { return cONFIRM_TRF_LASTUSER; }
            set { cONFIRM_TRF_LASTUSER = value; }
        }

        public string SEX
        {
            get { return sEX; }
            set { sEX = value; }
        }

        public string RACE
        {
            get { return rACE; }
            set { rACE = value; }
        }

        public string AGE
        {
            get { return aGE; }
            set { aGE = value; }
        }

        public string STK_XCHG
        {
            get { return sTK_XCHG; }
            set { sTK_XCHG = value; }
        }

        public DateTime PICKUP_DATE
        {
            get { return pICKUP_DATE; }
            set { pICKUP_DATE = value; }
        }

        public string PICKUP_LOCNO
        {
            get { return pICKUP_LOCNO; }
            set { pICKUP_LOCNO = value; }
        }

        public string POSFLAG
        {
            get { return pOSFLAG; }
            set { pOSFLAG = value; }
        }

        public string EVT_CODE
        {
            get { return eVT_CODE; }
            set { eVT_CODE = value; }
        }

        public decimal TRNAMT_TTLSALES
        {
            get { return tRNAMT_TTLSALES; }
            set { tRNAMT_TTLSALES = value; }
        }

        public decimal TRNAMT_NETSALES
        {
            get { return tRNAMT_NETSALES; }
            set { tRNAMT_NETSALES = value; }
        }

        public decimal TRNAMT_TAX
        {
            get { return tRNAMT_TAX; }
            set { tRNAMT_TAX = value; }
        }

        public decimal TAX_RATE
        {
            get { return tAX_RATE; }
            set { tAX_RATE = value; }
        }

        public string UNIONINVOICE_STARTNUM
        {
            get { return uNIONINVOICE_STARTNUM; }
            set { uNIONINVOICE_STARTNUM = value; }
        }

        public string UNIONINVOICE_ENDNUM
        {
            get { return uNIONINVOICE_ENDNUM; }
            set { uNIONINVOICE_ENDNUM = value; }
        }

        public string UNIONINVOICE_CUSTNUM
        {
            get { return uNIONINVOICE_CUSTNUM; }
            set { uNIONINVOICE_CUSTNUM = value; }
        }

        public string FLAG_DELIVERY
        {
            get { return fLAG_DELIVERY; }
            set { fLAG_DELIVERY = value; }
        }

        public DateTime DELI_DATE
        {
            get { return dELI_DATE; }
            set { dELI_DATE = value; }
        }

        public string DELI_PERIOD
        {
            get { return dELI_PERIOD; }
            set { dELI_PERIOD = value; }
        }

        public string DELI_REMARKS
        {
            get { return dELI_REMARKS; }
            set { dELI_REMARKS = value; }
        }

        public string DELI_ADDR1
        {
            get { return dELI_ADDR1; }
            set { dELI_ADDR1 = value; }
        }

        public string DELI_ADDR2
        {
            get { return dELI_ADDR2; }
            set { dELI_ADDR2 = value; }
        }

        public string DELI_ADDR3
        {
            get { return dELI_ADDR3; }
            set { dELI_ADDR3 = value; }
        }

        public string DELI_ADDR4
        {
            get { return dELI_ADDR4; }
            set { dELI_ADDR4 = value; }
        }

        public string DELI_TEL
        {
            get { return dELI_TEL; }
            set { dELI_TEL = value; }
        }

        public string DELI_FAX
        {
            get { return dELI_FAX; }
            set { dELI_FAX = value; }
        }

        public string DELI_TLX
        {
            get { return dELI_TLX; }
            set { dELI_TLX = value; }
        }

        public string DELI_PSN
        {
            get { return dELI_PSN; }
            set { dELI_PSN = value; }
        }

        public string CONFIRM_DELIVERY
        {
            get { return cONFIRM_DELIVERY; }
            set { cONFIRM_DELIVERY = value; }
        }

        public DateTime CONFIRM_DATE
        {
            get { return cONFIRM_DATE; }
            set { cONFIRM_DATE = value; }
        }

        public string CONFIRM_USER
        {
            get { return cONFIRM_USER; }
            set { cONFIRM_USER = value; }
        }

        public string ANALYSIS_CODE01
        {
            get { return aNALYSIS_CODE01; }
            set { aNALYSIS_CODE01 = value; }
        }

        public string ANALYSIS_CODE02
        {
            get { return aNALYSIS_CODE02; }
            set { aNALYSIS_CODE02 = value; }
        }

        public string ANALYSIS_CODE03
        {
            get { return aNALYSIS_CODE03; }
            set { aNALYSIS_CODE03 = value; }
        }

        public string ANALYSIS_CODE04
        {
            get { return aNALYSIS_CODE04; }
            set { aNALYSIS_CODE04 = value; }
        }

        public string ANALYSIS_CODE05
        {
            get { return aNALYSIS_CODE05; }
            set { aNALYSIS_CODE05 = value; }
        }

        public string ANALYSIS_CODE06
        {
            get { return aNALYSIS_CODE06; }
            set { aNALYSIS_CODE06 = value; }
        }

        public string ANALYSIS_CODE07
        {
            get { return aNALYSIS_CODE07; }
            set { aNALYSIS_CODE07 = value; }
        }

        public string ANALYSIS_CODE08
        {
            get { return aNALYSIS_CODE08; }
            set { aNALYSIS_CODE08 = value; }
        }

        public string ANALYSIS_CODE09
        {
            get { return aNALYSIS_CODE09; }
            set { aNALYSIS_CODE09 = value; }
        }

        public string ANALYSIS_CODE10
        {
            get { return aNALYSIS_CODE10; }
            set { aNALYSIS_CODE10 = value; }
        }

        public bool ExportFEPFlag
        {
            get { return exportFEPFlag; }
            set { exportFEPFlag = value; }
        }

        public string TRF_REASON
        {
            get { return tRF_REASON; }
            set { tRF_REASON = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public Guid CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime ModifiedOn
        {
            get { return modifiedOn; }
            set { modifiedOn = value; }
        }

        public Guid ModifiedBy
        {
            get { return modifiedBy; }
            set { modifiedBy = value; }
        }

        public bool Retired
        {
            get { return retired; }
            set { retired = value; }
        }

        public DateTime RetiredOn
        {
            get { return retiredOn; }
            set { retiredOn = value; }
        }

        public Guid RetiredBy
        {
            get { return retiredBy; }
            set { retiredBy = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spFepBatchHeader_InsRec", "@HeaderId", out returnedValue, parameterValues);
            
            headerId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spFepBatchHeader_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[75];
            prams[0] = GetSqlParameter("@HeaderId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.HeaderId);
            prams[1] = GetSqlParameter("@TxType", ParameterDirection.Input, SqlDbType.VarChar, 3, this.TxType);
            prams[2] = GetSqlParameter("@TxNumber", ParameterDirection.Input, SqlDbType.VarChar, 12, this.TxNumber);
            prams[3] = GetSqlParameter("@TxDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.TxDate);
            prams[4] = GetSqlParameter("@SHOP", ParameterDirection.Input, SqlDbType.VarChar, 4, this.SHOP);
            prams[5] = GetSqlParameter("@TERMINAL", ParameterDirection.Input, SqlDbType.VarChar, 2, this.TERMINAL);
            prams[6] = GetSqlParameter("@FTSHOP", ParameterDirection.Input, SqlDbType.VarChar, 4, this.FTSHOP);
            prams[7] = GetSqlParameter("@TOTAMT", ParameterDirection.Input, SqlDbType.Money, 8, this.TOTAMT);
            prams[8] = GetSqlParameter("@DEPAMT", ParameterDirection.Input, SqlDbType.Money, 8, this.DEPAMT);
            prams[9] = GetSqlParameter("@STAFF1", ParameterDirection.Input, SqlDbType.VarChar, 4, this.STAFF1);
            prams[10] = GetSqlParameter("@STAFF2", ParameterDirection.Input, SqlDbType.VarChar, 4, this.STAFF2);
            prams[11] = GetSqlParameter("@VIPNO", ParameterDirection.Input, SqlDbType.VarChar, 13, this.VIPNO);
            prams[12] = GetSqlParameter("@SUPPNUM", ParameterDirection.Input, SqlDbType.VarChar, 6, this.SUPPNUM);
            prams[13] = GetSqlParameter("@REF", ParameterDirection.Input, SqlDbType.VarChar, 12, this.REF);
            prams[14] = GetSqlParameter("@REMARKS", ParameterDirection.Input, SqlDbType.VarChar, 10, this.REMARKS);
            prams[15] = GetSqlParameter("@STATUS", ParameterDirection.Input, SqlDbType.VarChar, 1, this.STATUS);
            prams[16] = GetSqlParameter("@OPERATOR", ParameterDirection.Input, SqlDbType.VarChar, 4, this.OPERATOR);
            prams[17] = GetSqlParameter("@RECEIVEDATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RECEIVEDATE);
            prams[18] = GetSqlParameter("@POSTDATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.POSTDATE);
            prams[19] = GetSqlParameter("@POSTUSER", ParameterDirection.Input, SqlDbType.VarChar, 4, this.POSTUSER);
            prams[20] = GetSqlParameter("@ERRORTYPE", ParameterDirection.Input, SqlDbType.VarChar, 5, this.ERRORTYPE);
            prams[21] = GetSqlParameter("@EXPORTFLAG", ParameterDirection.Input, SqlDbType.Bit, 1, this.EXPORTFLAG);
            prams[22] = GetSqlParameter("@EXP_DELIVER", ParameterDirection.Input, SqlDbType.DateTime, 8, this.EXP_DELIVER);
            prams[23] = GetSqlParameter("@CONFIRM_TRF", ParameterDirection.Input, SqlDbType.VarChar, 1, this.CONFIRM_TRF);
            prams[24] = GetSqlParameter("@CONFIRM_TRF_LASTUPDATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CONFIRM_TRF_LASTUPDATE);
            prams[25] = GetSqlParameter("@CONFIRM_TRF_LASTUSER", ParameterDirection.Input, SqlDbType.VarChar, 4, this.CONFIRM_TRF_LASTUSER);
            prams[26] = GetSqlParameter("@SEX", ParameterDirection.Input, SqlDbType.VarChar, 1, this.SEX);
            prams[27] = GetSqlParameter("@RACE", ParameterDirection.Input, SqlDbType.VarChar, 1, this.RACE);
            prams[28] = GetSqlParameter("@AGE", ParameterDirection.Input, SqlDbType.VarChar, 1, this.AGE);
            prams[29] = GetSqlParameter("@STK_XCHG", ParameterDirection.Input, SqlDbType.VarChar, 1, this.STK_XCHG);
            prams[30] = GetSqlParameter("@PICKUP_DATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.PICKUP_DATE);
            prams[31] = GetSqlParameter("@PICKUP_LOCNO", ParameterDirection.Input, SqlDbType.VarChar, 4, this.PICKUP_LOCNO);
            prams[32] = GetSqlParameter("@POSFLAG", ParameterDirection.Input, SqlDbType.VarChar, 1, this.POSFLAG);
            prams[33] = GetSqlParameter("@EVT_CODE", ParameterDirection.Input, SqlDbType.VarChar, 6, this.EVT_CODE);
            prams[34] = GetSqlParameter("@TRNAMT_TTLSALES", ParameterDirection.Input, SqlDbType.Money, 8, this.TRNAMT_TTLSALES);
            prams[35] = GetSqlParameter("@TRNAMT_NETSALES", ParameterDirection.Input, SqlDbType.Money, 8, this.TRNAMT_NETSALES);
            prams[36] = GetSqlParameter("@TRNAMT_TAX", ParameterDirection.Input, SqlDbType.Money, 8, this.TRNAMT_TAX);
            prams[37] = GetSqlParameter("@TAX_RATE", ParameterDirection.Input, SqlDbType.Decimal, 5, this.TAX_RATE);
            prams[38] = GetSqlParameter("@UNIONINVOICE_STARTNUM", ParameterDirection.Input, SqlDbType.VarChar, 10, this.UNIONINVOICE_STARTNUM);
            prams[39] = GetSqlParameter("@UNIONINVOICE_ENDNUM", ParameterDirection.Input, SqlDbType.VarChar, 10, this.UNIONINVOICE_ENDNUM);
            prams[40] = GetSqlParameter("@UNIONINVOICE_CUSTNUM", ParameterDirection.Input, SqlDbType.VarChar, 10, this.UNIONINVOICE_CUSTNUM);
            prams[41] = GetSqlParameter("@FLAG_DELIVERY", ParameterDirection.Input, SqlDbType.VarChar, 1, this.FLAG_DELIVERY);
            prams[42] = GetSqlParameter("@DELI_DATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DELI_DATE);
            prams[43] = GetSqlParameter("@DELI_PERIOD", ParameterDirection.Input, SqlDbType.VarChar, 20, this.DELI_PERIOD);
            prams[44] = GetSqlParameter("@DELI_REMARKS", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELI_REMARKS);
            prams[45] = GetSqlParameter("@DELI_ADDR1", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELI_ADDR1);
            prams[46] = GetSqlParameter("@DELI_ADDR2", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELI_ADDR2);
            prams[47] = GetSqlParameter("@DELI_ADDR3", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELI_ADDR3);
            prams[48] = GetSqlParameter("@DELI_ADDR4", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELI_ADDR4);
            prams[49] = GetSqlParameter("@DELI_TEL", ParameterDirection.Input, SqlDbType.VarChar, 20, this.DELI_TEL);
            prams[50] = GetSqlParameter("@DELI_FAX", ParameterDirection.Input, SqlDbType.VarChar, 20, this.DELI_FAX);
            prams[51] = GetSqlParameter("@DELI_TLX", ParameterDirection.Input, SqlDbType.VarChar, 20, this.DELI_TLX);
            prams[52] = GetSqlParameter("@DELI_PSN", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELI_PSN);
            prams[53] = GetSqlParameter("@CONFIRM_DELIVERY", ParameterDirection.Input, SqlDbType.VarChar, 1, this.CONFIRM_DELIVERY);
            prams[54] = GetSqlParameter("@CONFIRM_DATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CONFIRM_DATE);
            prams[55] = GetSqlParameter("@CONFIRM_USER", ParameterDirection.Input, SqlDbType.VarChar, 4, this.CONFIRM_USER);
            prams[56] = GetSqlParameter("@ANALYSIS_CODE01", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE01);
            prams[57] = GetSqlParameter("@ANALYSIS_CODE02", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE02);
            prams[58] = GetSqlParameter("@ANALYSIS_CODE03", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE03);
            prams[59] = GetSqlParameter("@ANALYSIS_CODE04", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE04);
            prams[60] = GetSqlParameter("@ANALYSIS_CODE05", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE05);
            prams[61] = GetSqlParameter("@ANALYSIS_CODE06", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE06);
            prams[62] = GetSqlParameter("@ANALYSIS_CODE07", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE07);
            prams[63] = GetSqlParameter("@ANALYSIS_CODE08", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE08);
            prams[64] = GetSqlParameter("@ANALYSIS_CODE09", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE09);
            prams[65] = GetSqlParameter("@ANALYSIS_CODE10", ParameterDirection.Input, SqlDbType.VarChar, 2, this.ANALYSIS_CODE10);
            prams[66] = GetSqlParameter("@ExportFEPFlag", ParameterDirection.Input, SqlDbType.Bit, 1, this.ExportFEPFlag);
            prams[67] = GetSqlParameter("@TRF_REASON", ParameterDirection.Input, SqlDbType.VarChar, 2, this.TRF_REASON);
            prams[68] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[69] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CreatedBy);
            prams[70] = GetSqlParameter("@ModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ModifiedOn);
            prams[71] = GetSqlParameter("@ModifiedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ModifiedBy);
            prams[72] = GetSqlParameter("@Retired", ParameterDirection.Input, SqlDbType.Bit, 1, this.Retired);
            prams[73] = GetSqlParameter("@RetiredOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RetiredOn);
            prams[74] = GetSqlParameter("@RetiredBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.RetiredBy);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@HeaderId", SqlDbType.UniqueIdentifier, 16, this.HeaderId),
                GetSqlParameterWithoutDirection("@TxType", SqlDbType.VarChar, 3, this.TxType),
                GetSqlParameterWithoutDirection("@TxNumber", SqlDbType.VarChar, 12, this.TxNumber),
                GetSqlParameterWithoutDirection("@TxDate", SqlDbType.DateTime, 8, this.TxDate),
                GetSqlParameterWithoutDirection("@SHOP", SqlDbType.VarChar, 4, this.SHOP),
                GetSqlParameterWithoutDirection("@TERMINAL", SqlDbType.VarChar, 2, this.TERMINAL),
                GetSqlParameterWithoutDirection("@FTSHOP", SqlDbType.VarChar, 4, this.FTSHOP),
                GetSqlParameterWithoutDirection("@TOTAMT", SqlDbType.Money, 8, this.TOTAMT),
                GetSqlParameterWithoutDirection("@DEPAMT", SqlDbType.Money, 8, this.DEPAMT),
                GetSqlParameterWithoutDirection("@STAFF1", SqlDbType.VarChar, 4, this.STAFF1),
                GetSqlParameterWithoutDirection("@STAFF2", SqlDbType.VarChar, 4, this.STAFF2),
                GetSqlParameterWithoutDirection("@VIPNO", SqlDbType.VarChar, 13, this.VIPNO),
                GetSqlParameterWithoutDirection("@SUPPNUM", SqlDbType.VarChar, 6, this.SUPPNUM),
                GetSqlParameterWithoutDirection("@REF", SqlDbType.VarChar, 12, this.REF),
                GetSqlParameterWithoutDirection("@REMARKS", SqlDbType.VarChar, 10, this.REMARKS),
                GetSqlParameterWithoutDirection("@STATUS", SqlDbType.VarChar, 1, this.STATUS),
                GetSqlParameterWithoutDirection("@OPERATOR", SqlDbType.VarChar, 4, this.OPERATOR),
                GetSqlParameterWithoutDirection("@RECEIVEDATE", SqlDbType.DateTime, 8, this.RECEIVEDATE),
                GetSqlParameterWithoutDirection("@POSTDATE", SqlDbType.DateTime, 8, this.POSTDATE),
                GetSqlParameterWithoutDirection("@POSTUSER", SqlDbType.VarChar, 4, this.POSTUSER),
                GetSqlParameterWithoutDirection("@ERRORTYPE", SqlDbType.VarChar, 5, this.ERRORTYPE),
                GetSqlParameterWithoutDirection("@EXPORTFLAG", SqlDbType.Bit, 1, this.EXPORTFLAG),
                GetSqlParameterWithoutDirection("@EXP_DELIVER", SqlDbType.DateTime, 8, this.EXP_DELIVER),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF", SqlDbType.VarChar, 1, this.CONFIRM_TRF),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF_LASTUPDATE", SqlDbType.DateTime, 8, this.CONFIRM_TRF_LASTUPDATE),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF_LASTUSER", SqlDbType.VarChar, 4, this.CONFIRM_TRF_LASTUSER),
                GetSqlParameterWithoutDirection("@SEX", SqlDbType.VarChar, 1, this.SEX),
                GetSqlParameterWithoutDirection("@RACE", SqlDbType.VarChar, 1, this.RACE),
                GetSqlParameterWithoutDirection("@AGE", SqlDbType.VarChar, 1, this.AGE),
                GetSqlParameterWithoutDirection("@STK_XCHG", SqlDbType.VarChar, 1, this.STK_XCHG),
                GetSqlParameterWithoutDirection("@PICKUP_DATE", SqlDbType.DateTime, 8, this.PICKUP_DATE),
                GetSqlParameterWithoutDirection("@PICKUP_LOCNO", SqlDbType.VarChar, 4, this.PICKUP_LOCNO),
                GetSqlParameterWithoutDirection("@POSFLAG", SqlDbType.VarChar, 1, this.POSFLAG),
                GetSqlParameterWithoutDirection("@EVT_CODE", SqlDbType.VarChar, 6, this.EVT_CODE),
                GetSqlParameterWithoutDirection("@TRNAMT_TTLSALES", SqlDbType.Money, 8, this.TRNAMT_TTLSALES),
                GetSqlParameterWithoutDirection("@TRNAMT_NETSALES", SqlDbType.Money, 8, this.TRNAMT_NETSALES),
                GetSqlParameterWithoutDirection("@TRNAMT_TAX", SqlDbType.Money, 8, this.TRNAMT_TAX),
                GetSqlParameterWithoutDirection("@TAX_RATE", SqlDbType.Decimal, 5, this.TAX_RATE),
                GetSqlParameterWithoutDirection("@UNIONINVOICE_STARTNUM", SqlDbType.VarChar, 10, this.UNIONINVOICE_STARTNUM),
                GetSqlParameterWithoutDirection("@UNIONINVOICE_ENDNUM", SqlDbType.VarChar, 10, this.UNIONINVOICE_ENDNUM),
                GetSqlParameterWithoutDirection("@UNIONINVOICE_CUSTNUM", SqlDbType.VarChar, 10, this.UNIONINVOICE_CUSTNUM),
                GetSqlParameterWithoutDirection("@FLAG_DELIVERY", SqlDbType.VarChar, 1, this.FLAG_DELIVERY),
                GetSqlParameterWithoutDirection("@DELI_DATE", SqlDbType.DateTime, 8, this.DELI_DATE),
                GetSqlParameterWithoutDirection("@DELI_PERIOD", SqlDbType.VarChar, 20, this.DELI_PERIOD),
                GetSqlParameterWithoutDirection("@DELI_REMARKS", SqlDbType.VarChar, 50, this.DELI_REMARKS),
                GetSqlParameterWithoutDirection("@DELI_ADDR1", SqlDbType.VarChar, 50, this.DELI_ADDR1),
                GetSqlParameterWithoutDirection("@DELI_ADDR2", SqlDbType.VarChar, 50, this.DELI_ADDR2),
                GetSqlParameterWithoutDirection("@DELI_ADDR3", SqlDbType.VarChar, 50, this.DELI_ADDR3),
                GetSqlParameterWithoutDirection("@DELI_ADDR4", SqlDbType.VarChar, 50, this.DELI_ADDR4),
                GetSqlParameterWithoutDirection("@DELI_TEL", SqlDbType.VarChar, 20, this.DELI_TEL),
                GetSqlParameterWithoutDirection("@DELI_FAX", SqlDbType.VarChar, 20, this.DELI_FAX),
                GetSqlParameterWithoutDirection("@DELI_TLX", SqlDbType.VarChar, 20, this.DELI_TLX),
                GetSqlParameterWithoutDirection("@DELI_PSN", SqlDbType.VarChar, 50, this.DELI_PSN),
                GetSqlParameterWithoutDirection("@CONFIRM_DELIVERY", SqlDbType.VarChar, 1, this.CONFIRM_DELIVERY),
                GetSqlParameterWithoutDirection("@CONFIRM_DATE", SqlDbType.DateTime, 8, this.CONFIRM_DATE),
                GetSqlParameterWithoutDirection("@CONFIRM_USER", SqlDbType.VarChar, 4, this.CONFIRM_USER),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE01", SqlDbType.VarChar, 2, this.ANALYSIS_CODE01),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE02", SqlDbType.VarChar, 2, this.ANALYSIS_CODE02),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE03", SqlDbType.VarChar, 2, this.ANALYSIS_CODE03),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE04", SqlDbType.VarChar, 2, this.ANALYSIS_CODE04),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE05", SqlDbType.VarChar, 2, this.ANALYSIS_CODE05),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE06", SqlDbType.VarChar, 2, this.ANALYSIS_CODE06),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE07", SqlDbType.VarChar, 2, this.ANALYSIS_CODE07),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE08", SqlDbType.VarChar, 2, this.ANALYSIS_CODE08),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE09", SqlDbType.VarChar, 2, this.ANALYSIS_CODE09),
                GetSqlParameterWithoutDirection("@ANALYSIS_CODE10", SqlDbType.VarChar, 2, this.ANALYSIS_CODE10),
                GetSqlParameterWithoutDirection("@ExportFEPFlag", SqlDbType.Bit, 1, this.ExportFEPFlag),
                GetSqlParameterWithoutDirection("@TRF_REASON", SqlDbType.VarChar, 2, this.TRF_REASON),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.UniqueIdentifier, 16, this.CreatedBy),
                GetSqlParameterWithoutDirection("@ModifiedOn", SqlDbType.DateTime, 8, this.ModifiedOn),
                GetSqlParameterWithoutDirection("@ModifiedBy", SqlDbType.UniqueIdentifier, 16, this.ModifiedBy),
                GetSqlParameterWithoutDirection("@Retired", SqlDbType.Bit, 1, this.Retired),
                GetSqlParameterWithoutDirection("@RetiredOn", SqlDbType.DateTime, 8, this.RetiredOn),
                GetSqlParameterWithoutDirection("@RetiredBy", SqlDbType.UniqueIdentifier, 16, this.RetiredBy)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("headerId: " + headerId.ToString()).Append("\r\n");
            builder.Append("txType: " + txType.ToString()).Append("\r\n");
            builder.Append("txNumber: " + txNumber.ToString()).Append("\r\n");
            builder.Append("txDate: " + txDate.ToString()).Append("\r\n");
            builder.Append("sHOP: " + sHOP.ToString()).Append("\r\n");
            builder.Append("tERMINAL: " + tERMINAL.ToString()).Append("\r\n");
            builder.Append("fTSHOP: " + fTSHOP.ToString()).Append("\r\n");
            builder.Append("tOTAMT: " + tOTAMT.ToString()).Append("\r\n");
            builder.Append("dEPAMT: " + dEPAMT.ToString()).Append("\r\n");
            builder.Append("sTAFF1: " + sTAFF1.ToString()).Append("\r\n");
            builder.Append("sTAFF2: " + sTAFF2.ToString()).Append("\r\n");
            builder.Append("vIPNO: " + vIPNO.ToString()).Append("\r\n");
            builder.Append("sUPPNUM: " + sUPPNUM.ToString()).Append("\r\n");
            builder.Append("rEF: " + rEF.ToString()).Append("\r\n");
            builder.Append("rEMARKS: " + rEMARKS.ToString()).Append("\r\n");
            builder.Append("sTATUS: " + sTATUS.ToString()).Append("\r\n");
            builder.Append("oPERATOR: " + oPERATOR.ToString()).Append("\r\n");
            builder.Append("rECEIVEDATE: " + rECEIVEDATE.ToString()).Append("\r\n");
            builder.Append("pOSTDATE: " + pOSTDATE.ToString()).Append("\r\n");
            builder.Append("pOSTUSER: " + pOSTUSER.ToString()).Append("\r\n");
            builder.Append("eRRORTYPE: " + eRRORTYPE.ToString()).Append("\r\n");
            builder.Append("eXPORTFLAG: " + eXPORTFLAG.ToString()).Append("\r\n");
            builder.Append("eXP_DELIVER: " + eXP_DELIVER.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF: " + cONFIRM_TRF.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF_LASTUPDATE: " + cONFIRM_TRF_LASTUPDATE.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF_LASTUSER: " + cONFIRM_TRF_LASTUSER.ToString()).Append("\r\n");
            builder.Append("sEX: " + sEX.ToString()).Append("\r\n");
            builder.Append("rACE: " + rACE.ToString()).Append("\r\n");
            builder.Append("aGE: " + aGE.ToString()).Append("\r\n");
            builder.Append("sTK_XCHG: " + sTK_XCHG.ToString()).Append("\r\n");
            builder.Append("pICKUP_DATE: " + pICKUP_DATE.ToString()).Append("\r\n");
            builder.Append("pICKUP_LOCNO: " + pICKUP_LOCNO.ToString()).Append("\r\n");
            builder.Append("pOSFLAG: " + pOSFLAG.ToString()).Append("\r\n");
            builder.Append("eVT_CODE: " + eVT_CODE.ToString()).Append("\r\n");
            builder.Append("tRNAMT_TTLSALES: " + tRNAMT_TTLSALES.ToString()).Append("\r\n");
            builder.Append("tRNAMT_NETSALES: " + tRNAMT_NETSALES.ToString()).Append("\r\n");
            builder.Append("tRNAMT_TAX: " + tRNAMT_TAX.ToString()).Append("\r\n");
            builder.Append("tAX_RATE: " + tAX_RATE.ToString()).Append("\r\n");
            builder.Append("uNIONINVOICE_STARTNUM: " + uNIONINVOICE_STARTNUM.ToString()).Append("\r\n");
            builder.Append("uNIONINVOICE_ENDNUM: " + uNIONINVOICE_ENDNUM.ToString()).Append("\r\n");
            builder.Append("uNIONINVOICE_CUSTNUM: " + uNIONINVOICE_CUSTNUM.ToString()).Append("\r\n");
            builder.Append("fLAG_DELIVERY: " + fLAG_DELIVERY.ToString()).Append("\r\n");
            builder.Append("dELI_DATE: " + dELI_DATE.ToString()).Append("\r\n");
            builder.Append("dELI_PERIOD: " + dELI_PERIOD.ToString()).Append("\r\n");
            builder.Append("dELI_REMARKS: " + dELI_REMARKS.ToString()).Append("\r\n");
            builder.Append("dELI_ADDR1: " + dELI_ADDR1.ToString()).Append("\r\n");
            builder.Append("dELI_ADDR2: " + dELI_ADDR2.ToString()).Append("\r\n");
            builder.Append("dELI_ADDR3: " + dELI_ADDR3.ToString()).Append("\r\n");
            builder.Append("dELI_ADDR4: " + dELI_ADDR4.ToString()).Append("\r\n");
            builder.Append("dELI_TEL: " + dELI_TEL.ToString()).Append("\r\n");
            builder.Append("dELI_FAX: " + dELI_FAX.ToString()).Append("\r\n");
            builder.Append("dELI_TLX: " + dELI_TLX.ToString()).Append("\r\n");
            builder.Append("dELI_PSN: " + dELI_PSN.ToString()).Append("\r\n");
            builder.Append("cONFIRM_DELIVERY: " + cONFIRM_DELIVERY.ToString()).Append("\r\n");
            builder.Append("cONFIRM_DATE: " + cONFIRM_DATE.ToString()).Append("\r\n");
            builder.Append("cONFIRM_USER: " + cONFIRM_USER.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE01: " + aNALYSIS_CODE01.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE02: " + aNALYSIS_CODE02.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE03: " + aNALYSIS_CODE03.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE04: " + aNALYSIS_CODE04.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE05: " + aNALYSIS_CODE05.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE06: " + aNALYSIS_CODE06.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE07: " + aNALYSIS_CODE07.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE08: " + aNALYSIS_CODE08.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE09: " + aNALYSIS_CODE09.ToString()).Append("\r\n");
            builder.Append("aNALYSIS_CODE10: " + aNALYSIS_CODE10.ToString()).Append("\r\n");
            builder.Append("exportFEPFlag: " + exportFEPFlag.ToString()).Append("\r\n");
            builder.Append("tRF_REASON: " + tRF_REASON.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("modifiedOn: " + modifiedOn.ToString()).Append("\r\n");
            builder.Append("modifiedBy: " + modifiedBy.ToString()).Append("\r\n");
            builder.Append("retired: " + retired.ToString()).Append("\r\n");
            builder.Append("retiredOn: " + retiredOn.ToString()).Append("\r\n");
            builder.Append("retiredBy: " + retiredBy.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			FepBatchHeaderCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			// Filter the retired records
			if (WhereClause.Length > 0)
			{
				WhereClause += " AND Retired = 0";
			}
			else
			{
				WhereClause = "Retired = 0";
			}
			
			if (WhereClause.Length > 0)
			{
				source = FepBatchHeader.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = FepBatchHeader.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (FepBatchHeader item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = IgnorThis(item, ParentFilter);
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.HeaderId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(FepBatchHeader target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
			string filterField = (string)pi.GetValue(target, null);
			if (filterField.ToLower() == parsed[1].ToLower())
			{
				result = false;
			}
			return result;
		}

		private static string GetFormatedText(FepBatchHeader target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="FepBatchHeader">FepBatchHeader</see> objects.
    /// </summary>
    public class FepBatchHeaderCollection : BindingList< FepBatchHeader>
    {
	}
}
