using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.PurchaseOrderHHTDetails.
    /// Date Created:   2020-08-09 02:14:15
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class PurchaseOrderHHTDetails
    {
        private Guid key = Guid.Empty;
        private Guid detailsId = Guid.Empty;
        private Guid headerId = Guid.Empty;
        private int sEQNO = 0;
        private string bARCODE = String.Empty;
        private DateTime rECDATE = DateTime.Parse("1900-1-1");
        private string sTAFFNO = String.Empty;
        private Guid productId = Guid.Empty;
        private string sTKCODE = String.Empty;
        private string aPPENDIX1 = String.Empty;
        private string aPPENDIX2 = String.Empty;
        private string aPPENDIX3 = String.Empty;
        private decimal hHTQTY;
        private string oRIGINAL_BARCODE = String.Empty;
        private string oRIGINAL_BARTYPE = String.Empty;
        private string cARTON = String.Empty;

        /// <summary>
        /// Initialize an new empty PurchaseOrderHHTDetails object.
        /// </summary>
        public PurchaseOrderHHTDetails()
        {
        }
		
        /// <summary>
        /// Initialize a new PurchaseOrderHHTDetails object with the given parameters.
        /// </summary>
        public PurchaseOrderHHTDetails(Guid detailsId, Guid headerId, int sEQNO, string bARCODE, DateTime rECDATE, string sTAFFNO, Guid productId, string sTKCODE, string aPPENDIX1, string aPPENDIX2, string aPPENDIX3, decimal hHTQTY, string oRIGINAL_BARCODE, string oRIGINAL_BARTYPE, string cARTON)
        {
                this.detailsId = detailsId;
                this.headerId = headerId;
                this.sEQNO = sEQNO;
                this.bARCODE = bARCODE;
                this.rECDATE = rECDATE;
                this.sTAFFNO = sTAFFNO;
                this.productId = productId;
                this.sTKCODE = sTKCODE;
                this.aPPENDIX1 = aPPENDIX1;
                this.aPPENDIX2 = aPPENDIX2;
                this.aPPENDIX3 = aPPENDIX3;
                this.hHTQTY = hHTQTY;
                this.oRIGINAL_BARCODE = oRIGINAL_BARCODE;
                this.oRIGINAL_BARTYPE = oRIGINAL_BARTYPE;
                this.cARTON = cARTON;
        }	
		
        /// <summary>
        /// Loads a PurchaseOrderHHTDetails object from the database using the given DetailsId
        /// </summary>
        /// <param name="detailsId">The primary key value</param>
        /// <returns>A PurchaseOrderHHTDetails object</returns>
        public static PurchaseOrderHHTDetails Load(Guid detailsId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@DetailsId", detailsId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spPurchaseOrderHHTDetails_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    PurchaseOrderHHTDetails result = new PurchaseOrderHHTDetails();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a PurchaseOrderHHTDetails object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A PurchaseOrderHHTDetails object</returns>
        public static PurchaseOrderHHTDetails LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spPurchaseOrderHHTDetails_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    PurchaseOrderHHTDetails result = new PurchaseOrderHHTDetails();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of PurchaseOrderHHTDetails objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderHHTDetails objects in the database.</returns>
        public static PurchaseOrderHHTDetailsCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spPurchaseOrderHHTDetails_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PurchaseOrderHHTDetails objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderHHTDetails objects in the database ordered by the columns specified.</returns>
        public static PurchaseOrderHHTDetailsCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spPurchaseOrderHHTDetails_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PurchaseOrderHHTDetails objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderHHTDetails objects in the database.</returns>
        public static PurchaseOrderHHTDetailsCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spPurchaseOrderHHTDetails_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PurchaseOrderHHTDetails objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderHHTDetails objects in the database ordered by the columns specified.</returns>
        public static PurchaseOrderHHTDetailsCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spPurchaseOrderHHTDetails_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PurchaseOrderHHTDetails objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderHHTDetails objects in the database.</returns>
        public static PurchaseOrderHHTDetailsCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            PurchaseOrderHHTDetailsCollection result = new PurchaseOrderHHTDetailsCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    PurchaseOrderHHTDetails tmp = new PurchaseOrderHHTDetails();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a PurchaseOrderHHTDetails object from the database.
        /// </summary>
        /// <param name="detailsId">The primary key value</param>
        public static void Delete(Guid detailsId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@DetailsId", detailsId) };
            SqlHelper.Default.ExecuteNonQuery("spPurchaseOrderHHTDetails_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) detailsId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) headerId = reader.GetGuid(1);
                if (!reader.IsDBNull(2)) sEQNO = reader.GetInt32(2);
                if (!reader.IsDBNull(3)) bARCODE = reader.GetString(3);
                if (!reader.IsDBNull(4)) rECDATE = reader.GetDateTime(4);
                if (!reader.IsDBNull(5)) sTAFFNO = reader.GetString(5);
                if (!reader.IsDBNull(6)) productId = reader.GetGuid(6);
                if (!reader.IsDBNull(7)) sTKCODE = reader.GetString(7);
                if (!reader.IsDBNull(8)) aPPENDIX1 = reader.GetString(8);
                if (!reader.IsDBNull(9)) aPPENDIX2 = reader.GetString(9);
                if (!reader.IsDBNull(10)) aPPENDIX3 = reader.GetString(10);
                if (!reader.IsDBNull(11)) hHTQTY = reader.GetDecimal(11);
                if (!reader.IsDBNull(12)) oRIGINAL_BARCODE = reader.GetString(12);
                if (!reader.IsDBNull(13)) oRIGINAL_BARTYPE = reader.GetString(13);
                if (!reader.IsDBNull(14)) cARTON = reader.GetString(14);
            }
        }
		
        public void Delete()
        {
            Delete(this.DetailsId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != DetailsId)
                    this.Delete();
                Update();
            }
        }

        public Guid DetailsId
        {
            get { return detailsId; }
            set { detailsId = value; }
        }

        public Guid HeaderId
        {
            get { return headerId; }
            set { headerId = value; }
        }

        public int SEQNO
        {
            get { return sEQNO; }
            set { sEQNO = value; }
        }

        public string BARCODE
        {
            get { return bARCODE; }
            set { bARCODE = value; }
        }

        public DateTime RECDATE
        {
            get { return rECDATE; }
            set { rECDATE = value; }
        }

        public string STAFFNO
        {
            get { return sTAFFNO; }
            set { sTAFFNO = value; }
        }

        public Guid ProductId
        {
            get { return productId; }
            set { productId = value; }
        }

        public string STKCODE
        {
            get { return sTKCODE; }
            set { sTKCODE = value; }
        }

        public string APPENDIX1
        {
            get { return aPPENDIX1; }
            set { aPPENDIX1 = value; }
        }

        public string APPENDIX2
        {
            get { return aPPENDIX2; }
            set { aPPENDIX2 = value; }
        }

        public string APPENDIX3
        {
            get { return aPPENDIX3; }
            set { aPPENDIX3 = value; }
        }

        public decimal HHTQTY
        {
            get { return hHTQTY; }
            set { hHTQTY = value; }
        }

        public string ORIGINAL_BARCODE
        {
            get { return oRIGINAL_BARCODE; }
            set { oRIGINAL_BARCODE = value; }
        }

        public string ORIGINAL_BARTYPE
        {
            get { return oRIGINAL_BARTYPE; }
            set { oRIGINAL_BARTYPE = value; }
        }

        public string CARTON
        {
            get { return cARTON; }
            set { cARTON = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spPurchaseOrderHHTDetails_InsRec", "@DetailsId", out returnedValue, parameterValues);
            
            detailsId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spPurchaseOrderHHTDetails_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[15];
            prams[0] = GetSqlParameter("@DetailsId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.DetailsId);
            prams[1] = GetSqlParameter("@HeaderId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.HeaderId);
            prams[2] = GetSqlParameter("@SEQNO", ParameterDirection.Input, SqlDbType.Int, 4, this.SEQNO);
            prams[3] = GetSqlParameter("@BARCODE", ParameterDirection.Input, SqlDbType.VarChar, 22, this.BARCODE);
            prams[4] = GetSqlParameter("@RECDATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RECDATE);
            prams[5] = GetSqlParameter("@STAFFNO", ParameterDirection.Input, SqlDbType.VarChar, 4, this.STAFFNO);
            prams[6] = GetSqlParameter("@ProductId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ProductId);
            prams[7] = GetSqlParameter("@STKCODE", ParameterDirection.Input, SqlDbType.VarChar, 10, this.STKCODE);
            prams[8] = GetSqlParameter("@APPENDIX1", ParameterDirection.Input, SqlDbType.VarChar, 4, this.APPENDIX1);
            prams[9] = GetSqlParameter("@APPENDIX2", ParameterDirection.Input, SqlDbType.VarChar, 4, this.APPENDIX2);
            prams[10] = GetSqlParameter("@APPENDIX3", ParameterDirection.Input, SqlDbType.VarChar, 4, this.APPENDIX3);
            prams[11] = GetSqlParameter("@HHTQTY", ParameterDirection.Input, SqlDbType.Decimal, 9, this.HHTQTY);
            prams[12] = GetSqlParameter("@ORIGINAL_BARCODE", ParameterDirection.Input, SqlDbType.VarChar, 50, this.ORIGINAL_BARCODE);
            prams[13] = GetSqlParameter("@ORIGINAL_BARTYPE", ParameterDirection.Input, SqlDbType.VarChar, 10, this.ORIGINAL_BARTYPE);
            prams[14] = GetSqlParameter("@CARTON", ParameterDirection.Input, SqlDbType.VarChar, 20, this.CARTON);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@DetailsId", SqlDbType.UniqueIdentifier, 16, this.DetailsId),
                GetSqlParameterWithoutDirection("@HeaderId", SqlDbType.UniqueIdentifier, 16, this.HeaderId),
                GetSqlParameterWithoutDirection("@SEQNO", SqlDbType.Int, 4, this.SEQNO),
                GetSqlParameterWithoutDirection("@BARCODE", SqlDbType.VarChar, 22, this.BARCODE),
                GetSqlParameterWithoutDirection("@RECDATE", SqlDbType.DateTime, 8, this.RECDATE),
                GetSqlParameterWithoutDirection("@STAFFNO", SqlDbType.VarChar, 4, this.STAFFNO),
                GetSqlParameterWithoutDirection("@ProductId", SqlDbType.UniqueIdentifier, 16, this.ProductId),
                GetSqlParameterWithoutDirection("@STKCODE", SqlDbType.VarChar, 10, this.STKCODE),
                GetSqlParameterWithoutDirection("@APPENDIX1", SqlDbType.VarChar, 4, this.APPENDIX1),
                GetSqlParameterWithoutDirection("@APPENDIX2", SqlDbType.VarChar, 4, this.APPENDIX2),
                GetSqlParameterWithoutDirection("@APPENDIX3", SqlDbType.VarChar, 4, this.APPENDIX3),
                GetSqlParameterWithoutDirection("@HHTQTY", SqlDbType.Decimal, 9, this.HHTQTY),
                GetSqlParameterWithoutDirection("@ORIGINAL_BARCODE", SqlDbType.VarChar, 50, this.ORIGINAL_BARCODE),
                GetSqlParameterWithoutDirection("@ORIGINAL_BARTYPE", SqlDbType.VarChar, 10, this.ORIGINAL_BARTYPE),
                GetSqlParameterWithoutDirection("@CARTON", SqlDbType.VarChar, 20, this.CARTON)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("detailsId: " + detailsId.ToString()).Append("\r\n");
            builder.Append("headerId: " + headerId.ToString()).Append("\r\n");
            builder.Append("sEQNO: " + sEQNO.ToString()).Append("\r\n");
            builder.Append("bARCODE: " + bARCODE.ToString()).Append("\r\n");
            builder.Append("rECDATE: " + rECDATE.ToString()).Append("\r\n");
            builder.Append("sTAFFNO: " + sTAFFNO.ToString()).Append("\r\n");
            builder.Append("productId: " + productId.ToString()).Append("\r\n");
            builder.Append("sTKCODE: " + sTKCODE.ToString()).Append("\r\n");
            builder.Append("aPPENDIX1: " + aPPENDIX1.ToString()).Append("\r\n");
            builder.Append("aPPENDIX2: " + aPPENDIX2.ToString()).Append("\r\n");
            builder.Append("aPPENDIX3: " + aPPENDIX3.ToString()).Append("\r\n");
            builder.Append("hHTQTY: " + hHTQTY.ToString()).Append("\r\n");
            builder.Append("oRIGINAL_BARCODE: " + oRIGINAL_BARCODE.ToString()).Append("\r\n");
            builder.Append("oRIGINAL_BARTYPE: " + oRIGINAL_BARTYPE.ToString()).Append("\r\n");
            builder.Append("cARTON: " + cARTON.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			PurchaseOrderHHTDetailsCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = PurchaseOrderHHTDetails.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = PurchaseOrderHHTDetails.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (PurchaseOrderHHTDetails item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.HeaderId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.DetailsId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(PurchaseOrderHHTDetails target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.HeaderId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				PurchaseOrderHHTDetails parentTemplate = PurchaseOrderHHTDetails.Load(target.HeaderId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(PurchaseOrderHHTDetails target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="PurchaseOrderHHTDetails">PurchaseOrderHHTDetails</see> objects.
    /// </summary>
    public class PurchaseOrderHHTDetailsCollection : BindingList< PurchaseOrderHHTDetails>
    {
	}
}
