using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.InvtLedgerHeader.
    /// Date Created:   2020-08-09 02:14:11
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class InvtLedgerHeader
    {
        private Guid key = Guid.Empty;
        private Guid headerId = Guid.Empty;
        private string txType = String.Empty;
        private string txNumber = String.Empty;
        private DateTime txDate = DateTime.Parse("1900-1-1");
        private Guid staffId = Guid.Empty;
        private Guid staff1 = Guid.Empty;
        private Guid staff2 = Guid.Empty;
        private Guid workplaceId = Guid.Empty;
        private Guid vsLocationId = Guid.Empty;
        private Guid vsLeddgerHeaderId = Guid.Empty;
        private Guid subLedgerHeaderId = Guid.Empty;
        private decimal totalAmount;
        private Guid supplierId = Guid.Empty;
        private string reference = String.Empty;
        private string remarks = String.Empty;
        private string tRF_REASON = String.Empty;
        private bool eXPORTFLAG;
        private string cONFIRM_TRF = String.Empty;
        private DateTime cONFIRM_TRF_LASTUPDATE = DateTime.Parse("1900-1-1");
        private string cONFIRM_TRF_LASTUSER = String.Empty;
        private int status = 0;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private Guid createdBy = Guid.Empty;
        private DateTime modifiedOn = DateTime.Parse("1900-1-1");
        private Guid modifiedBy = Guid.Empty;
        private bool retired;
        private DateTime retiredOn = DateTime.Parse("1900-1-1");
        private Guid retiredBy = Guid.Empty;

        /// <summary>
        /// Initialize an new empty InvtLedgerHeader object.
        /// </summary>
        public InvtLedgerHeader()
        {
        }
		
        /// <summary>
        /// Initialize a new InvtLedgerHeader object with the given parameters.
        /// </summary>
        public InvtLedgerHeader(Guid headerId, string txType, string txNumber, DateTime txDate, Guid staffId, Guid staff1, Guid staff2, Guid workplaceId, Guid vsLocationId, Guid vsLeddgerHeaderId, Guid subLedgerHeaderId, decimal totalAmount, Guid supplierId, string reference, string remarks, string tRF_REASON, bool eXPORTFLAG, string cONFIRM_TRF, DateTime cONFIRM_TRF_LASTUPDATE, string cONFIRM_TRF_LASTUSER, int status, DateTime createdOn, Guid createdBy, DateTime modifiedOn, Guid modifiedBy, bool retired, DateTime retiredOn, Guid retiredBy)
        {
                this.headerId = headerId;
                this.txType = txType;
                this.txNumber = txNumber;
                this.txDate = txDate;
                this.staffId = staffId;
                this.staff1 = staff1;
                this.staff2 = staff2;
                this.workplaceId = workplaceId;
                this.vsLocationId = vsLocationId;
                this.vsLeddgerHeaderId = vsLeddgerHeaderId;
                this.subLedgerHeaderId = subLedgerHeaderId;
                this.totalAmount = totalAmount;
                this.supplierId = supplierId;
                this.reference = reference;
                this.remarks = remarks;
                this.tRF_REASON = tRF_REASON;
                this.eXPORTFLAG = eXPORTFLAG;
                this.cONFIRM_TRF = cONFIRM_TRF;
                this.cONFIRM_TRF_LASTUPDATE = cONFIRM_TRF_LASTUPDATE;
                this.cONFIRM_TRF_LASTUSER = cONFIRM_TRF_LASTUSER;
                this.status = status;
                this.createdOn = createdOn;
                this.createdBy = createdBy;
                this.modifiedOn = modifiedOn;
                this.modifiedBy = modifiedBy;
                this.retired = retired;
                this.retiredOn = retiredOn;
                this.retiredBy = retiredBy;
        }	
		
        /// <summary>
        /// Loads a InvtLedgerHeader object from the database using the given HeaderId
        /// </summary>
        /// <param name="headerId">The primary key value</param>
        /// <returns>A InvtLedgerHeader object</returns>
        public static InvtLedgerHeader Load(Guid headerId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@HeaderId", headerId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spInvtLedgerHeader_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    InvtLedgerHeader result = new InvtLedgerHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a InvtLedgerHeader object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A InvtLedgerHeader object</returns>
        public static InvtLedgerHeader LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spInvtLedgerHeader_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    InvtLedgerHeader result = new InvtLedgerHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of InvtLedgerHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the InvtLedgerHeader objects in the database.</returns>
        public static InvtLedgerHeaderCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spInvtLedgerHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtLedgerHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the InvtLedgerHeader objects in the database ordered by the columns specified.</returns>
        public static InvtLedgerHeaderCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spInvtLedgerHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtLedgerHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the InvtLedgerHeader objects in the database.</returns>
        public static InvtLedgerHeaderCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spInvtLedgerHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtLedgerHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the InvtLedgerHeader objects in the database ordered by the columns specified.</returns>
        public static InvtLedgerHeaderCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spInvtLedgerHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtLedgerHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the InvtLedgerHeader objects in the database.</returns>
        public static InvtLedgerHeaderCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            InvtLedgerHeaderCollection result = new InvtLedgerHeaderCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    InvtLedgerHeader tmp = new InvtLedgerHeader();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a InvtLedgerHeader object from the database.
        /// </summary>
        /// <param name="headerId">The primary key value</param>
        public static void Delete(Guid headerId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@HeaderId", headerId) };
            SqlHelper.Default.ExecuteNonQuery("spInvtLedgerHeader_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) headerId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) txType = reader.GetString(1);
                if (!reader.IsDBNull(2)) txNumber = reader.GetString(2);
                if (!reader.IsDBNull(3)) txDate = reader.GetDateTime(3);
                if (!reader.IsDBNull(4)) staffId = reader.GetGuid(4);
                if (!reader.IsDBNull(5)) staff1 = reader.GetGuid(5);
                if (!reader.IsDBNull(6)) staff2 = reader.GetGuid(6);
                if (!reader.IsDBNull(7)) workplaceId = reader.GetGuid(7);
                if (!reader.IsDBNull(8)) vsLocationId = reader.GetGuid(8);
                if (!reader.IsDBNull(9)) vsLeddgerHeaderId = reader.GetGuid(9);
                if (!reader.IsDBNull(10)) subLedgerHeaderId = reader.GetGuid(10);
                if (!reader.IsDBNull(11)) totalAmount = reader.GetDecimal(11);
                if (!reader.IsDBNull(12)) supplierId = reader.GetGuid(12);
                if (!reader.IsDBNull(13)) reference = reader.GetString(13);
                if (!reader.IsDBNull(14)) remarks = reader.GetString(14);
                if (!reader.IsDBNull(15)) tRF_REASON = reader.GetString(15);
                if (!reader.IsDBNull(16)) eXPORTFLAG = reader.GetBoolean(16);
                if (!reader.IsDBNull(17)) cONFIRM_TRF = reader.GetString(17);
                if (!reader.IsDBNull(18)) cONFIRM_TRF_LASTUPDATE = reader.GetDateTime(18);
                if (!reader.IsDBNull(19)) cONFIRM_TRF_LASTUSER = reader.GetString(19);
                if (!reader.IsDBNull(20)) status = reader.GetInt32(20);
                if (!reader.IsDBNull(21)) createdOn = reader.GetDateTime(21);
                if (!reader.IsDBNull(22)) createdBy = reader.GetGuid(22);
                if (!reader.IsDBNull(23)) modifiedOn = reader.GetDateTime(23);
                if (!reader.IsDBNull(24)) modifiedBy = reader.GetGuid(24);
                if (!reader.IsDBNull(25)) retired = reader.GetBoolean(25);
                if (!reader.IsDBNull(26)) retiredOn = reader.GetDateTime(26);
                if (!reader.IsDBNull(27)) retiredBy = reader.GetGuid(27);
            }
        }
		
        public void Delete()
        {
            Delete(this.HeaderId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != HeaderId)
                    this.Delete();
                Update();
            }
        }

        public Guid HeaderId
        {
            get { return headerId; }
            set { headerId = value; }
        }

        public string TxType
        {
            get { return txType; }
            set { txType = value; }
        }

        public string TxNumber
        {
            get { return txNumber; }
            set { txNumber = value; }
        }

        public DateTime TxDate
        {
            get { return txDate; }
            set { txDate = value; }
        }

        public Guid StaffId
        {
            get { return staffId; }
            set { staffId = value; }
        }

        public Guid Staff1
        {
            get { return staff1; }
            set { staff1 = value; }
        }

        public Guid Staff2
        {
            get { return staff2; }
            set { staff2 = value; }
        }

        public Guid WorkplaceId
        {
            get { return workplaceId; }
            set { workplaceId = value; }
        }

        public Guid VsLocationId
        {
            get { return vsLocationId; }
            set { vsLocationId = value; }
        }

        public Guid VsLeddgerHeaderId
        {
            get { return vsLeddgerHeaderId; }
            set { vsLeddgerHeaderId = value; }
        }

        public Guid SubLedgerHeaderId
        {
            get { return subLedgerHeaderId; }
            set { subLedgerHeaderId = value; }
        }

        public decimal TotalAmount
        {
            get { return totalAmount; }
            set { totalAmount = value; }
        }

        public Guid SupplierId
        {
            get { return supplierId; }
            set { supplierId = value; }
        }

        public string Reference
        {
            get { return reference; }
            set { reference = value; }
        }

        public string Remarks
        {
            get { return remarks; }
            set { remarks = value; }
        }

        public string TRF_REASON
        {
            get { return tRF_REASON; }
            set { tRF_REASON = value; }
        }

        public bool EXPORTFLAG
        {
            get { return eXPORTFLAG; }
            set { eXPORTFLAG = value; }
        }

        public string CONFIRM_TRF
        {
            get { return cONFIRM_TRF; }
            set { cONFIRM_TRF = value; }
        }

        public DateTime CONFIRM_TRF_LASTUPDATE
        {
            get { return cONFIRM_TRF_LASTUPDATE; }
            set { cONFIRM_TRF_LASTUPDATE = value; }
        }

        public string CONFIRM_TRF_LASTUSER
        {
            get { return cONFIRM_TRF_LASTUSER; }
            set { cONFIRM_TRF_LASTUSER = value; }
        }

        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public Guid CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime ModifiedOn
        {
            get { return modifiedOn; }
            set { modifiedOn = value; }
        }

        public Guid ModifiedBy
        {
            get { return modifiedBy; }
            set { modifiedBy = value; }
        }

        public bool Retired
        {
            get { return retired; }
            set { retired = value; }
        }

        public DateTime RetiredOn
        {
            get { return retiredOn; }
            set { retiredOn = value; }
        }

        public Guid RetiredBy
        {
            get { return retiredBy; }
            set { retiredBy = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spInvtLedgerHeader_InsRec", "@HeaderId", out returnedValue, parameterValues);
            
            headerId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spInvtLedgerHeader_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[28];
            prams[0] = GetSqlParameter("@HeaderId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.HeaderId);
            prams[1] = GetSqlParameter("@TxType", ParameterDirection.Input, SqlDbType.VarChar, 3, this.TxType);
            prams[2] = GetSqlParameter("@TxNumber", ParameterDirection.Input, SqlDbType.VarChar, 12, this.TxNumber);
            prams[3] = GetSqlParameter("@TxDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.TxDate);
            prams[4] = GetSqlParameter("@StaffId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.StaffId);
            prams[5] = GetSqlParameter("@Staff1", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.Staff1);
            prams[6] = GetSqlParameter("@Staff2", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.Staff2);
            prams[7] = GetSqlParameter("@WorkplaceId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.WorkplaceId);
            prams[8] = GetSqlParameter("@VsLocationId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.VsLocationId);
            prams[9] = GetSqlParameter("@VsLeddgerHeaderId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.VsLeddgerHeaderId);
            prams[10] = GetSqlParameter("@SubLedgerHeaderId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.SubLedgerHeaderId);
            prams[11] = GetSqlParameter("@TotalAmount", ParameterDirection.Input, SqlDbType.Money, 8, this.TotalAmount);
            prams[12] = GetSqlParameter("@SupplierId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.SupplierId);
            prams[13] = GetSqlParameter("@Reference", ParameterDirection.Input, SqlDbType.NVarChar, 32, this.Reference);
            prams[14] = GetSqlParameter("@Remarks", ParameterDirection.Input, SqlDbType.NVarChar, 512, this.Remarks);
            prams[15] = GetSqlParameter("@TRF_REASON", ParameterDirection.Input, SqlDbType.VarChar, 2, this.TRF_REASON);
            prams[16] = GetSqlParameter("@EXPORTFLAG", ParameterDirection.Input, SqlDbType.Bit, 1, this.EXPORTFLAG);
            prams[17] = GetSqlParameter("@CONFIRM_TRF", ParameterDirection.Input, SqlDbType.VarChar, 1, this.CONFIRM_TRF);
            prams[18] = GetSqlParameter("@CONFIRM_TRF_LASTUPDATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CONFIRM_TRF_LASTUPDATE);
            prams[19] = GetSqlParameter("@CONFIRM_TRF_LASTUSER", ParameterDirection.Input, SqlDbType.VarChar, 4, this.CONFIRM_TRF_LASTUSER);
            prams[20] = GetSqlParameter("@Status", ParameterDirection.Input, SqlDbType.Int, 4, this.Status);
            prams[21] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[22] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CreatedBy);
            prams[23] = GetSqlParameter("@ModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ModifiedOn);
            prams[24] = GetSqlParameter("@ModifiedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ModifiedBy);
            prams[25] = GetSqlParameter("@Retired", ParameterDirection.Input, SqlDbType.Bit, 1, this.Retired);
            prams[26] = GetSqlParameter("@RetiredOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RetiredOn);
            prams[27] = GetSqlParameter("@RetiredBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.RetiredBy);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@HeaderId", SqlDbType.UniqueIdentifier, 16, this.HeaderId),
                GetSqlParameterWithoutDirection("@TxType", SqlDbType.VarChar, 3, this.TxType),
                GetSqlParameterWithoutDirection("@TxNumber", SqlDbType.VarChar, 12, this.TxNumber),
                GetSqlParameterWithoutDirection("@TxDate", SqlDbType.DateTime, 8, this.TxDate),
                GetSqlParameterWithoutDirection("@StaffId", SqlDbType.UniqueIdentifier, 16, this.StaffId),
                GetSqlParameterWithoutDirection("@Staff1", SqlDbType.UniqueIdentifier, 16, this.Staff1),
                GetSqlParameterWithoutDirection("@Staff2", SqlDbType.UniqueIdentifier, 16, this.Staff2),
                GetSqlParameterWithoutDirection("@WorkplaceId", SqlDbType.UniqueIdentifier, 16, this.WorkplaceId),
                GetSqlParameterWithoutDirection("@VsLocationId", SqlDbType.UniqueIdentifier, 16, this.VsLocationId),
                GetSqlParameterWithoutDirection("@VsLeddgerHeaderId", SqlDbType.UniqueIdentifier, 16, this.VsLeddgerHeaderId),
                GetSqlParameterWithoutDirection("@SubLedgerHeaderId", SqlDbType.UniqueIdentifier, 16, this.SubLedgerHeaderId),
                GetSqlParameterWithoutDirection("@TotalAmount", SqlDbType.Money, 8, this.TotalAmount),
                GetSqlParameterWithoutDirection("@SupplierId", SqlDbType.UniqueIdentifier, 16, this.SupplierId),
                GetSqlParameterWithoutDirection("@Reference", SqlDbType.NVarChar, 32, this.Reference),
                GetSqlParameterWithoutDirection("@Remarks", SqlDbType.NVarChar, 512, this.Remarks),
                GetSqlParameterWithoutDirection("@TRF_REASON", SqlDbType.VarChar, 2, this.TRF_REASON),
                GetSqlParameterWithoutDirection("@EXPORTFLAG", SqlDbType.Bit, 1, this.EXPORTFLAG),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF", SqlDbType.VarChar, 1, this.CONFIRM_TRF),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF_LASTUPDATE", SqlDbType.DateTime, 8, this.CONFIRM_TRF_LASTUPDATE),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF_LASTUSER", SqlDbType.VarChar, 4, this.CONFIRM_TRF_LASTUSER),
                GetSqlParameterWithoutDirection("@Status", SqlDbType.Int, 4, this.Status),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.UniqueIdentifier, 16, this.CreatedBy),
                GetSqlParameterWithoutDirection("@ModifiedOn", SqlDbType.DateTime, 8, this.ModifiedOn),
                GetSqlParameterWithoutDirection("@ModifiedBy", SqlDbType.UniqueIdentifier, 16, this.ModifiedBy),
                GetSqlParameterWithoutDirection("@Retired", SqlDbType.Bit, 1, this.Retired),
                GetSqlParameterWithoutDirection("@RetiredOn", SqlDbType.DateTime, 8, this.RetiredOn),
                GetSqlParameterWithoutDirection("@RetiredBy", SqlDbType.UniqueIdentifier, 16, this.RetiredBy)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("headerId: " + headerId.ToString()).Append("\r\n");
            builder.Append("txType: " + txType.ToString()).Append("\r\n");
            builder.Append("txNumber: " + txNumber.ToString()).Append("\r\n");
            builder.Append("txDate: " + txDate.ToString()).Append("\r\n");
            builder.Append("staffId: " + staffId.ToString()).Append("\r\n");
            builder.Append("staff1: " + staff1.ToString()).Append("\r\n");
            builder.Append("staff2: " + staff2.ToString()).Append("\r\n");
            builder.Append("workplaceId: " + workplaceId.ToString()).Append("\r\n");
            builder.Append("vsLocationId: " + vsLocationId.ToString()).Append("\r\n");
            builder.Append("vsLeddgerHeaderId: " + vsLeddgerHeaderId.ToString()).Append("\r\n");
            builder.Append("subLedgerHeaderId: " + subLedgerHeaderId.ToString()).Append("\r\n");
            builder.Append("totalAmount: " + totalAmount.ToString()).Append("\r\n");
            builder.Append("supplierId: " + supplierId.ToString()).Append("\r\n");
            builder.Append("reference: " + reference.ToString()).Append("\r\n");
            builder.Append("remarks: " + remarks.ToString()).Append("\r\n");
            builder.Append("tRF_REASON: " + tRF_REASON.ToString()).Append("\r\n");
            builder.Append("eXPORTFLAG: " + eXPORTFLAG.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF: " + cONFIRM_TRF.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF_LASTUPDATE: " + cONFIRM_TRF_LASTUPDATE.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF_LASTUSER: " + cONFIRM_TRF_LASTUSER.ToString()).Append("\r\n");
            builder.Append("status: " + status.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("modifiedOn: " + modifiedOn.ToString()).Append("\r\n");
            builder.Append("modifiedBy: " + modifiedBy.ToString()).Append("\r\n");
            builder.Append("retired: " + retired.ToString()).Append("\r\n");
            builder.Append("retiredOn: " + retiredOn.ToString()).Append("\r\n");
            builder.Append("retiredBy: " + retiredBy.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			InvtLedgerHeaderCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			// Filter the retired records
			if (WhereClause.Length > 0)
			{
				WhereClause += " AND Retired = 0";
			}
			else
			{
				WhereClause = "Retired = 0";
			}
			
			if (WhereClause.Length > 0)
			{
				source = InvtLedgerHeader.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = InvtLedgerHeader.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (InvtLedgerHeader item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.StaffId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.HeaderId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(InvtLedgerHeader target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.StaffId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				InvtLedgerHeader parentTemplate = InvtLedgerHeader.Load(target.StaffId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(InvtLedgerHeader target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="InvtLedgerHeader">InvtLedgerHeader</see> objects.
    /// </summary>
    public class InvtLedgerHeaderCollection : BindingList< InvtLedgerHeader>
    {
	}
}
