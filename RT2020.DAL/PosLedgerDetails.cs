using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.PosLedgerDetails.
    /// Date Created:   2020-08-09 02:14:12
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class PosLedgerDetails
    {
        private Guid key = Guid.Empty;
        private Guid detailsId = Guid.Empty;
        private Guid headerId = Guid.Empty;
        private string txType = String.Empty;
        private string txNumber = String.Empty;
        private DateTime txDate = DateTime.Parse("1900-1-1");
        private int lineNumber = 0;
        private Guid productId = Guid.Empty;
        private string sHOP = String.Empty;
        private string tERMINAL = String.Empty;
        private string oPERATOR = String.Empty;
        private decimal qty;
        private decimal unitAmount;
        private decimal discount;
        private decimal amount;
        private decimal averageCost;
        private decimal basicPrice;
        private string reference = String.Empty;
        private string barcode = String.Empty;
        private string serialNumber = String.Empty;
        private string vendorItemRef = String.Empty;
        private string couponNumber = String.Empty;
        private int replenishment = 0;
        private decimal cONFIRM_TRF_QTY;
        private decimal pROPRC;
        private decimal dISC_2;
        private string dISC_INDICATOR = String.Empty;
        private decimal dISC_VIPAMT;
        private decimal dISC_MARKDOWN;
        private decimal dISC_ITEMAMT;
        private string dISC_ITEMTYPE = String.Empty;
        private string dISC_ITEMREF = String.Empty;
        private decimal dISC_ALLAMT;
        private string dISC_ALLTYPE = String.Empty;
        private string dISC_ALLREF1 = String.Empty;
        private string dISC_ALLREF2 = String.Empty;
        private string dISC_ALLREF3 = String.Empty;
        private string dISCOUNTCODE = String.Empty;
        private decimal aMT_TTLSALES;
        private decimal aMT_NETSALES;
        private decimal aMT_TAX;

        /// <summary>
        /// Initialize an new empty PosLedgerDetails object.
        /// </summary>
        public PosLedgerDetails()
        {
        }
		
        /// <summary>
        /// Initialize a new PosLedgerDetails object with the given parameters.
        /// </summary>
        public PosLedgerDetails(Guid detailsId, Guid headerId, string txType, string txNumber, DateTime txDate, int lineNumber, Guid productId, string sHOP, string tERMINAL, string oPERATOR, decimal qty, decimal unitAmount, decimal discount, decimal amount, decimal averageCost, decimal basicPrice, string reference, string barcode, string serialNumber, string vendorItemRef, string couponNumber, int replenishment, decimal cONFIRM_TRF_QTY, decimal pROPRC, decimal dISC_2, string dISC_INDICATOR, decimal dISC_VIPAMT, decimal dISC_MARKDOWN, decimal dISC_ITEMAMT, string dISC_ITEMTYPE, string dISC_ITEMREF, decimal dISC_ALLAMT, string dISC_ALLTYPE, string dISC_ALLREF1, string dISC_ALLREF2, string dISC_ALLREF3, string dISCOUNTCODE, decimal aMT_TTLSALES, decimal aMT_NETSALES, decimal aMT_TAX)
        {
                this.detailsId = detailsId;
                this.headerId = headerId;
                this.txType = txType;
                this.txNumber = txNumber;
                this.txDate = txDate;
                this.lineNumber = lineNumber;
                this.productId = productId;
                this.sHOP = sHOP;
                this.tERMINAL = tERMINAL;
                this.oPERATOR = oPERATOR;
                this.qty = qty;
                this.unitAmount = unitAmount;
                this.discount = discount;
                this.amount = amount;
                this.averageCost = averageCost;
                this.basicPrice = basicPrice;
                this.reference = reference;
                this.barcode = barcode;
                this.serialNumber = serialNumber;
                this.vendorItemRef = vendorItemRef;
                this.couponNumber = couponNumber;
                this.replenishment = replenishment;
                this.cONFIRM_TRF_QTY = cONFIRM_TRF_QTY;
                this.pROPRC = pROPRC;
                this.dISC_2 = dISC_2;
                this.dISC_INDICATOR = dISC_INDICATOR;
                this.dISC_VIPAMT = dISC_VIPAMT;
                this.dISC_MARKDOWN = dISC_MARKDOWN;
                this.dISC_ITEMAMT = dISC_ITEMAMT;
                this.dISC_ITEMTYPE = dISC_ITEMTYPE;
                this.dISC_ITEMREF = dISC_ITEMREF;
                this.dISC_ALLAMT = dISC_ALLAMT;
                this.dISC_ALLTYPE = dISC_ALLTYPE;
                this.dISC_ALLREF1 = dISC_ALLREF1;
                this.dISC_ALLREF2 = dISC_ALLREF2;
                this.dISC_ALLREF3 = dISC_ALLREF3;
                this.dISCOUNTCODE = dISCOUNTCODE;
                this.aMT_TTLSALES = aMT_TTLSALES;
                this.aMT_NETSALES = aMT_NETSALES;
                this.aMT_TAX = aMT_TAX;
        }	
		
        /// <summary>
        /// Loads a PosLedgerDetails object from the database using the given DetailsId
        /// </summary>
        /// <param name="detailsId">The primary key value</param>
        /// <returns>A PosLedgerDetails object</returns>
        public static PosLedgerDetails Load(Guid detailsId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@DetailsId", detailsId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spPosLedgerDetails_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    PosLedgerDetails result = new PosLedgerDetails();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a PosLedgerDetails object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A PosLedgerDetails object</returns>
        public static PosLedgerDetails LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spPosLedgerDetails_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    PosLedgerDetails result = new PosLedgerDetails();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of PosLedgerDetails objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PosLedgerDetails objects in the database.</returns>
        public static PosLedgerDetailsCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spPosLedgerDetails_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PosLedgerDetails objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the PosLedgerDetails objects in the database ordered by the columns specified.</returns>
        public static PosLedgerDetailsCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spPosLedgerDetails_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PosLedgerDetails objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PosLedgerDetails objects in the database.</returns>
        public static PosLedgerDetailsCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spPosLedgerDetails_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PosLedgerDetails objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the PosLedgerDetails objects in the database ordered by the columns specified.</returns>
        public static PosLedgerDetailsCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spPosLedgerDetails_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PosLedgerDetails objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PosLedgerDetails objects in the database.</returns>
        public static PosLedgerDetailsCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            PosLedgerDetailsCollection result = new PosLedgerDetailsCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    PosLedgerDetails tmp = new PosLedgerDetails();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a PosLedgerDetails object from the database.
        /// </summary>
        /// <param name="detailsId">The primary key value</param>
        public static void Delete(Guid detailsId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@DetailsId", detailsId) };
            SqlHelper.Default.ExecuteNonQuery("spPosLedgerDetails_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) detailsId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) headerId = reader.GetGuid(1);
                if (!reader.IsDBNull(2)) txType = reader.GetString(2);
                if (!reader.IsDBNull(3)) txNumber = reader.GetString(3);
                if (!reader.IsDBNull(4)) txDate = reader.GetDateTime(4);
                if (!reader.IsDBNull(5)) lineNumber = reader.GetInt32(5);
                if (!reader.IsDBNull(6)) productId = reader.GetGuid(6);
                if (!reader.IsDBNull(7)) sHOP = reader.GetString(7);
                if (!reader.IsDBNull(8)) tERMINAL = reader.GetString(8);
                if (!reader.IsDBNull(9)) oPERATOR = reader.GetString(9);
                if (!reader.IsDBNull(10)) qty = reader.GetDecimal(10);
                if (!reader.IsDBNull(11)) unitAmount = reader.GetDecimal(11);
                if (!reader.IsDBNull(12)) discount = reader.GetDecimal(12);
                if (!reader.IsDBNull(13)) amount = reader.GetDecimal(13);
                if (!reader.IsDBNull(14)) averageCost = reader.GetDecimal(14);
                if (!reader.IsDBNull(15)) basicPrice = reader.GetDecimal(15);
                if (!reader.IsDBNull(16)) reference = reader.GetString(16);
                if (!reader.IsDBNull(17)) barcode = reader.GetString(17);
                if (!reader.IsDBNull(18)) serialNumber = reader.GetString(18);
                if (!reader.IsDBNull(19)) vendorItemRef = reader.GetString(19);
                if (!reader.IsDBNull(20)) couponNumber = reader.GetString(20);
                if (!reader.IsDBNull(21)) replenishment = reader.GetInt32(21);
                if (!reader.IsDBNull(22)) cONFIRM_TRF_QTY = reader.GetDecimal(22);
                if (!reader.IsDBNull(23)) pROPRC = reader.GetDecimal(23);
                if (!reader.IsDBNull(24)) dISC_2 = reader.GetDecimal(24);
                if (!reader.IsDBNull(25)) dISC_INDICATOR = reader.GetString(25);
                if (!reader.IsDBNull(26)) dISC_VIPAMT = reader.GetDecimal(26);
                if (!reader.IsDBNull(27)) dISC_MARKDOWN = reader.GetDecimal(27);
                if (!reader.IsDBNull(28)) dISC_ITEMAMT = reader.GetDecimal(28);
                if (!reader.IsDBNull(29)) dISC_ITEMTYPE = reader.GetString(29);
                if (!reader.IsDBNull(30)) dISC_ITEMREF = reader.GetString(30);
                if (!reader.IsDBNull(31)) dISC_ALLAMT = reader.GetDecimal(31);
                if (!reader.IsDBNull(32)) dISC_ALLTYPE = reader.GetString(32);
                if (!reader.IsDBNull(33)) dISC_ALLREF1 = reader.GetString(33);
                if (!reader.IsDBNull(34)) dISC_ALLREF2 = reader.GetString(34);
                if (!reader.IsDBNull(35)) dISC_ALLREF3 = reader.GetString(35);
                if (!reader.IsDBNull(36)) dISCOUNTCODE = reader.GetString(36);
                if (!reader.IsDBNull(37)) aMT_TTLSALES = reader.GetDecimal(37);
                if (!reader.IsDBNull(38)) aMT_NETSALES = reader.GetDecimal(38);
                if (!reader.IsDBNull(39)) aMT_TAX = reader.GetDecimal(39);
            }
        }
		
        public void Delete()
        {
            Delete(this.DetailsId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != DetailsId)
                    this.Delete();
                Update();
            }
        }

        public Guid DetailsId
        {
            get { return detailsId; }
            set { detailsId = value; }
        }

        public Guid HeaderId
        {
            get { return headerId; }
            set { headerId = value; }
        }

        public string TxType
        {
            get { return txType; }
            set { txType = value; }
        }

        public string TxNumber
        {
            get { return txNumber; }
            set { txNumber = value; }
        }

        public DateTime TxDate
        {
            get { return txDate; }
            set { txDate = value; }
        }

        public int LineNumber
        {
            get { return lineNumber; }
            set { lineNumber = value; }
        }

        public Guid ProductId
        {
            get { return productId; }
            set { productId = value; }
        }

        public string SHOP
        {
            get { return sHOP; }
            set { sHOP = value; }
        }

        public string TERMINAL
        {
            get { return tERMINAL; }
            set { tERMINAL = value; }
        }

        public string OPERATOR
        {
            get { return oPERATOR; }
            set { oPERATOR = value; }
        }

        public decimal Qty
        {
            get { return qty; }
            set { qty = value; }
        }

        public decimal UnitAmount
        {
            get { return unitAmount; }
            set { unitAmount = value; }
        }

        public decimal Discount
        {
            get { return discount; }
            set { discount = value; }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal AverageCost
        {
            get { return averageCost; }
            set { averageCost = value; }
        }

        public decimal BasicPrice
        {
            get { return basicPrice; }
            set { basicPrice = value; }
        }

        public string Reference
        {
            get { return reference; }
            set { reference = value; }
        }

        public string Barcode
        {
            get { return barcode; }
            set { barcode = value; }
        }

        public string SerialNumber
        {
            get { return serialNumber; }
            set { serialNumber = value; }
        }

        public string VendorItemRef
        {
            get { return vendorItemRef; }
            set { vendorItemRef = value; }
        }

        public string CouponNumber
        {
            get { return couponNumber; }
            set { couponNumber = value; }
        }

        public int Replenishment
        {
            get { return replenishment; }
            set { replenishment = value; }
        }

        public decimal CONFIRM_TRF_QTY
        {
            get { return cONFIRM_TRF_QTY; }
            set { cONFIRM_TRF_QTY = value; }
        }

        public decimal PROPRC
        {
            get { return pROPRC; }
            set { pROPRC = value; }
        }

        public decimal DISC_2
        {
            get { return dISC_2; }
            set { dISC_2 = value; }
        }

        public string DISC_INDICATOR
        {
            get { return dISC_INDICATOR; }
            set { dISC_INDICATOR = value; }
        }

        public decimal DISC_VIPAMT
        {
            get { return dISC_VIPAMT; }
            set { dISC_VIPAMT = value; }
        }

        public decimal DISC_MARKDOWN
        {
            get { return dISC_MARKDOWN; }
            set { dISC_MARKDOWN = value; }
        }

        public decimal DISC_ITEMAMT
        {
            get { return dISC_ITEMAMT; }
            set { dISC_ITEMAMT = value; }
        }

        public string DISC_ITEMTYPE
        {
            get { return dISC_ITEMTYPE; }
            set { dISC_ITEMTYPE = value; }
        }

        public string DISC_ITEMREF
        {
            get { return dISC_ITEMREF; }
            set { dISC_ITEMREF = value; }
        }

        public decimal DISC_ALLAMT
        {
            get { return dISC_ALLAMT; }
            set { dISC_ALLAMT = value; }
        }

        public string DISC_ALLTYPE
        {
            get { return dISC_ALLTYPE; }
            set { dISC_ALLTYPE = value; }
        }

        public string DISC_ALLREF1
        {
            get { return dISC_ALLREF1; }
            set { dISC_ALLREF1 = value; }
        }

        public string DISC_ALLREF2
        {
            get { return dISC_ALLREF2; }
            set { dISC_ALLREF2 = value; }
        }

        public string DISC_ALLREF3
        {
            get { return dISC_ALLREF3; }
            set { dISC_ALLREF3 = value; }
        }

        public string DISCOUNTCODE
        {
            get { return dISCOUNTCODE; }
            set { dISCOUNTCODE = value; }
        }

        public decimal AMT_TTLSALES
        {
            get { return aMT_TTLSALES; }
            set { aMT_TTLSALES = value; }
        }

        public decimal AMT_NETSALES
        {
            get { return aMT_NETSALES; }
            set { aMT_NETSALES = value; }
        }

        public decimal AMT_TAX
        {
            get { return aMT_TAX; }
            set { aMT_TAX = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spPosLedgerDetails_InsRec", "@DetailsId", out returnedValue, parameterValues);
            
            detailsId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spPosLedgerDetails_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[40];
            prams[0] = GetSqlParameter("@DetailsId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.DetailsId);
            prams[1] = GetSqlParameter("@HeaderId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.HeaderId);
            prams[2] = GetSqlParameter("@TxType", ParameterDirection.Input, SqlDbType.VarChar, 3, this.TxType);
            prams[3] = GetSqlParameter("@TxNumber", ParameterDirection.Input, SqlDbType.VarChar, 12, this.TxNumber);
            prams[4] = GetSqlParameter("@TxDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.TxDate);
            prams[5] = GetSqlParameter("@LineNumber", ParameterDirection.Input, SqlDbType.Int, 4, this.LineNumber);
            prams[6] = GetSqlParameter("@ProductId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ProductId);
            prams[7] = GetSqlParameter("@SHOP", ParameterDirection.Input, SqlDbType.VarChar, 4, this.SHOP);
            prams[8] = GetSqlParameter("@TERMINAL", ParameterDirection.Input, SqlDbType.VarChar, 2, this.TERMINAL);
            prams[9] = GetSqlParameter("@OPERATOR", ParameterDirection.Input, SqlDbType.VarChar, 4, this.OPERATOR);
            prams[10] = GetSqlParameter("@Qty", ParameterDirection.Input, SqlDbType.Decimal, 9, this.Qty);
            prams[11] = GetSqlParameter("@UnitAmount", ParameterDirection.Input, SqlDbType.Money, 8, this.UnitAmount);
            prams[12] = GetSqlParameter("@Discount", ParameterDirection.Input, SqlDbType.Decimal, 5, this.Discount);
            prams[13] = GetSqlParameter("@Amount", ParameterDirection.Input, SqlDbType.Money, 8, this.Amount);
            prams[14] = GetSqlParameter("@AverageCost", ParameterDirection.Input, SqlDbType.Money, 8, this.AverageCost);
            prams[15] = GetSqlParameter("@BasicPrice", ParameterDirection.Input, SqlDbType.Money, 8, this.BasicPrice);
            prams[16] = GetSqlParameter("@Reference", ParameterDirection.Input, SqlDbType.VarChar, 12, this.Reference);
            prams[17] = GetSqlParameter("@Barcode", ParameterDirection.Input, SqlDbType.VarChar, 22, this.Barcode);
            prams[18] = GetSqlParameter("@SerialNumber", ParameterDirection.Input, SqlDbType.VarChar, 20, this.SerialNumber);
            prams[19] = GetSqlParameter("@VendorItemRef", ParameterDirection.Input, SqlDbType.VarChar, 20, this.VendorItemRef);
            prams[20] = GetSqlParameter("@CouponNumber", ParameterDirection.Input, SqlDbType.VarChar, 30, this.CouponNumber);
            prams[21] = GetSqlParameter("@Replenishment", ParameterDirection.Input, SqlDbType.Int, 4, this.Replenishment);
            prams[22] = GetSqlParameter("@CONFIRM_TRF_QTY", ParameterDirection.Input, SqlDbType.Decimal, 9, this.CONFIRM_TRF_QTY);
            prams[23] = GetSqlParameter("@PROPRC", ParameterDirection.Input, SqlDbType.Money, 8, this.PROPRC);
            prams[24] = GetSqlParameter("@DISC_2", ParameterDirection.Input, SqlDbType.Money, 8, this.DISC_2);
            prams[25] = GetSqlParameter("@DISC_INDICATOR", ParameterDirection.Input, SqlDbType.VarChar, 5, this.DISC_INDICATOR);
            prams[26] = GetSqlParameter("@DISC_VIPAMT", ParameterDirection.Input, SqlDbType.Money, 8, this.DISC_VIPAMT);
            prams[27] = GetSqlParameter("@DISC_MARKDOWN", ParameterDirection.Input, SqlDbType.Money, 8, this.DISC_MARKDOWN);
            prams[28] = GetSqlParameter("@DISC_ITEMAMT", ParameterDirection.Input, SqlDbType.Money, 8, this.DISC_ITEMAMT);
            prams[29] = GetSqlParameter("@DISC_ITEMTYPE", ParameterDirection.Input, SqlDbType.VarChar, 4, this.DISC_ITEMTYPE);
            prams[30] = GetSqlParameter("@DISC_ITEMREF", ParameterDirection.Input, SqlDbType.VarChar, 12, this.DISC_ITEMREF);
            prams[31] = GetSqlParameter("@DISC_ALLAMT", ParameterDirection.Input, SqlDbType.Money, 8, this.DISC_ALLAMT);
            prams[32] = GetSqlParameter("@DISC_ALLTYPE", ParameterDirection.Input, SqlDbType.VarChar, 4, this.DISC_ALLTYPE);
            prams[33] = GetSqlParameter("@DISC_ALLREF1", ParameterDirection.Input, SqlDbType.VarChar, 12, this.DISC_ALLREF1);
            prams[34] = GetSqlParameter("@DISC_ALLREF2", ParameterDirection.Input, SqlDbType.VarChar, 12, this.DISC_ALLREF2);
            prams[35] = GetSqlParameter("@DISC_ALLREF3", ParameterDirection.Input, SqlDbType.VarChar, 12, this.DISC_ALLREF3);
            prams[36] = GetSqlParameter("@DISCOUNTCODE", ParameterDirection.Input, SqlDbType.VarChar, 30, this.DISCOUNTCODE);
            prams[37] = GetSqlParameter("@AMT_TTLSALES", ParameterDirection.Input, SqlDbType.Money, 8, this.AMT_TTLSALES);
            prams[38] = GetSqlParameter("@AMT_NETSALES", ParameterDirection.Input, SqlDbType.Money, 8, this.AMT_NETSALES);
            prams[39] = GetSqlParameter("@AMT_TAX", ParameterDirection.Input, SqlDbType.Money, 8, this.AMT_TAX);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@DetailsId", SqlDbType.UniqueIdentifier, 16, this.DetailsId),
                GetSqlParameterWithoutDirection("@HeaderId", SqlDbType.UniqueIdentifier, 16, this.HeaderId),
                GetSqlParameterWithoutDirection("@TxType", SqlDbType.VarChar, 3, this.TxType),
                GetSqlParameterWithoutDirection("@TxNumber", SqlDbType.VarChar, 12, this.TxNumber),
                GetSqlParameterWithoutDirection("@TxDate", SqlDbType.DateTime, 8, this.TxDate),
                GetSqlParameterWithoutDirection("@LineNumber", SqlDbType.Int, 4, this.LineNumber),
                GetSqlParameterWithoutDirection("@ProductId", SqlDbType.UniqueIdentifier, 16, this.ProductId),
                GetSqlParameterWithoutDirection("@SHOP", SqlDbType.VarChar, 4, this.SHOP),
                GetSqlParameterWithoutDirection("@TERMINAL", SqlDbType.VarChar, 2, this.TERMINAL),
                GetSqlParameterWithoutDirection("@OPERATOR", SqlDbType.VarChar, 4, this.OPERATOR),
                GetSqlParameterWithoutDirection("@Qty", SqlDbType.Decimal, 9, this.Qty),
                GetSqlParameterWithoutDirection("@UnitAmount", SqlDbType.Money, 8, this.UnitAmount),
                GetSqlParameterWithoutDirection("@Discount", SqlDbType.Decimal, 5, this.Discount),
                GetSqlParameterWithoutDirection("@Amount", SqlDbType.Money, 8, this.Amount),
                GetSqlParameterWithoutDirection("@AverageCost", SqlDbType.Money, 8, this.AverageCost),
                GetSqlParameterWithoutDirection("@BasicPrice", SqlDbType.Money, 8, this.BasicPrice),
                GetSqlParameterWithoutDirection("@Reference", SqlDbType.VarChar, 12, this.Reference),
                GetSqlParameterWithoutDirection("@Barcode", SqlDbType.VarChar, 22, this.Barcode),
                GetSqlParameterWithoutDirection("@SerialNumber", SqlDbType.VarChar, 20, this.SerialNumber),
                GetSqlParameterWithoutDirection("@VendorItemRef", SqlDbType.VarChar, 20, this.VendorItemRef),
                GetSqlParameterWithoutDirection("@CouponNumber", SqlDbType.VarChar, 30, this.CouponNumber),
                GetSqlParameterWithoutDirection("@Replenishment", SqlDbType.Int, 4, this.Replenishment),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF_QTY", SqlDbType.Decimal, 9, this.CONFIRM_TRF_QTY),
                GetSqlParameterWithoutDirection("@PROPRC", SqlDbType.Money, 8, this.PROPRC),
                GetSqlParameterWithoutDirection("@DISC_2", SqlDbType.Money, 8, this.DISC_2),
                GetSqlParameterWithoutDirection("@DISC_INDICATOR", SqlDbType.VarChar, 5, this.DISC_INDICATOR),
                GetSqlParameterWithoutDirection("@DISC_VIPAMT", SqlDbType.Money, 8, this.DISC_VIPAMT),
                GetSqlParameterWithoutDirection("@DISC_MARKDOWN", SqlDbType.Money, 8, this.DISC_MARKDOWN),
                GetSqlParameterWithoutDirection("@DISC_ITEMAMT", SqlDbType.Money, 8, this.DISC_ITEMAMT),
                GetSqlParameterWithoutDirection("@DISC_ITEMTYPE", SqlDbType.VarChar, 4, this.DISC_ITEMTYPE),
                GetSqlParameterWithoutDirection("@DISC_ITEMREF", SqlDbType.VarChar, 12, this.DISC_ITEMREF),
                GetSqlParameterWithoutDirection("@DISC_ALLAMT", SqlDbType.Money, 8, this.DISC_ALLAMT),
                GetSqlParameterWithoutDirection("@DISC_ALLTYPE", SqlDbType.VarChar, 4, this.DISC_ALLTYPE),
                GetSqlParameterWithoutDirection("@DISC_ALLREF1", SqlDbType.VarChar, 12, this.DISC_ALLREF1),
                GetSqlParameterWithoutDirection("@DISC_ALLREF2", SqlDbType.VarChar, 12, this.DISC_ALLREF2),
                GetSqlParameterWithoutDirection("@DISC_ALLREF3", SqlDbType.VarChar, 12, this.DISC_ALLREF3),
                GetSqlParameterWithoutDirection("@DISCOUNTCODE", SqlDbType.VarChar, 30, this.DISCOUNTCODE),
                GetSqlParameterWithoutDirection("@AMT_TTLSALES", SqlDbType.Money, 8, this.AMT_TTLSALES),
                GetSqlParameterWithoutDirection("@AMT_NETSALES", SqlDbType.Money, 8, this.AMT_NETSALES),
                GetSqlParameterWithoutDirection("@AMT_TAX", SqlDbType.Money, 8, this.AMT_TAX)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("detailsId: " + detailsId.ToString()).Append("\r\n");
            builder.Append("headerId: " + headerId.ToString()).Append("\r\n");
            builder.Append("txType: " + txType.ToString()).Append("\r\n");
            builder.Append("txNumber: " + txNumber.ToString()).Append("\r\n");
            builder.Append("txDate: " + txDate.ToString()).Append("\r\n");
            builder.Append("lineNumber: " + lineNumber.ToString()).Append("\r\n");
            builder.Append("productId: " + productId.ToString()).Append("\r\n");
            builder.Append("sHOP: " + sHOP.ToString()).Append("\r\n");
            builder.Append("tERMINAL: " + tERMINAL.ToString()).Append("\r\n");
            builder.Append("oPERATOR: " + oPERATOR.ToString()).Append("\r\n");
            builder.Append("qty: " + qty.ToString()).Append("\r\n");
            builder.Append("unitAmount: " + unitAmount.ToString()).Append("\r\n");
            builder.Append("discount: " + discount.ToString()).Append("\r\n");
            builder.Append("amount: " + amount.ToString()).Append("\r\n");
            builder.Append("averageCost: " + averageCost.ToString()).Append("\r\n");
            builder.Append("basicPrice: " + basicPrice.ToString()).Append("\r\n");
            builder.Append("reference: " + reference.ToString()).Append("\r\n");
            builder.Append("barcode: " + barcode.ToString()).Append("\r\n");
            builder.Append("serialNumber: " + serialNumber.ToString()).Append("\r\n");
            builder.Append("vendorItemRef: " + vendorItemRef.ToString()).Append("\r\n");
            builder.Append("couponNumber: " + couponNumber.ToString()).Append("\r\n");
            builder.Append("replenishment: " + replenishment.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF_QTY: " + cONFIRM_TRF_QTY.ToString()).Append("\r\n");
            builder.Append("pROPRC: " + pROPRC.ToString()).Append("\r\n");
            builder.Append("dISC_2: " + dISC_2.ToString()).Append("\r\n");
            builder.Append("dISC_INDICATOR: " + dISC_INDICATOR.ToString()).Append("\r\n");
            builder.Append("dISC_VIPAMT: " + dISC_VIPAMT.ToString()).Append("\r\n");
            builder.Append("dISC_MARKDOWN: " + dISC_MARKDOWN.ToString()).Append("\r\n");
            builder.Append("dISC_ITEMAMT: " + dISC_ITEMAMT.ToString()).Append("\r\n");
            builder.Append("dISC_ITEMTYPE: " + dISC_ITEMTYPE.ToString()).Append("\r\n");
            builder.Append("dISC_ITEMREF: " + dISC_ITEMREF.ToString()).Append("\r\n");
            builder.Append("dISC_ALLAMT: " + dISC_ALLAMT.ToString()).Append("\r\n");
            builder.Append("dISC_ALLTYPE: " + dISC_ALLTYPE.ToString()).Append("\r\n");
            builder.Append("dISC_ALLREF1: " + dISC_ALLREF1.ToString()).Append("\r\n");
            builder.Append("dISC_ALLREF2: " + dISC_ALLREF2.ToString()).Append("\r\n");
            builder.Append("dISC_ALLREF3: " + dISC_ALLREF3.ToString()).Append("\r\n");
            builder.Append("dISCOUNTCODE: " + dISCOUNTCODE.ToString()).Append("\r\n");
            builder.Append("aMT_TTLSALES: " + aMT_TTLSALES.ToString()).Append("\r\n");
            builder.Append("aMT_NETSALES: " + aMT_NETSALES.ToString()).Append("\r\n");
            builder.Append("aMT_TAX: " + aMT_TAX.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			PosLedgerDetailsCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = PosLedgerDetails.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = PosLedgerDetails.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (PosLedgerDetails item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.HeaderId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.DetailsId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(PosLedgerDetails target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.HeaderId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				PosLedgerDetails parentTemplate = PosLedgerDetails.Load(target.HeaderId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(PosLedgerDetails target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="PosLedgerDetails">PosLedgerDetails</see> objects.
    /// </summary>
    public class PosLedgerDetailsCollection : BindingList< PosLedgerDetails>
    {
	}
}
