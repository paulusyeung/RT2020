using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.Workplace.
    /// Date Created:   2020-08-09 02:14:17
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class Workplace
    {
        private Guid key = Guid.Empty;
        private Guid workplaceId = Guid.Empty;
        private Guid zoneId = Guid.Empty;
        private string workplaceCode = String.Empty;
        private string workplaceInitial = String.Empty;
        private string workplaceName = String.Empty;
        private string workplaceName_Chs = String.Empty;
        private string workplaceName_Cht = String.Empty;
        private string alternateWorkplaceCode = String.Empty;
        private string email = String.Empty;
        private string password = String.Empty;
        private decimal bFQTY;
        private decimal bFAMT;
        private decimal cDQTY;
        private decimal cDAMT;
        private bool downloadToPOS;
        private bool downloadToCounter;
        private bool downloadToShop;
        private Guid natureId = Guid.Empty;
        private Guid lineOfOperationId = Guid.Empty;
        private int priority = 0;
        private int status = 0;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private Guid createdBy = Guid.Empty;
        private DateTime modifiedOn = DateTime.Parse("1900-1-1");
        private Guid modifiedBy = Guid.Empty;
        private bool retired;
        private Guid retiredBy = Guid.Empty;
        private DateTime retiredOn = DateTime.Parse("1900-1-1");

        /// <summary>
        /// Initialize an new empty Workplace object.
        /// </summary>
        public Workplace()
        {
        }
		
        /// <summary>
        /// Initialize a new Workplace object with the given parameters.
        /// </summary>
        public Workplace(Guid workplaceId, Guid zoneId, string workplaceCode, string workplaceInitial, string workplaceName, string workplaceName_Chs, string workplaceName_Cht, string alternateWorkplaceCode, string email, string password, decimal bFQTY, decimal bFAMT, decimal cDQTY, decimal cDAMT, bool downloadToPOS, bool downloadToCounter, bool downloadToShop, Guid natureId, Guid lineOfOperationId, int priority, int status, DateTime createdOn, Guid createdBy, DateTime modifiedOn, Guid modifiedBy, bool retired, Guid retiredBy, DateTime retiredOn)
        {
                this.workplaceId = workplaceId;
                this.zoneId = zoneId;
                this.workplaceCode = workplaceCode;
                this.workplaceInitial = workplaceInitial;
                this.workplaceName = workplaceName;
                this.workplaceName_Chs = workplaceName_Chs;
                this.workplaceName_Cht = workplaceName_Cht;
                this.alternateWorkplaceCode = alternateWorkplaceCode;
                this.email = email;
                this.password = password;
                this.bFQTY = bFQTY;
                this.bFAMT = bFAMT;
                this.cDQTY = cDQTY;
                this.cDAMT = cDAMT;
                this.downloadToPOS = downloadToPOS;
                this.downloadToCounter = downloadToCounter;
                this.downloadToShop = downloadToShop;
                this.natureId = natureId;
                this.lineOfOperationId = lineOfOperationId;
                this.priority = priority;
                this.status = status;
                this.createdOn = createdOn;
                this.createdBy = createdBy;
                this.modifiedOn = modifiedOn;
                this.modifiedBy = modifiedBy;
                this.retired = retired;
                this.retiredBy = retiredBy;
                this.retiredOn = retiredOn;
        }	
		
        /// <summary>
        /// Loads a Workplace object from the database using the given WorkplaceId
        /// </summary>
        /// <param name="workplaceId">The primary key value</param>
        /// <returns>A Workplace object</returns>
        public static Workplace Load(Guid workplaceId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WorkplaceId", workplaceId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spWorkplace_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    Workplace result = new Workplace();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a Workplace object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A Workplace object</returns>
        public static Workplace LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spWorkplace_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    Workplace result = new Workplace();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of Workplace objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Workplace objects in the database.</returns>
        public static WorkplaceCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spWorkplace_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Workplace objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the Workplace objects in the database ordered by the columns specified.</returns>
        public static WorkplaceCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spWorkplace_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Workplace objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Workplace objects in the database.</returns>
        public static WorkplaceCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spWorkplace_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Workplace objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the Workplace objects in the database ordered by the columns specified.</returns>
        public static WorkplaceCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spWorkplace_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of Workplace objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the Workplace objects in the database.</returns>
        public static WorkplaceCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            WorkplaceCollection result = new WorkplaceCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    Workplace tmp = new Workplace();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a Workplace object from the database.
        /// </summary>
        /// <param name="workplaceId">The primary key value</param>
        public static void Delete(Guid workplaceId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WorkplaceId", workplaceId) };
            SqlHelper.Default.ExecuteNonQuery("spWorkplace_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) workplaceId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) zoneId = reader.GetGuid(1);
                if (!reader.IsDBNull(2)) workplaceCode = reader.GetString(2);
                if (!reader.IsDBNull(3)) workplaceInitial = reader.GetString(3);
                if (!reader.IsDBNull(4)) workplaceName = reader.GetString(4);
                if (!reader.IsDBNull(5)) workplaceName_Chs = reader.GetString(5);
                if (!reader.IsDBNull(6)) workplaceName_Cht = reader.GetString(6);
                if (!reader.IsDBNull(7)) alternateWorkplaceCode = reader.GetString(7);
                if (!reader.IsDBNull(8)) email = reader.GetString(8);
                if (!reader.IsDBNull(9)) password = reader.GetString(9);
                if (!reader.IsDBNull(10)) bFQTY = reader.GetDecimal(10);
                if (!reader.IsDBNull(11)) bFAMT = reader.GetDecimal(11);
                if (!reader.IsDBNull(12)) cDQTY = reader.GetDecimal(12);
                if (!reader.IsDBNull(13)) cDAMT = reader.GetDecimal(13);
                if (!reader.IsDBNull(14)) downloadToPOS = reader.GetBoolean(14);
                if (!reader.IsDBNull(15)) downloadToCounter = reader.GetBoolean(15);
                if (!reader.IsDBNull(16)) downloadToShop = reader.GetBoolean(16);
                if (!reader.IsDBNull(17)) natureId = reader.GetGuid(17);
                if (!reader.IsDBNull(18)) lineOfOperationId = reader.GetGuid(18);
                if (!reader.IsDBNull(19)) priority = reader.GetInt32(19);
                if (!reader.IsDBNull(20)) status = reader.GetInt32(20);
                if (!reader.IsDBNull(21)) createdOn = reader.GetDateTime(21);
                if (!reader.IsDBNull(22)) createdBy = reader.GetGuid(22);
                if (!reader.IsDBNull(23)) modifiedOn = reader.GetDateTime(23);
                if (!reader.IsDBNull(24)) modifiedBy = reader.GetGuid(24);
                if (!reader.IsDBNull(25)) retired = reader.GetBoolean(25);
                if (!reader.IsDBNull(26)) retiredBy = reader.GetGuid(26);
                if (!reader.IsDBNull(27)) retiredOn = reader.GetDateTime(27);
            }
        }
		
        public void Delete()
        {
            Delete(this.WorkplaceId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != WorkplaceId)
                    this.Delete();
                Update();
            }
        }

        public Guid WorkplaceId
        {
            get { return workplaceId; }
            set { workplaceId = value; }
        }

        public Guid ZoneId
        {
            get { return zoneId; }
            set { zoneId = value; }
        }

        public string WorkplaceCode
        {
            get { return workplaceCode; }
            set { workplaceCode = value; }
        }

        public string WorkplaceInitial
        {
            get { return workplaceInitial; }
            set { workplaceInitial = value; }
        }

        public string WorkplaceName
        {
            get { return workplaceName; }
            set { workplaceName = value; }
        }

        public string WorkplaceName_Chs
        {
            get { return workplaceName_Chs; }
            set { workplaceName_Chs = value; }
        }

        public string WorkplaceName_Cht
        {
            get { return workplaceName_Cht; }
            set { workplaceName_Cht = value; }
        }

        public string AlternateWorkplaceCode
        {
            get { return alternateWorkplaceCode; }
            set { alternateWorkplaceCode = value; }
        }

        public string Email
        {
            get { return email; }
            set { email = value; }
        }

        public string Password
        {
            get { return password; }
            set { password = value; }
        }

        public decimal BFQTY
        {
            get { return bFQTY; }
            set { bFQTY = value; }
        }

        public decimal BFAMT
        {
            get { return bFAMT; }
            set { bFAMT = value; }
        }

        public decimal CDQTY
        {
            get { return cDQTY; }
            set { cDQTY = value; }
        }

        public decimal CDAMT
        {
            get { return cDAMT; }
            set { cDAMT = value; }
        }

        public bool DownloadToPOS
        {
            get { return downloadToPOS; }
            set { downloadToPOS = value; }
        }

        public bool DownloadToCounter
        {
            get { return downloadToCounter; }
            set { downloadToCounter = value; }
        }

        public bool DownloadToShop
        {
            get { return downloadToShop; }
            set { downloadToShop = value; }
        }

        public Guid NatureId
        {
            get { return natureId; }
            set { natureId = value; }
        }

        public Guid LineOfOperationId
        {
            get { return lineOfOperationId; }
            set { lineOfOperationId = value; }
        }

        public int Priority
        {
            get { return priority; }
            set { priority = value; }
        }

        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public Guid CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime ModifiedOn
        {
            get { return modifiedOn; }
            set { modifiedOn = value; }
        }

        public Guid ModifiedBy
        {
            get { return modifiedBy; }
            set { modifiedBy = value; }
        }

        public bool Retired
        {
            get { return retired; }
            set { retired = value; }
        }

        public Guid RetiredBy
        {
            get { return retiredBy; }
            set { retiredBy = value; }
        }

        public DateTime RetiredOn
        {
            get { return retiredOn; }
            set { retiredOn = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spWorkplace_InsRec", "@WorkplaceId", out returnedValue, parameterValues);
            
            workplaceId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spWorkplace_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[28];
            prams[0] = GetSqlParameter("@WorkplaceId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.WorkplaceId);
            prams[1] = GetSqlParameter("@ZoneId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ZoneId);
            prams[2] = GetSqlParameter("@WorkplaceCode", ParameterDirection.Input, SqlDbType.VarChar, 4, this.WorkplaceCode);
            prams[3] = GetSqlParameter("@WorkplaceInitial", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.WorkplaceInitial);
            prams[4] = GetSqlParameter("@WorkplaceName", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.WorkplaceName);
            prams[5] = GetSqlParameter("@WorkplaceName_Chs", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.WorkplaceName_Chs);
            prams[6] = GetSqlParameter("@WorkplaceName_Cht", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.WorkplaceName_Cht);
            prams[7] = GetSqlParameter("@AlternateWorkplaceCode", ParameterDirection.Input, SqlDbType.VarChar, 4, this.AlternateWorkplaceCode);
            prams[8] = GetSqlParameter("@Email", ParameterDirection.Input, SqlDbType.VarChar, 50, this.Email);
            prams[9] = GetSqlParameter("@Password", ParameterDirection.Input, SqlDbType.VarChar, 8, this.Password);
            prams[10] = GetSqlParameter("@BFQTY", ParameterDirection.Input, SqlDbType.Decimal, 9, this.BFQTY);
            prams[11] = GetSqlParameter("@BFAMT", ParameterDirection.Input, SqlDbType.Money, 8, this.BFAMT);
            prams[12] = GetSqlParameter("@CDQTY", ParameterDirection.Input, SqlDbType.Decimal, 9, this.CDQTY);
            prams[13] = GetSqlParameter("@CDAMT", ParameterDirection.Input, SqlDbType.Money, 8, this.CDAMT);
            prams[14] = GetSqlParameter("@DownloadToPOS", ParameterDirection.Input, SqlDbType.Bit, 1, this.DownloadToPOS);
            prams[15] = GetSqlParameter("@DownloadToCounter", ParameterDirection.Input, SqlDbType.Bit, 1, this.DownloadToCounter);
            prams[16] = GetSqlParameter("@DownloadToShop", ParameterDirection.Input, SqlDbType.Bit, 1, this.DownloadToShop);
            prams[17] = GetSqlParameter("@NatureId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.NatureId);
            prams[18] = GetSqlParameter("@LineOfOperationId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.LineOfOperationId);
            prams[19] = GetSqlParameter("@Priority", ParameterDirection.Input, SqlDbType.Int, 4, this.Priority);
            prams[20] = GetSqlParameter("@Status", ParameterDirection.Input, SqlDbType.Int, 4, this.Status);
            prams[21] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[22] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CreatedBy);
            prams[23] = GetSqlParameter("@ModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ModifiedOn);
            prams[24] = GetSqlParameter("@ModifiedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ModifiedBy);
            prams[25] = GetSqlParameter("@Retired", ParameterDirection.Input, SqlDbType.Bit, 1, this.Retired);
            prams[26] = GetSqlParameter("@RetiredBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.RetiredBy);
            prams[27] = GetSqlParameter("@RetiredOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RetiredOn);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@WorkplaceId", SqlDbType.UniqueIdentifier, 16, this.WorkplaceId),
                GetSqlParameterWithoutDirection("@ZoneId", SqlDbType.UniqueIdentifier, 16, this.ZoneId),
                GetSqlParameterWithoutDirection("@WorkplaceCode", SqlDbType.VarChar, 4, this.WorkplaceCode),
                GetSqlParameterWithoutDirection("@WorkplaceInitial", SqlDbType.NVarChar, 10, this.WorkplaceInitial),
                GetSqlParameterWithoutDirection("@WorkplaceName", SqlDbType.NVarChar, 64, this.WorkplaceName),
                GetSqlParameterWithoutDirection("@WorkplaceName_Chs", SqlDbType.NVarChar, 64, this.WorkplaceName_Chs),
                GetSqlParameterWithoutDirection("@WorkplaceName_Cht", SqlDbType.NVarChar, 64, this.WorkplaceName_Cht),
                GetSqlParameterWithoutDirection("@AlternateWorkplaceCode", SqlDbType.VarChar, 4, this.AlternateWorkplaceCode),
                GetSqlParameterWithoutDirection("@Email", SqlDbType.VarChar, 50, this.Email),
                GetSqlParameterWithoutDirection("@Password", SqlDbType.VarChar, 8, this.Password),
                GetSqlParameterWithoutDirection("@BFQTY", SqlDbType.Decimal, 9, this.BFQTY),
                GetSqlParameterWithoutDirection("@BFAMT", SqlDbType.Money, 8, this.BFAMT),
                GetSqlParameterWithoutDirection("@CDQTY", SqlDbType.Decimal, 9, this.CDQTY),
                GetSqlParameterWithoutDirection("@CDAMT", SqlDbType.Money, 8, this.CDAMT),
                GetSqlParameterWithoutDirection("@DownloadToPOS", SqlDbType.Bit, 1, this.DownloadToPOS),
                GetSqlParameterWithoutDirection("@DownloadToCounter", SqlDbType.Bit, 1, this.DownloadToCounter),
                GetSqlParameterWithoutDirection("@DownloadToShop", SqlDbType.Bit, 1, this.DownloadToShop),
                GetSqlParameterWithoutDirection("@NatureId", SqlDbType.UniqueIdentifier, 16, this.NatureId),
                GetSqlParameterWithoutDirection("@LineOfOperationId", SqlDbType.UniqueIdentifier, 16, this.LineOfOperationId),
                GetSqlParameterWithoutDirection("@Priority", SqlDbType.Int, 4, this.Priority),
                GetSqlParameterWithoutDirection("@Status", SqlDbType.Int, 4, this.Status),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.UniqueIdentifier, 16, this.CreatedBy),
                GetSqlParameterWithoutDirection("@ModifiedOn", SqlDbType.DateTime, 8, this.ModifiedOn),
                GetSqlParameterWithoutDirection("@ModifiedBy", SqlDbType.UniqueIdentifier, 16, this.ModifiedBy),
                GetSqlParameterWithoutDirection("@Retired", SqlDbType.Bit, 1, this.Retired),
                GetSqlParameterWithoutDirection("@RetiredBy", SqlDbType.UniqueIdentifier, 16, this.RetiredBy),
                GetSqlParameterWithoutDirection("@RetiredOn", SqlDbType.DateTime, 8, this.RetiredOn)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("workplaceId: " + workplaceId.ToString()).Append("\r\n");
            builder.Append("zoneId: " + zoneId.ToString()).Append("\r\n");
            builder.Append("workplaceCode: " + workplaceCode.ToString()).Append("\r\n");
            builder.Append("workplaceInitial: " + workplaceInitial.ToString()).Append("\r\n");
            builder.Append("workplaceName: " + workplaceName.ToString()).Append("\r\n");
            builder.Append("workplaceName_Chs: " + workplaceName_Chs.ToString()).Append("\r\n");
            builder.Append("workplaceName_Cht: " + workplaceName_Cht.ToString()).Append("\r\n");
            builder.Append("alternateWorkplaceCode: " + alternateWorkplaceCode.ToString()).Append("\r\n");
            builder.Append("email: " + email.ToString()).Append("\r\n");
            builder.Append("password: " + password.ToString()).Append("\r\n");
            builder.Append("bFQTY: " + bFQTY.ToString()).Append("\r\n");
            builder.Append("bFAMT: " + bFAMT.ToString()).Append("\r\n");
            builder.Append("cDQTY: " + cDQTY.ToString()).Append("\r\n");
            builder.Append("cDAMT: " + cDAMT.ToString()).Append("\r\n");
            builder.Append("downloadToPOS: " + downloadToPOS.ToString()).Append("\r\n");
            builder.Append("downloadToCounter: " + downloadToCounter.ToString()).Append("\r\n");
            builder.Append("downloadToShop: " + downloadToShop.ToString()).Append("\r\n");
            builder.Append("natureId: " + natureId.ToString()).Append("\r\n");
            builder.Append("lineOfOperationId: " + lineOfOperationId.ToString()).Append("\r\n");
            builder.Append("priority: " + priority.ToString()).Append("\r\n");
            builder.Append("status: " + status.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("modifiedOn: " + modifiedOn.ToString()).Append("\r\n");
            builder.Append("modifiedBy: " + modifiedBy.ToString()).Append("\r\n");
            builder.Append("retired: " + retired.ToString()).Append("\r\n");
            builder.Append("retiredBy: " + retiredBy.ToString()).Append("\r\n");
            builder.Append("retiredOn: " + retiredOn.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			WorkplaceCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			// Filter the retired records
			if (WhereClause.Length > 0)
			{
				WhereClause += " AND Retired = 0";
			}
			else
			{
				WhereClause = "Retired = 0";
			}
			
			if (WhereClause.Length > 0)
			{
				source = Workplace.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = Workplace.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (Workplace item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.ZoneId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.WorkplaceId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(Workplace target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.ZoneId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				Workplace parentTemplate = Workplace.Load(target.ZoneId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(Workplace target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="Workplace">Workplace</see> objects.
    /// </summary>
    public class WorkplaceCollection : BindingList< Workplace>
    {
	}
}
