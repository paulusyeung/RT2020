using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.PurchaseOrderReceiveHeader.
    /// Date Created:   2020-08-09 02:14:15
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class PurchaseOrderReceiveHeader
    {
        private Guid key = Guid.Empty;
        private Guid receiveHeaderId = Guid.Empty;
        private string txType = String.Empty;
        private string txNumber = String.Empty;
        private DateTime txDate = DateTime.Parse("1900-1-1");
        private Guid orderHeaderId = Guid.Empty;
        private Guid workplaceId = Guid.Empty;
        private Guid staffId = Guid.Empty;
        private string supplierInvoiceNumber = String.Empty;
        private decimal exchangeRate;
        private DateTime postedOn = DateTime.Parse("1900-1-1");
        private Guid postedBy = Guid.Empty;
        private decimal totalCost;
        private decimal totalQty;
        private decimal freightChargePcn;
        private decimal freightChargeAmt;
        private decimal handlingChargePcn;
        private decimal handlingChargeAmt;
        private decimal insuranceChargePcn;
        private decimal insuranceChargeAmt;
        private decimal otherChargesPcn;
        private decimal otherChargesAmt;
        private decimal groupDiscount1;
        private decimal groupDiscount2;
        private decimal groupDiscount3;
        private bool stockReceiveAllocated;
        private bool eXPORTFLAG;
        private int status = 0;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private Guid createdBy = Guid.Empty;
        private DateTime modifiedOn = DateTime.Parse("1900-1-1");
        private Guid modifiedBy = Guid.Empty;
        private bool retired;
        private DateTime retiredOn = DateTime.Parse("1900-1-1");
        private Guid retiredBy = Guid.Empty;

        /// <summary>
        /// Initialize an new empty PurchaseOrderReceiveHeader object.
        /// </summary>
        public PurchaseOrderReceiveHeader()
        {
        }
		
        /// <summary>
        /// Initialize a new PurchaseOrderReceiveHeader object with the given parameters.
        /// </summary>
        public PurchaseOrderReceiveHeader(Guid receiveHeaderId, string txType, string txNumber, DateTime txDate, Guid orderHeaderId, Guid workplaceId, Guid staffId, string supplierInvoiceNumber, decimal exchangeRate, DateTime postedOn, Guid postedBy, decimal totalCost, decimal totalQty, decimal freightChargePcn, decimal freightChargeAmt, decimal handlingChargePcn, decimal handlingChargeAmt, decimal insuranceChargePcn, decimal insuranceChargeAmt, decimal otherChargesPcn, decimal otherChargesAmt, decimal groupDiscount1, decimal groupDiscount2, decimal groupDiscount3, bool stockReceiveAllocated, bool eXPORTFLAG, int status, DateTime createdOn, Guid createdBy, DateTime modifiedOn, Guid modifiedBy, bool retired, DateTime retiredOn, Guid retiredBy)
        {
                this.receiveHeaderId = receiveHeaderId;
                this.txType = txType;
                this.txNumber = txNumber;
                this.txDate = txDate;
                this.orderHeaderId = orderHeaderId;
                this.workplaceId = workplaceId;
                this.staffId = staffId;
                this.supplierInvoiceNumber = supplierInvoiceNumber;
                this.exchangeRate = exchangeRate;
                this.postedOn = postedOn;
                this.postedBy = postedBy;
                this.totalCost = totalCost;
                this.totalQty = totalQty;
                this.freightChargePcn = freightChargePcn;
                this.freightChargeAmt = freightChargeAmt;
                this.handlingChargePcn = handlingChargePcn;
                this.handlingChargeAmt = handlingChargeAmt;
                this.insuranceChargePcn = insuranceChargePcn;
                this.insuranceChargeAmt = insuranceChargeAmt;
                this.otherChargesPcn = otherChargesPcn;
                this.otherChargesAmt = otherChargesAmt;
                this.groupDiscount1 = groupDiscount1;
                this.groupDiscount2 = groupDiscount2;
                this.groupDiscount3 = groupDiscount3;
                this.stockReceiveAllocated = stockReceiveAllocated;
                this.eXPORTFLAG = eXPORTFLAG;
                this.status = status;
                this.createdOn = createdOn;
                this.createdBy = createdBy;
                this.modifiedOn = modifiedOn;
                this.modifiedBy = modifiedBy;
                this.retired = retired;
                this.retiredOn = retiredOn;
                this.retiredBy = retiredBy;
        }	
		
        /// <summary>
        /// Loads a PurchaseOrderReceiveHeader object from the database using the given ReceiveHeaderId
        /// </summary>
        /// <param name="receiveHeaderId">The primary key value</param>
        /// <returns>A PurchaseOrderReceiveHeader object</returns>
        public static PurchaseOrderReceiveHeader Load(Guid receiveHeaderId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ReceiveHeaderId", receiveHeaderId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spPurchaseOrderReceiveHeader_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    PurchaseOrderReceiveHeader result = new PurchaseOrderReceiveHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a PurchaseOrderReceiveHeader object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A PurchaseOrderReceiveHeader object</returns>
        public static PurchaseOrderReceiveHeader LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spPurchaseOrderReceiveHeader_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    PurchaseOrderReceiveHeader result = new PurchaseOrderReceiveHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of PurchaseOrderReceiveHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderReceiveHeader objects in the database.</returns>
        public static PurchaseOrderReceiveHeaderCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spPurchaseOrderReceiveHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PurchaseOrderReceiveHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderReceiveHeader objects in the database ordered by the columns specified.</returns>
        public static PurchaseOrderReceiveHeaderCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spPurchaseOrderReceiveHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PurchaseOrderReceiveHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderReceiveHeader objects in the database.</returns>
        public static PurchaseOrderReceiveHeaderCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spPurchaseOrderReceiveHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PurchaseOrderReceiveHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderReceiveHeader objects in the database ordered by the columns specified.</returns>
        public static PurchaseOrderReceiveHeaderCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spPurchaseOrderReceiveHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PurchaseOrderReceiveHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderReceiveHeader objects in the database.</returns>
        public static PurchaseOrderReceiveHeaderCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            PurchaseOrderReceiveHeaderCollection result = new PurchaseOrderReceiveHeaderCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    PurchaseOrderReceiveHeader tmp = new PurchaseOrderReceiveHeader();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a PurchaseOrderReceiveHeader object from the database.
        /// </summary>
        /// <param name="receiveHeaderId">The primary key value</param>
        public static void Delete(Guid receiveHeaderId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ReceiveHeaderId", receiveHeaderId) };
            SqlHelper.Default.ExecuteNonQuery("spPurchaseOrderReceiveHeader_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) receiveHeaderId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) txType = reader.GetString(1);
                if (!reader.IsDBNull(2)) txNumber = reader.GetString(2);
                if (!reader.IsDBNull(3)) txDate = reader.GetDateTime(3);
                if (!reader.IsDBNull(4)) orderHeaderId = reader.GetGuid(4);
                if (!reader.IsDBNull(5)) workplaceId = reader.GetGuid(5);
                if (!reader.IsDBNull(6)) staffId = reader.GetGuid(6);
                if (!reader.IsDBNull(7)) supplierInvoiceNumber = reader.GetString(7);
                if (!reader.IsDBNull(8)) exchangeRate = reader.GetDecimal(8);
                if (!reader.IsDBNull(9)) postedOn = reader.GetDateTime(9);
                if (!reader.IsDBNull(10)) postedBy = reader.GetGuid(10);
                if (!reader.IsDBNull(11)) totalCost = reader.GetDecimal(11);
                if (!reader.IsDBNull(12)) totalQty = reader.GetDecimal(12);
                if (!reader.IsDBNull(13)) freightChargePcn = reader.GetDecimal(13);
                if (!reader.IsDBNull(14)) freightChargeAmt = reader.GetDecimal(14);
                if (!reader.IsDBNull(15)) handlingChargePcn = reader.GetDecimal(15);
                if (!reader.IsDBNull(16)) handlingChargeAmt = reader.GetDecimal(16);
                if (!reader.IsDBNull(17)) insuranceChargePcn = reader.GetDecimal(17);
                if (!reader.IsDBNull(18)) insuranceChargeAmt = reader.GetDecimal(18);
                if (!reader.IsDBNull(19)) otherChargesPcn = reader.GetDecimal(19);
                if (!reader.IsDBNull(20)) otherChargesAmt = reader.GetDecimal(20);
                if (!reader.IsDBNull(21)) groupDiscount1 = reader.GetDecimal(21);
                if (!reader.IsDBNull(22)) groupDiscount2 = reader.GetDecimal(22);
                if (!reader.IsDBNull(23)) groupDiscount3 = reader.GetDecimal(23);
                if (!reader.IsDBNull(24)) stockReceiveAllocated = reader.GetBoolean(24);
                if (!reader.IsDBNull(25)) eXPORTFLAG = reader.GetBoolean(25);
                if (!reader.IsDBNull(26)) status = reader.GetInt32(26);
                if (!reader.IsDBNull(27)) createdOn = reader.GetDateTime(27);
                if (!reader.IsDBNull(28)) createdBy = reader.GetGuid(28);
                if (!reader.IsDBNull(29)) modifiedOn = reader.GetDateTime(29);
                if (!reader.IsDBNull(30)) modifiedBy = reader.GetGuid(30);
                if (!reader.IsDBNull(31)) retired = reader.GetBoolean(31);
                if (!reader.IsDBNull(32)) retiredOn = reader.GetDateTime(32);
                if (!reader.IsDBNull(33)) retiredBy = reader.GetGuid(33);
            }
        }
		
        public void Delete()
        {
            Delete(this.ReceiveHeaderId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != ReceiveHeaderId)
                    this.Delete();
                Update();
            }
        }

        public Guid ReceiveHeaderId
        {
            get { return receiveHeaderId; }
            set { receiveHeaderId = value; }
        }

        public string TxType
        {
            get { return txType; }
            set { txType = value; }
        }

        public string TxNumber
        {
            get { return txNumber; }
            set { txNumber = value; }
        }

        public DateTime TxDate
        {
            get { return txDate; }
            set { txDate = value; }
        }

        public Guid OrderHeaderId
        {
            get { return orderHeaderId; }
            set { orderHeaderId = value; }
        }

        public Guid WorkplaceId
        {
            get { return workplaceId; }
            set { workplaceId = value; }
        }

        public Guid StaffId
        {
            get { return staffId; }
            set { staffId = value; }
        }

        public string SupplierInvoiceNumber
        {
            get { return supplierInvoiceNumber; }
            set { supplierInvoiceNumber = value; }
        }

        public decimal ExchangeRate
        {
            get { return exchangeRate; }
            set { exchangeRate = value; }
        }

        public DateTime PostedOn
        {
            get { return postedOn; }
            set { postedOn = value; }
        }

        public Guid PostedBy
        {
            get { return postedBy; }
            set { postedBy = value; }
        }

        public decimal TotalCost
        {
            get { return totalCost; }
            set { totalCost = value; }
        }

        public decimal TotalQty
        {
            get { return totalQty; }
            set { totalQty = value; }
        }

        public decimal FreightChargePcn
        {
            get { return freightChargePcn; }
            set { freightChargePcn = value; }
        }

        public decimal FreightChargeAmt
        {
            get { return freightChargeAmt; }
            set { freightChargeAmt = value; }
        }

        public decimal HandlingChargePcn
        {
            get { return handlingChargePcn; }
            set { handlingChargePcn = value; }
        }

        public decimal HandlingChargeAmt
        {
            get { return handlingChargeAmt; }
            set { handlingChargeAmt = value; }
        }

        public decimal InsuranceChargePcn
        {
            get { return insuranceChargePcn; }
            set { insuranceChargePcn = value; }
        }

        public decimal InsuranceChargeAmt
        {
            get { return insuranceChargeAmt; }
            set { insuranceChargeAmt = value; }
        }

        public decimal OtherChargesPcn
        {
            get { return otherChargesPcn; }
            set { otherChargesPcn = value; }
        }

        public decimal OtherChargesAmt
        {
            get { return otherChargesAmt; }
            set { otherChargesAmt = value; }
        }

        public decimal GroupDiscount1
        {
            get { return groupDiscount1; }
            set { groupDiscount1 = value; }
        }

        public decimal GroupDiscount2
        {
            get { return groupDiscount2; }
            set { groupDiscount2 = value; }
        }

        public decimal GroupDiscount3
        {
            get { return groupDiscount3; }
            set { groupDiscount3 = value; }
        }

        public bool StockReceiveAllocated
        {
            get { return stockReceiveAllocated; }
            set { stockReceiveAllocated = value; }
        }

        public bool EXPORTFLAG
        {
            get { return eXPORTFLAG; }
            set { eXPORTFLAG = value; }
        }

        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public Guid CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime ModifiedOn
        {
            get { return modifiedOn; }
            set { modifiedOn = value; }
        }

        public Guid ModifiedBy
        {
            get { return modifiedBy; }
            set { modifiedBy = value; }
        }

        public bool Retired
        {
            get { return retired; }
            set { retired = value; }
        }

        public DateTime RetiredOn
        {
            get { return retiredOn; }
            set { retiredOn = value; }
        }

        public Guid RetiredBy
        {
            get { return retiredBy; }
            set { retiredBy = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spPurchaseOrderReceiveHeader_InsRec", "@ReceiveHeaderId", out returnedValue, parameterValues);
            
            receiveHeaderId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spPurchaseOrderReceiveHeader_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[34];
            prams[0] = GetSqlParameter("@ReceiveHeaderId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.ReceiveHeaderId);
            prams[1] = GetSqlParameter("@TxType", ParameterDirection.Input, SqlDbType.VarChar, 3, this.TxType);
            prams[2] = GetSqlParameter("@TxNumber", ParameterDirection.Input, SqlDbType.VarChar, 12, this.TxNumber);
            prams[3] = GetSqlParameter("@TxDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.TxDate);
            prams[4] = GetSqlParameter("@OrderHeaderId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.OrderHeaderId);
            prams[5] = GetSqlParameter("@WorkplaceId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.WorkplaceId);
            prams[6] = GetSqlParameter("@StaffId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.StaffId);
            prams[7] = GetSqlParameter("@SupplierInvoiceNumber", ParameterDirection.Input, SqlDbType.NVarChar, 20, this.SupplierInvoiceNumber);
            prams[8] = GetSqlParameter("@ExchangeRate", ParameterDirection.Input, SqlDbType.Decimal, 5, this.ExchangeRate);
            prams[9] = GetSqlParameter("@PostedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.PostedOn);
            prams[10] = GetSqlParameter("@PostedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.PostedBy);
            prams[11] = GetSqlParameter("@TotalCost", ParameterDirection.Input, SqlDbType.Money, 8, this.TotalCost);
            prams[12] = GetSqlParameter("@TotalQty", ParameterDirection.Input, SqlDbType.Decimal, 9, this.TotalQty);
            prams[13] = GetSqlParameter("@FreightChargePcn", ParameterDirection.Input, SqlDbType.Decimal, 5, this.FreightChargePcn);
            prams[14] = GetSqlParameter("@FreightChargeAmt", ParameterDirection.Input, SqlDbType.Money, 8, this.FreightChargeAmt);
            prams[15] = GetSqlParameter("@HandlingChargePcn", ParameterDirection.Input, SqlDbType.Decimal, 5, this.HandlingChargePcn);
            prams[16] = GetSqlParameter("@HandlingChargeAmt", ParameterDirection.Input, SqlDbType.Money, 8, this.HandlingChargeAmt);
            prams[17] = GetSqlParameter("@InsuranceChargePcn", ParameterDirection.Input, SqlDbType.Decimal, 5, this.InsuranceChargePcn);
            prams[18] = GetSqlParameter("@InsuranceChargeAmt", ParameterDirection.Input, SqlDbType.Money, 8, this.InsuranceChargeAmt);
            prams[19] = GetSqlParameter("@OtherChargesPcn", ParameterDirection.Input, SqlDbType.Decimal, 5, this.OtherChargesPcn);
            prams[20] = GetSqlParameter("@OtherChargesAmt", ParameterDirection.Input, SqlDbType.Money, 8, this.OtherChargesAmt);
            prams[21] = GetSqlParameter("@GroupDiscount1", ParameterDirection.Input, SqlDbType.Decimal, 5, this.GroupDiscount1);
            prams[22] = GetSqlParameter("@GroupDiscount2", ParameterDirection.Input, SqlDbType.Decimal, 5, this.GroupDiscount2);
            prams[23] = GetSqlParameter("@GroupDiscount3", ParameterDirection.Input, SqlDbType.Decimal, 5, this.GroupDiscount3);
            prams[24] = GetSqlParameter("@StockReceiveAllocated", ParameterDirection.Input, SqlDbType.Bit, 1, this.StockReceiveAllocated);
            prams[25] = GetSqlParameter("@EXPORTFLAG", ParameterDirection.Input, SqlDbType.Bit, 1, this.EXPORTFLAG);
            prams[26] = GetSqlParameter("@Status", ParameterDirection.Input, SqlDbType.Int, 4, this.Status);
            prams[27] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[28] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CreatedBy);
            prams[29] = GetSqlParameter("@ModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ModifiedOn);
            prams[30] = GetSqlParameter("@ModifiedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ModifiedBy);
            prams[31] = GetSqlParameter("@Retired", ParameterDirection.Input, SqlDbType.Bit, 1, this.Retired);
            prams[32] = GetSqlParameter("@RetiredOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RetiredOn);
            prams[33] = GetSqlParameter("@RetiredBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.RetiredBy);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@ReceiveHeaderId", SqlDbType.UniqueIdentifier, 16, this.ReceiveHeaderId),
                GetSqlParameterWithoutDirection("@TxType", SqlDbType.VarChar, 3, this.TxType),
                GetSqlParameterWithoutDirection("@TxNumber", SqlDbType.VarChar, 12, this.TxNumber),
                GetSqlParameterWithoutDirection("@TxDate", SqlDbType.DateTime, 8, this.TxDate),
                GetSqlParameterWithoutDirection("@OrderHeaderId", SqlDbType.UniqueIdentifier, 16, this.OrderHeaderId),
                GetSqlParameterWithoutDirection("@WorkplaceId", SqlDbType.UniqueIdentifier, 16, this.WorkplaceId),
                GetSqlParameterWithoutDirection("@StaffId", SqlDbType.UniqueIdentifier, 16, this.StaffId),
                GetSqlParameterWithoutDirection("@SupplierInvoiceNumber", SqlDbType.NVarChar, 20, this.SupplierInvoiceNumber),
                GetSqlParameterWithoutDirection("@ExchangeRate", SqlDbType.Decimal, 5, this.ExchangeRate),
                GetSqlParameterWithoutDirection("@PostedOn", SqlDbType.DateTime, 8, this.PostedOn),
                GetSqlParameterWithoutDirection("@PostedBy", SqlDbType.UniqueIdentifier, 16, this.PostedBy),
                GetSqlParameterWithoutDirection("@TotalCost", SqlDbType.Money, 8, this.TotalCost),
                GetSqlParameterWithoutDirection("@TotalQty", SqlDbType.Decimal, 9, this.TotalQty),
                GetSqlParameterWithoutDirection("@FreightChargePcn", SqlDbType.Decimal, 5, this.FreightChargePcn),
                GetSqlParameterWithoutDirection("@FreightChargeAmt", SqlDbType.Money, 8, this.FreightChargeAmt),
                GetSqlParameterWithoutDirection("@HandlingChargePcn", SqlDbType.Decimal, 5, this.HandlingChargePcn),
                GetSqlParameterWithoutDirection("@HandlingChargeAmt", SqlDbType.Money, 8, this.HandlingChargeAmt),
                GetSqlParameterWithoutDirection("@InsuranceChargePcn", SqlDbType.Decimal, 5, this.InsuranceChargePcn),
                GetSqlParameterWithoutDirection("@InsuranceChargeAmt", SqlDbType.Money, 8, this.InsuranceChargeAmt),
                GetSqlParameterWithoutDirection("@OtherChargesPcn", SqlDbType.Decimal, 5, this.OtherChargesPcn),
                GetSqlParameterWithoutDirection("@OtherChargesAmt", SqlDbType.Money, 8, this.OtherChargesAmt),
                GetSqlParameterWithoutDirection("@GroupDiscount1", SqlDbType.Decimal, 5, this.GroupDiscount1),
                GetSqlParameterWithoutDirection("@GroupDiscount2", SqlDbType.Decimal, 5, this.GroupDiscount2),
                GetSqlParameterWithoutDirection("@GroupDiscount3", SqlDbType.Decimal, 5, this.GroupDiscount3),
                GetSqlParameterWithoutDirection("@StockReceiveAllocated", SqlDbType.Bit, 1, this.StockReceiveAllocated),
                GetSqlParameterWithoutDirection("@EXPORTFLAG", SqlDbType.Bit, 1, this.EXPORTFLAG),
                GetSqlParameterWithoutDirection("@Status", SqlDbType.Int, 4, this.Status),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.UniqueIdentifier, 16, this.CreatedBy),
                GetSqlParameterWithoutDirection("@ModifiedOn", SqlDbType.DateTime, 8, this.ModifiedOn),
                GetSqlParameterWithoutDirection("@ModifiedBy", SqlDbType.UniqueIdentifier, 16, this.ModifiedBy),
                GetSqlParameterWithoutDirection("@Retired", SqlDbType.Bit, 1, this.Retired),
                GetSqlParameterWithoutDirection("@RetiredOn", SqlDbType.DateTime, 8, this.RetiredOn),
                GetSqlParameterWithoutDirection("@RetiredBy", SqlDbType.UniqueIdentifier, 16, this.RetiredBy)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("receiveHeaderId: " + receiveHeaderId.ToString()).Append("\r\n");
            builder.Append("txType: " + txType.ToString()).Append("\r\n");
            builder.Append("txNumber: " + txNumber.ToString()).Append("\r\n");
            builder.Append("txDate: " + txDate.ToString()).Append("\r\n");
            builder.Append("orderHeaderId: " + orderHeaderId.ToString()).Append("\r\n");
            builder.Append("workplaceId: " + workplaceId.ToString()).Append("\r\n");
            builder.Append("staffId: " + staffId.ToString()).Append("\r\n");
            builder.Append("supplierInvoiceNumber: " + supplierInvoiceNumber.ToString()).Append("\r\n");
            builder.Append("exchangeRate: " + exchangeRate.ToString()).Append("\r\n");
            builder.Append("postedOn: " + postedOn.ToString()).Append("\r\n");
            builder.Append("postedBy: " + postedBy.ToString()).Append("\r\n");
            builder.Append("totalCost: " + totalCost.ToString()).Append("\r\n");
            builder.Append("totalQty: " + totalQty.ToString()).Append("\r\n");
            builder.Append("freightChargePcn: " + freightChargePcn.ToString()).Append("\r\n");
            builder.Append("freightChargeAmt: " + freightChargeAmt.ToString()).Append("\r\n");
            builder.Append("handlingChargePcn: " + handlingChargePcn.ToString()).Append("\r\n");
            builder.Append("handlingChargeAmt: " + handlingChargeAmt.ToString()).Append("\r\n");
            builder.Append("insuranceChargePcn: " + insuranceChargePcn.ToString()).Append("\r\n");
            builder.Append("insuranceChargeAmt: " + insuranceChargeAmt.ToString()).Append("\r\n");
            builder.Append("otherChargesPcn: " + otherChargesPcn.ToString()).Append("\r\n");
            builder.Append("otherChargesAmt: " + otherChargesAmt.ToString()).Append("\r\n");
            builder.Append("groupDiscount1: " + groupDiscount1.ToString()).Append("\r\n");
            builder.Append("groupDiscount2: " + groupDiscount2.ToString()).Append("\r\n");
            builder.Append("groupDiscount3: " + groupDiscount3.ToString()).Append("\r\n");
            builder.Append("stockReceiveAllocated: " + stockReceiveAllocated.ToString()).Append("\r\n");
            builder.Append("eXPORTFLAG: " + eXPORTFLAG.ToString()).Append("\r\n");
            builder.Append("status: " + status.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("modifiedOn: " + modifiedOn.ToString()).Append("\r\n");
            builder.Append("modifiedBy: " + modifiedBy.ToString()).Append("\r\n");
            builder.Append("retired: " + retired.ToString()).Append("\r\n");
            builder.Append("retiredOn: " + retiredOn.ToString()).Append("\r\n");
            builder.Append("retiredBy: " + retiredBy.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			PurchaseOrderReceiveHeaderCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			// Filter the retired records
			if (WhereClause.Length > 0)
			{
				WhereClause += " AND Retired = 0";
			}
			else
			{
				WhereClause = "Retired = 0";
			}
			
			if (WhereClause.Length > 0)
			{
				source = PurchaseOrderReceiveHeader.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = PurchaseOrderReceiveHeader.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (PurchaseOrderReceiveHeader item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.OrderHeaderId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.ReceiveHeaderId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(PurchaseOrderReceiveHeader target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.OrderHeaderId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				PurchaseOrderReceiveHeader parentTemplate = PurchaseOrderReceiveHeader.Load(target.OrderHeaderId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(PurchaseOrderReceiveHeader target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="PurchaseOrderReceiveHeader">PurchaseOrderReceiveHeader</see> objects.
    /// </summary>
    public class PurchaseOrderReceiveHeaderCollection : BindingList< PurchaseOrderReceiveHeader>
    {
	}
}
