using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.InvtBatchREC_Header.
    /// Date Created:   2020-08-09 02:14:10
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class InvtBatchREC_Header
    {
        private Guid key = Guid.Empty;
        private Guid headerId = Guid.Empty;
        private string txType = String.Empty;
        private string txNumber = String.Empty;
        private DateTime txDate = DateTime.Parse("1900-1-1");
        private Guid staffId = Guid.Empty;
        private Guid workplaceId = Guid.Empty;
        private Guid supplierId = Guid.Empty;
        private string orderNumber = String.Empty;
        private string currencyCode = String.Empty;
        private decimal exchangeRate;
        private string pAYTYPE = String.Empty;
        private int pAYTERM = 0;
        private decimal pAYDEPRATE;
        private string pAYREMARK = String.Empty;
        private string sHIPTERM = String.Empty;
        private string sHIPREMARK = String.Empty;
        private bool pARTIAL;
        private DateTime orderedOn = DateTime.Parse("1900-1-1");
        private DateTime deliverOn = DateTime.Parse("1900-1-1");
        private DateTime cancelledOn = DateTime.Parse("1900-1-1");
        private decimal gDISCOUNT1;
        private decimal gDISCOUNT2;
        private decimal gDISCOUNT3;
        private string sOURCE = String.Empty;
        private decimal tOTALCOST;
        private decimal tOTALQTY;
        private bool sETTLEFLAG;
        private DateTime sETTLEDATE = DateTime.Parse("1900-1-1");
        private DateTime postedOn = DateTime.Parse("1900-1-1");
        private Guid postedBy = Guid.Empty;
        private string dELYADDRESS1 = String.Empty;
        private string dELYADDRESS2 = String.Empty;
        private string dELYADDRESS3 = String.Empty;
        private string dELYADDRESS4 = String.Empty;
        private string dELYCPN = String.Empty;
        private string dELYTEL = String.Empty;
        private int fREIGHTCHG = 0;
        private int hANDLINGCHG = 0;
        private int iNSURCHG = 0;
        private int oTHCHG = 0;
        private decimal cHGCOEFF;
        private DateTime rECDATE = DateTime.Parse("1900-1-1");
        private string rEMARK1 = String.Empty;
        private string rEMARK2 = String.Empty;
        private string rEMARK3 = String.Empty;
        private string sUPPINVNUM = String.Empty;
        private int status = 0;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private Guid createdBy = Guid.Empty;
        private DateTime modifiedOn = DateTime.Parse("1900-1-1");
        private Guid modifiedBy = Guid.Empty;
        private bool retired;
        private DateTime retiredOn = DateTime.Parse("1900-1-1");
        private Guid retiredBy = Guid.Empty;

        /// <summary>
        /// Initialize an new empty InvtBatchREC_Header object.
        /// </summary>
        public InvtBatchREC_Header()
        {
        }
		
        /// <summary>
        /// Initialize a new InvtBatchREC_Header object with the given parameters.
        /// </summary>
        public InvtBatchREC_Header(Guid headerId, string txType, string txNumber, DateTime txDate, Guid staffId, Guid workplaceId, Guid supplierId, string orderNumber, string currencyCode, decimal exchangeRate, string pAYTYPE, int pAYTERM, decimal pAYDEPRATE, string pAYREMARK, string sHIPTERM, string sHIPREMARK, bool pARTIAL, DateTime orderedOn, DateTime deliverOn, DateTime cancelledOn, decimal gDISCOUNT1, decimal gDISCOUNT2, decimal gDISCOUNT3, string sOURCE, decimal tOTALCOST, decimal tOTALQTY, bool sETTLEFLAG, DateTime sETTLEDATE, DateTime postedOn, Guid postedBy, string dELYADDRESS1, string dELYADDRESS2, string dELYADDRESS3, string dELYADDRESS4, string dELYCPN, string dELYTEL, int fREIGHTCHG, int hANDLINGCHG, int iNSURCHG, int oTHCHG, decimal cHGCOEFF, DateTime rECDATE, string rEMARK1, string rEMARK2, string rEMARK3, string sUPPINVNUM, int status, DateTime createdOn, Guid createdBy, DateTime modifiedOn, Guid modifiedBy, bool retired, DateTime retiredOn, Guid retiredBy)
        {
                this.headerId = headerId;
                this.txType = txType;
                this.txNumber = txNumber;
                this.txDate = txDate;
                this.staffId = staffId;
                this.workplaceId = workplaceId;
                this.supplierId = supplierId;
                this.orderNumber = orderNumber;
                this.currencyCode = currencyCode;
                this.exchangeRate = exchangeRate;
                this.pAYTYPE = pAYTYPE;
                this.pAYTERM = pAYTERM;
                this.pAYDEPRATE = pAYDEPRATE;
                this.pAYREMARK = pAYREMARK;
                this.sHIPTERM = sHIPTERM;
                this.sHIPREMARK = sHIPREMARK;
                this.pARTIAL = pARTIAL;
                this.orderedOn = orderedOn;
                this.deliverOn = deliverOn;
                this.cancelledOn = cancelledOn;
                this.gDISCOUNT1 = gDISCOUNT1;
                this.gDISCOUNT2 = gDISCOUNT2;
                this.gDISCOUNT3 = gDISCOUNT3;
                this.sOURCE = sOURCE;
                this.tOTALCOST = tOTALCOST;
                this.tOTALQTY = tOTALQTY;
                this.sETTLEFLAG = sETTLEFLAG;
                this.sETTLEDATE = sETTLEDATE;
                this.postedOn = postedOn;
                this.postedBy = postedBy;
                this.dELYADDRESS1 = dELYADDRESS1;
                this.dELYADDRESS2 = dELYADDRESS2;
                this.dELYADDRESS3 = dELYADDRESS3;
                this.dELYADDRESS4 = dELYADDRESS4;
                this.dELYCPN = dELYCPN;
                this.dELYTEL = dELYTEL;
                this.fREIGHTCHG = fREIGHTCHG;
                this.hANDLINGCHG = hANDLINGCHG;
                this.iNSURCHG = iNSURCHG;
                this.oTHCHG = oTHCHG;
                this.cHGCOEFF = cHGCOEFF;
                this.rECDATE = rECDATE;
                this.rEMARK1 = rEMARK1;
                this.rEMARK2 = rEMARK2;
                this.rEMARK3 = rEMARK3;
                this.sUPPINVNUM = sUPPINVNUM;
                this.status = status;
                this.createdOn = createdOn;
                this.createdBy = createdBy;
                this.modifiedOn = modifiedOn;
                this.modifiedBy = modifiedBy;
                this.retired = retired;
                this.retiredOn = retiredOn;
                this.retiredBy = retiredBy;
        }	
		
        /// <summary>
        /// Loads a InvtBatchREC_Header object from the database using the given HeaderId
        /// </summary>
        /// <param name="headerId">The primary key value</param>
        /// <returns>A InvtBatchREC_Header object</returns>
        public static InvtBatchREC_Header Load(Guid headerId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@HeaderId", headerId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spInvtBatchREC_Header_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    InvtBatchREC_Header result = new InvtBatchREC_Header();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a InvtBatchREC_Header object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A InvtBatchREC_Header object</returns>
        public static InvtBatchREC_Header LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spInvtBatchREC_Header_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    InvtBatchREC_Header result = new InvtBatchREC_Header();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of InvtBatchREC_Header objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the InvtBatchREC_Header objects in the database.</returns>
        public static InvtBatchREC_HeaderCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spInvtBatchREC_Header_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtBatchREC_Header objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the InvtBatchREC_Header objects in the database ordered by the columns specified.</returns>
        public static InvtBatchREC_HeaderCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spInvtBatchREC_Header_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtBatchREC_Header objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the InvtBatchREC_Header objects in the database.</returns>
        public static InvtBatchREC_HeaderCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spInvtBatchREC_Header_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtBatchREC_Header objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the InvtBatchREC_Header objects in the database ordered by the columns specified.</returns>
        public static InvtBatchREC_HeaderCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spInvtBatchREC_Header_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtBatchREC_Header objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the InvtBatchREC_Header objects in the database.</returns>
        public static InvtBatchREC_HeaderCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            InvtBatchREC_HeaderCollection result = new InvtBatchREC_HeaderCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    InvtBatchREC_Header tmp = new InvtBatchREC_Header();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a InvtBatchREC_Header object from the database.
        /// </summary>
        /// <param name="headerId">The primary key value</param>
        public static void Delete(Guid headerId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@HeaderId", headerId) };
            SqlHelper.Default.ExecuteNonQuery("spInvtBatchREC_Header_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) headerId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) txType = reader.GetString(1);
                if (!reader.IsDBNull(2)) txNumber = reader.GetString(2);
                if (!reader.IsDBNull(3)) txDate = reader.GetDateTime(3);
                if (!reader.IsDBNull(4)) staffId = reader.GetGuid(4);
                if (!reader.IsDBNull(5)) workplaceId = reader.GetGuid(5);
                if (!reader.IsDBNull(6)) supplierId = reader.GetGuid(6);
                if (!reader.IsDBNull(7)) orderNumber = reader.GetString(7);
                if (!reader.IsDBNull(8)) currencyCode = reader.GetString(8);
                if (!reader.IsDBNull(9)) exchangeRate = reader.GetDecimal(9);
                if (!reader.IsDBNull(10)) pAYTYPE = reader.GetString(10);
                if (!reader.IsDBNull(11)) pAYTERM = reader.GetInt32(11);
                if (!reader.IsDBNull(12)) pAYDEPRATE = reader.GetDecimal(12);
                if (!reader.IsDBNull(13)) pAYREMARK = reader.GetString(13);
                if (!reader.IsDBNull(14)) sHIPTERM = reader.GetString(14);
                if (!reader.IsDBNull(15)) sHIPREMARK = reader.GetString(15);
                if (!reader.IsDBNull(16)) pARTIAL = reader.GetBoolean(16);
                if (!reader.IsDBNull(17)) orderedOn = reader.GetDateTime(17);
                if (!reader.IsDBNull(18)) deliverOn = reader.GetDateTime(18);
                if (!reader.IsDBNull(19)) cancelledOn = reader.GetDateTime(19);
                if (!reader.IsDBNull(20)) gDISCOUNT1 = reader.GetDecimal(20);
                if (!reader.IsDBNull(21)) gDISCOUNT2 = reader.GetDecimal(21);
                if (!reader.IsDBNull(22)) gDISCOUNT3 = reader.GetDecimal(22);
                if (!reader.IsDBNull(23)) sOURCE = reader.GetString(23);
                if (!reader.IsDBNull(24)) tOTALCOST = reader.GetDecimal(24);
                if (!reader.IsDBNull(25)) tOTALQTY = reader.GetDecimal(25);
                if (!reader.IsDBNull(26)) sETTLEFLAG = reader.GetBoolean(26);
                if (!reader.IsDBNull(27)) sETTLEDATE = reader.GetDateTime(27);
                if (!reader.IsDBNull(28)) postedOn = reader.GetDateTime(28);
                if (!reader.IsDBNull(29)) postedBy = reader.GetGuid(29);
                if (!reader.IsDBNull(30)) dELYADDRESS1 = reader.GetString(30);
                if (!reader.IsDBNull(31)) dELYADDRESS2 = reader.GetString(31);
                if (!reader.IsDBNull(32)) dELYADDRESS3 = reader.GetString(32);
                if (!reader.IsDBNull(33)) dELYADDRESS4 = reader.GetString(33);
                if (!reader.IsDBNull(34)) dELYCPN = reader.GetString(34);
                if (!reader.IsDBNull(35)) dELYTEL = reader.GetString(35);
                if (!reader.IsDBNull(36)) fREIGHTCHG = reader.GetInt32(36);
                if (!reader.IsDBNull(37)) hANDLINGCHG = reader.GetInt32(37);
                if (!reader.IsDBNull(38)) iNSURCHG = reader.GetInt32(38);
                if (!reader.IsDBNull(39)) oTHCHG = reader.GetInt32(39);
                if (!reader.IsDBNull(40)) cHGCOEFF = reader.GetDecimal(40);
                if (!reader.IsDBNull(41)) rECDATE = reader.GetDateTime(41);
                if (!reader.IsDBNull(42)) rEMARK1 = reader.GetString(42);
                if (!reader.IsDBNull(43)) rEMARK2 = reader.GetString(43);
                if (!reader.IsDBNull(44)) rEMARK3 = reader.GetString(44);
                if (!reader.IsDBNull(45)) sUPPINVNUM = reader.GetString(45);
                if (!reader.IsDBNull(46)) status = reader.GetInt32(46);
                if (!reader.IsDBNull(47)) createdOn = reader.GetDateTime(47);
                if (!reader.IsDBNull(48)) createdBy = reader.GetGuid(48);
                if (!reader.IsDBNull(49)) modifiedOn = reader.GetDateTime(49);
                if (!reader.IsDBNull(50)) modifiedBy = reader.GetGuid(50);
                if (!reader.IsDBNull(51)) retired = reader.GetBoolean(51);
                if (!reader.IsDBNull(52)) retiredOn = reader.GetDateTime(52);
                if (!reader.IsDBNull(53)) retiredBy = reader.GetGuid(53);
            }
        }
		
        public void Delete()
        {
            Delete(this.HeaderId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != HeaderId)
                    this.Delete();
                Update();
            }
        }

        public Guid HeaderId
        {
            get { return headerId; }
            set { headerId = value; }
        }

        public string TxType
        {
            get { return txType; }
            set { txType = value; }
        }

        public string TxNumber
        {
            get { return txNumber; }
            set { txNumber = value; }
        }

        public DateTime TxDate
        {
            get { return txDate; }
            set { txDate = value; }
        }

        public Guid StaffId
        {
            get { return staffId; }
            set { staffId = value; }
        }

        public Guid WorkplaceId
        {
            get { return workplaceId; }
            set { workplaceId = value; }
        }

        public Guid SupplierId
        {
            get { return supplierId; }
            set { supplierId = value; }
        }

        public string OrderNumber
        {
            get { return orderNumber; }
            set { orderNumber = value; }
        }

        public string CurrencyCode
        {
            get { return currencyCode; }
            set { currencyCode = value; }
        }

        public decimal ExchangeRate
        {
            get { return exchangeRate; }
            set { exchangeRate = value; }
        }

        public string PAYTYPE
        {
            get { return pAYTYPE; }
            set { pAYTYPE = value; }
        }

        public int PAYTERM
        {
            get { return pAYTERM; }
            set { pAYTERM = value; }
        }

        public decimal PAYDEPRATE
        {
            get { return pAYDEPRATE; }
            set { pAYDEPRATE = value; }
        }

        public string PAYREMARK
        {
            get { return pAYREMARK; }
            set { pAYREMARK = value; }
        }

        public string SHIPTERM
        {
            get { return sHIPTERM; }
            set { sHIPTERM = value; }
        }

        public string SHIPREMARK
        {
            get { return sHIPREMARK; }
            set { sHIPREMARK = value; }
        }

        public bool PARTIAL
        {
            get { return pARTIAL; }
            set { pARTIAL = value; }
        }

        public DateTime OrderedOn
        {
            get { return orderedOn; }
            set { orderedOn = value; }
        }

        public DateTime DeliverOn
        {
            get { return deliverOn; }
            set { deliverOn = value; }
        }

        public DateTime CancelledOn
        {
            get { return cancelledOn; }
            set { cancelledOn = value; }
        }

        public decimal GDISCOUNT1
        {
            get { return gDISCOUNT1; }
            set { gDISCOUNT1 = value; }
        }

        public decimal GDISCOUNT2
        {
            get { return gDISCOUNT2; }
            set { gDISCOUNT2 = value; }
        }

        public decimal GDISCOUNT3
        {
            get { return gDISCOUNT3; }
            set { gDISCOUNT3 = value; }
        }

        public string SOURCE
        {
            get { return sOURCE; }
            set { sOURCE = value; }
        }

        public decimal TOTALCOST
        {
            get { return tOTALCOST; }
            set { tOTALCOST = value; }
        }

        public decimal TOTALQTY
        {
            get { return tOTALQTY; }
            set { tOTALQTY = value; }
        }

        public bool SETTLEFLAG
        {
            get { return sETTLEFLAG; }
            set { sETTLEFLAG = value; }
        }

        public DateTime SETTLEDATE
        {
            get { return sETTLEDATE; }
            set { sETTLEDATE = value; }
        }

        public DateTime PostedOn
        {
            get { return postedOn; }
            set { postedOn = value; }
        }

        public Guid PostedBy
        {
            get { return postedBy; }
            set { postedBy = value; }
        }

        public string DELYADDRESS1
        {
            get { return dELYADDRESS1; }
            set { dELYADDRESS1 = value; }
        }

        public string DELYADDRESS2
        {
            get { return dELYADDRESS2; }
            set { dELYADDRESS2 = value; }
        }

        public string DELYADDRESS3
        {
            get { return dELYADDRESS3; }
            set { dELYADDRESS3 = value; }
        }

        public string DELYADDRESS4
        {
            get { return dELYADDRESS4; }
            set { dELYADDRESS4 = value; }
        }

        public string DELYCPN
        {
            get { return dELYCPN; }
            set { dELYCPN = value; }
        }

        public string DELYTEL
        {
            get { return dELYTEL; }
            set { dELYTEL = value; }
        }

        public int FREIGHTCHG
        {
            get { return fREIGHTCHG; }
            set { fREIGHTCHG = value; }
        }

        public int HANDLINGCHG
        {
            get { return hANDLINGCHG; }
            set { hANDLINGCHG = value; }
        }

        public int INSURCHG
        {
            get { return iNSURCHG; }
            set { iNSURCHG = value; }
        }

        public int OTHCHG
        {
            get { return oTHCHG; }
            set { oTHCHG = value; }
        }

        public decimal CHGCOEFF
        {
            get { return cHGCOEFF; }
            set { cHGCOEFF = value; }
        }

        public DateTime RECDATE
        {
            get { return rECDATE; }
            set { rECDATE = value; }
        }

        public string REMARK1
        {
            get { return rEMARK1; }
            set { rEMARK1 = value; }
        }

        public string REMARK2
        {
            get { return rEMARK2; }
            set { rEMARK2 = value; }
        }

        public string REMARK3
        {
            get { return rEMARK3; }
            set { rEMARK3 = value; }
        }

        public string SUPPINVNUM
        {
            get { return sUPPINVNUM; }
            set { sUPPINVNUM = value; }
        }

        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public Guid CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime ModifiedOn
        {
            get { return modifiedOn; }
            set { modifiedOn = value; }
        }

        public Guid ModifiedBy
        {
            get { return modifiedBy; }
            set { modifiedBy = value; }
        }

        public bool Retired
        {
            get { return retired; }
            set { retired = value; }
        }

        public DateTime RetiredOn
        {
            get { return retiredOn; }
            set { retiredOn = value; }
        }

        public Guid RetiredBy
        {
            get { return retiredBy; }
            set { retiredBy = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spInvtBatchREC_Header_InsRec", "@HeaderId", out returnedValue, parameterValues);
            
            headerId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spInvtBatchREC_Header_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[54];
            prams[0] = GetSqlParameter("@HeaderId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.HeaderId);
            prams[1] = GetSqlParameter("@TxType", ParameterDirection.Input, SqlDbType.VarChar, 3, this.TxType);
            prams[2] = GetSqlParameter("@TxNumber", ParameterDirection.Input, SqlDbType.VarChar, 12, this.TxNumber);
            prams[3] = GetSqlParameter("@TxDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.TxDate);
            prams[4] = GetSqlParameter("@StaffId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.StaffId);
            prams[5] = GetSqlParameter("@WorkplaceId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.WorkplaceId);
            prams[6] = GetSqlParameter("@SupplierId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.SupplierId);
            prams[7] = GetSqlParameter("@OrderNumber", ParameterDirection.Input, SqlDbType.VarChar, 12, this.OrderNumber);
            prams[8] = GetSqlParameter("@CurrencyCode", ParameterDirection.Input, SqlDbType.VarChar, 3, this.CurrencyCode);
            prams[9] = GetSqlParameter("@ExchangeRate", ParameterDirection.Input, SqlDbType.Decimal, 5, this.ExchangeRate);
            prams[10] = GetSqlParameter("@PAYTYPE", ParameterDirection.Input, SqlDbType.VarChar, 4, this.PAYTYPE);
            prams[11] = GetSqlParameter("@PAYTERM", ParameterDirection.Input, SqlDbType.Int, 4, this.PAYTERM);
            prams[12] = GetSqlParameter("@PAYDEPRATE", ParameterDirection.Input, SqlDbType.Decimal, 5, this.PAYDEPRATE);
            prams[13] = GetSqlParameter("@PAYREMARK", ParameterDirection.Input, SqlDbType.VarChar, 20, this.PAYREMARK);
            prams[14] = GetSqlParameter("@SHIPTERM", ParameterDirection.Input, SqlDbType.VarChar, 10, this.SHIPTERM);
            prams[15] = GetSqlParameter("@SHIPREMARK", ParameterDirection.Input, SqlDbType.VarChar, 20, this.SHIPREMARK);
            prams[16] = GetSqlParameter("@PARTIAL", ParameterDirection.Input, SqlDbType.Bit, 1, this.PARTIAL);
            prams[17] = GetSqlParameter("@OrderedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.OrderedOn);
            prams[18] = GetSqlParameter("@DeliverOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DeliverOn);
            prams[19] = GetSqlParameter("@CancelledOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CancelledOn);
            prams[20] = GetSqlParameter("@GDISCOUNT1", ParameterDirection.Input, SqlDbType.Decimal, 5, this.GDISCOUNT1);
            prams[21] = GetSqlParameter("@GDISCOUNT2", ParameterDirection.Input, SqlDbType.Decimal, 5, this.GDISCOUNT2);
            prams[22] = GetSqlParameter("@GDISCOUNT3", ParameterDirection.Input, SqlDbType.Decimal, 5, this.GDISCOUNT3);
            prams[23] = GetSqlParameter("@SOURCE", ParameterDirection.Input, SqlDbType.VarChar, 4, this.SOURCE);
            prams[24] = GetSqlParameter("@TOTALCOST", ParameterDirection.Input, SqlDbType.Money, 8, this.TOTALCOST);
            prams[25] = GetSqlParameter("@TOTALQTY", ParameterDirection.Input, SqlDbType.Decimal, 9, this.TOTALQTY);
            prams[26] = GetSqlParameter("@SETTLEFLAG", ParameterDirection.Input, SqlDbType.Bit, 1, this.SETTLEFLAG);
            prams[27] = GetSqlParameter("@SETTLEDATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.SETTLEDATE);
            prams[28] = GetSqlParameter("@PostedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.PostedOn);
            prams[29] = GetSqlParameter("@PostedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.PostedBy);
            prams[30] = GetSqlParameter("@DELYADDRESS1", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELYADDRESS1);
            prams[31] = GetSqlParameter("@DELYADDRESS2", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELYADDRESS2);
            prams[32] = GetSqlParameter("@DELYADDRESS3", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELYADDRESS3);
            prams[33] = GetSqlParameter("@DELYADDRESS4", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELYADDRESS4);
            prams[34] = GetSqlParameter("@DELYCPN", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELYCPN);
            prams[35] = GetSqlParameter("@DELYTEL", ParameterDirection.Input, SqlDbType.VarChar, 50, this.DELYTEL);
            prams[36] = GetSqlParameter("@FREIGHTCHG", ParameterDirection.Input, SqlDbType.Int, 4, this.FREIGHTCHG);
            prams[37] = GetSqlParameter("@HANDLINGCHG", ParameterDirection.Input, SqlDbType.Int, 4, this.HANDLINGCHG);
            prams[38] = GetSqlParameter("@INSURCHG", ParameterDirection.Input, SqlDbType.Int, 4, this.INSURCHG);
            prams[39] = GetSqlParameter("@OTHCHG", ParameterDirection.Input, SqlDbType.Int, 4, this.OTHCHG);
            prams[40] = GetSqlParameter("@CHGCOEFF", ParameterDirection.Input, SqlDbType.Decimal, 5, this.CHGCOEFF);
            prams[41] = GetSqlParameter("@RECDATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RECDATE);
            prams[42] = GetSqlParameter("@REMARK1", ParameterDirection.Input, SqlDbType.VarChar, 20, this.REMARK1);
            prams[43] = GetSqlParameter("@REMARK2", ParameterDirection.Input, SqlDbType.VarChar, 20, this.REMARK2);
            prams[44] = GetSqlParameter("@REMARK3", ParameterDirection.Input, SqlDbType.NText, 16, this.REMARK3);
            prams[45] = GetSqlParameter("@SUPPINVNUM", ParameterDirection.Input, SqlDbType.VarChar, 20, this.SUPPINVNUM);
            prams[46] = GetSqlParameter("@Status", ParameterDirection.Input, SqlDbType.Int, 4, this.Status);
            prams[47] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[48] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CreatedBy);
            prams[49] = GetSqlParameter("@ModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ModifiedOn);
            prams[50] = GetSqlParameter("@ModifiedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ModifiedBy);
            prams[51] = GetSqlParameter("@Retired", ParameterDirection.Input, SqlDbType.Bit, 1, this.Retired);
            prams[52] = GetSqlParameter("@RetiredOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RetiredOn);
            prams[53] = GetSqlParameter("@RetiredBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.RetiredBy);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@HeaderId", SqlDbType.UniqueIdentifier, 16, this.HeaderId),
                GetSqlParameterWithoutDirection("@TxType", SqlDbType.VarChar, 3, this.TxType),
                GetSqlParameterWithoutDirection("@TxNumber", SqlDbType.VarChar, 12, this.TxNumber),
                GetSqlParameterWithoutDirection("@TxDate", SqlDbType.DateTime, 8, this.TxDate),
                GetSqlParameterWithoutDirection("@StaffId", SqlDbType.UniqueIdentifier, 16, this.StaffId),
                GetSqlParameterWithoutDirection("@WorkplaceId", SqlDbType.UniqueIdentifier, 16, this.WorkplaceId),
                GetSqlParameterWithoutDirection("@SupplierId", SqlDbType.UniqueIdentifier, 16, this.SupplierId),
                GetSqlParameterWithoutDirection("@OrderNumber", SqlDbType.VarChar, 12, this.OrderNumber),
                GetSqlParameterWithoutDirection("@CurrencyCode", SqlDbType.VarChar, 3, this.CurrencyCode),
                GetSqlParameterWithoutDirection("@ExchangeRate", SqlDbType.Decimal, 5, this.ExchangeRate),
                GetSqlParameterWithoutDirection("@PAYTYPE", SqlDbType.VarChar, 4, this.PAYTYPE),
                GetSqlParameterWithoutDirection("@PAYTERM", SqlDbType.Int, 4, this.PAYTERM),
                GetSqlParameterWithoutDirection("@PAYDEPRATE", SqlDbType.Decimal, 5, this.PAYDEPRATE),
                GetSqlParameterWithoutDirection("@PAYREMARK", SqlDbType.VarChar, 20, this.PAYREMARK),
                GetSqlParameterWithoutDirection("@SHIPTERM", SqlDbType.VarChar, 10, this.SHIPTERM),
                GetSqlParameterWithoutDirection("@SHIPREMARK", SqlDbType.VarChar, 20, this.SHIPREMARK),
                GetSqlParameterWithoutDirection("@PARTIAL", SqlDbType.Bit, 1, this.PARTIAL),
                GetSqlParameterWithoutDirection("@OrderedOn", SqlDbType.DateTime, 8, this.OrderedOn),
                GetSqlParameterWithoutDirection("@DeliverOn", SqlDbType.DateTime, 8, this.DeliverOn),
                GetSqlParameterWithoutDirection("@CancelledOn", SqlDbType.DateTime, 8, this.CancelledOn),
                GetSqlParameterWithoutDirection("@GDISCOUNT1", SqlDbType.Decimal, 5, this.GDISCOUNT1),
                GetSqlParameterWithoutDirection("@GDISCOUNT2", SqlDbType.Decimal, 5, this.GDISCOUNT2),
                GetSqlParameterWithoutDirection("@GDISCOUNT3", SqlDbType.Decimal, 5, this.GDISCOUNT3),
                GetSqlParameterWithoutDirection("@SOURCE", SqlDbType.VarChar, 4, this.SOURCE),
                GetSqlParameterWithoutDirection("@TOTALCOST", SqlDbType.Money, 8, this.TOTALCOST),
                GetSqlParameterWithoutDirection("@TOTALQTY", SqlDbType.Decimal, 9, this.TOTALQTY),
                GetSqlParameterWithoutDirection("@SETTLEFLAG", SqlDbType.Bit, 1, this.SETTLEFLAG),
                GetSqlParameterWithoutDirection("@SETTLEDATE", SqlDbType.DateTime, 8, this.SETTLEDATE),
                GetSqlParameterWithoutDirection("@PostedOn", SqlDbType.DateTime, 8, this.PostedOn),
                GetSqlParameterWithoutDirection("@PostedBy", SqlDbType.UniqueIdentifier, 16, this.PostedBy),
                GetSqlParameterWithoutDirection("@DELYADDRESS1", SqlDbType.VarChar, 50, this.DELYADDRESS1),
                GetSqlParameterWithoutDirection("@DELYADDRESS2", SqlDbType.VarChar, 50, this.DELYADDRESS2),
                GetSqlParameterWithoutDirection("@DELYADDRESS3", SqlDbType.VarChar, 50, this.DELYADDRESS3),
                GetSqlParameterWithoutDirection("@DELYADDRESS4", SqlDbType.VarChar, 50, this.DELYADDRESS4),
                GetSqlParameterWithoutDirection("@DELYCPN", SqlDbType.VarChar, 50, this.DELYCPN),
                GetSqlParameterWithoutDirection("@DELYTEL", SqlDbType.VarChar, 50, this.DELYTEL),
                GetSqlParameterWithoutDirection("@FREIGHTCHG", SqlDbType.Int, 4, this.FREIGHTCHG),
                GetSqlParameterWithoutDirection("@HANDLINGCHG", SqlDbType.Int, 4, this.HANDLINGCHG),
                GetSqlParameterWithoutDirection("@INSURCHG", SqlDbType.Int, 4, this.INSURCHG),
                GetSqlParameterWithoutDirection("@OTHCHG", SqlDbType.Int, 4, this.OTHCHG),
                GetSqlParameterWithoutDirection("@CHGCOEFF", SqlDbType.Decimal, 5, this.CHGCOEFF),
                GetSqlParameterWithoutDirection("@RECDATE", SqlDbType.DateTime, 8, this.RECDATE),
                GetSqlParameterWithoutDirection("@REMARK1", SqlDbType.VarChar, 20, this.REMARK1),
                GetSqlParameterWithoutDirection("@REMARK2", SqlDbType.VarChar, 20, this.REMARK2),
                GetSqlParameterWithoutDirection("@REMARK3", SqlDbType.NText, 16, this.REMARK3),
                GetSqlParameterWithoutDirection("@SUPPINVNUM", SqlDbType.VarChar, 20, this.SUPPINVNUM),
                GetSqlParameterWithoutDirection("@Status", SqlDbType.Int, 4, this.Status),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.UniqueIdentifier, 16, this.CreatedBy),
                GetSqlParameterWithoutDirection("@ModifiedOn", SqlDbType.DateTime, 8, this.ModifiedOn),
                GetSqlParameterWithoutDirection("@ModifiedBy", SqlDbType.UniqueIdentifier, 16, this.ModifiedBy),
                GetSqlParameterWithoutDirection("@Retired", SqlDbType.Bit, 1, this.Retired),
                GetSqlParameterWithoutDirection("@RetiredOn", SqlDbType.DateTime, 8, this.RetiredOn),
                GetSqlParameterWithoutDirection("@RetiredBy", SqlDbType.UniqueIdentifier, 16, this.RetiredBy)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("headerId: " + headerId.ToString()).Append("\r\n");
            builder.Append("txType: " + txType.ToString()).Append("\r\n");
            builder.Append("txNumber: " + txNumber.ToString()).Append("\r\n");
            builder.Append("txDate: " + txDate.ToString()).Append("\r\n");
            builder.Append("staffId: " + staffId.ToString()).Append("\r\n");
            builder.Append("workplaceId: " + workplaceId.ToString()).Append("\r\n");
            builder.Append("supplierId: " + supplierId.ToString()).Append("\r\n");
            builder.Append("orderNumber: " + orderNumber.ToString()).Append("\r\n");
            builder.Append("currencyCode: " + currencyCode.ToString()).Append("\r\n");
            builder.Append("exchangeRate: " + exchangeRate.ToString()).Append("\r\n");
            builder.Append("pAYTYPE: " + pAYTYPE.ToString()).Append("\r\n");
            builder.Append("pAYTERM: " + pAYTERM.ToString()).Append("\r\n");
            builder.Append("pAYDEPRATE: " + pAYDEPRATE.ToString()).Append("\r\n");
            builder.Append("pAYREMARK: " + pAYREMARK.ToString()).Append("\r\n");
            builder.Append("sHIPTERM: " + sHIPTERM.ToString()).Append("\r\n");
            builder.Append("sHIPREMARK: " + sHIPREMARK.ToString()).Append("\r\n");
            builder.Append("pARTIAL: " + pARTIAL.ToString()).Append("\r\n");
            builder.Append("orderedOn: " + orderedOn.ToString()).Append("\r\n");
            builder.Append("deliverOn: " + deliverOn.ToString()).Append("\r\n");
            builder.Append("cancelledOn: " + cancelledOn.ToString()).Append("\r\n");
            builder.Append("gDISCOUNT1: " + gDISCOUNT1.ToString()).Append("\r\n");
            builder.Append("gDISCOUNT2: " + gDISCOUNT2.ToString()).Append("\r\n");
            builder.Append("gDISCOUNT3: " + gDISCOUNT3.ToString()).Append("\r\n");
            builder.Append("sOURCE: " + sOURCE.ToString()).Append("\r\n");
            builder.Append("tOTALCOST: " + tOTALCOST.ToString()).Append("\r\n");
            builder.Append("tOTALQTY: " + tOTALQTY.ToString()).Append("\r\n");
            builder.Append("sETTLEFLAG: " + sETTLEFLAG.ToString()).Append("\r\n");
            builder.Append("sETTLEDATE: " + sETTLEDATE.ToString()).Append("\r\n");
            builder.Append("postedOn: " + postedOn.ToString()).Append("\r\n");
            builder.Append("postedBy: " + postedBy.ToString()).Append("\r\n");
            builder.Append("dELYADDRESS1: " + dELYADDRESS1.ToString()).Append("\r\n");
            builder.Append("dELYADDRESS2: " + dELYADDRESS2.ToString()).Append("\r\n");
            builder.Append("dELYADDRESS3: " + dELYADDRESS3.ToString()).Append("\r\n");
            builder.Append("dELYADDRESS4: " + dELYADDRESS4.ToString()).Append("\r\n");
            builder.Append("dELYCPN: " + dELYCPN.ToString()).Append("\r\n");
            builder.Append("dELYTEL: " + dELYTEL.ToString()).Append("\r\n");
            builder.Append("fREIGHTCHG: " + fREIGHTCHG.ToString()).Append("\r\n");
            builder.Append("hANDLINGCHG: " + hANDLINGCHG.ToString()).Append("\r\n");
            builder.Append("iNSURCHG: " + iNSURCHG.ToString()).Append("\r\n");
            builder.Append("oTHCHG: " + oTHCHG.ToString()).Append("\r\n");
            builder.Append("cHGCOEFF: " + cHGCOEFF.ToString()).Append("\r\n");
            builder.Append("rECDATE: " + rECDATE.ToString()).Append("\r\n");
            builder.Append("rEMARK1: " + rEMARK1.ToString()).Append("\r\n");
            builder.Append("rEMARK2: " + rEMARK2.ToString()).Append("\r\n");
            builder.Append("rEMARK3: " + rEMARK3.ToString()).Append("\r\n");
            builder.Append("sUPPINVNUM: " + sUPPINVNUM.ToString()).Append("\r\n");
            builder.Append("status: " + status.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("modifiedOn: " + modifiedOn.ToString()).Append("\r\n");
            builder.Append("modifiedBy: " + modifiedBy.ToString()).Append("\r\n");
            builder.Append("retired: " + retired.ToString()).Append("\r\n");
            builder.Append("retiredOn: " + retiredOn.ToString()).Append("\r\n");
            builder.Append("retiredBy: " + retiredBy.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			InvtBatchREC_HeaderCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			// Filter the retired records
			if (WhereClause.Length > 0)
			{
				WhereClause += " AND Retired = 0";
			}
			else
			{
				WhereClause = "Retired = 0";
			}
			
			if (WhereClause.Length > 0)
			{
				source = InvtBatchREC_Header.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = InvtBatchREC_Header.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (InvtBatchREC_Header item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.StaffId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.HeaderId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(InvtBatchREC_Header target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.StaffId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				InvtBatchREC_Header parentTemplate = InvtBatchREC_Header.Load(target.StaffId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(InvtBatchREC_Header target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="InvtBatchREC_Header">InvtBatchREC_Header</see> objects.
    /// </summary>
    public class InvtBatchREC_HeaderCollection : BindingList< InvtBatchREC_Header>
    {
	}
}
