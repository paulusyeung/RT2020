using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.InvtLedgerDetails.
    /// Date Created:   2020-08-09 02:14:10
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class InvtLedgerDetails
    {
        private Guid key = Guid.Empty;
        private Guid detailsId = Guid.Empty;
        private Guid headerId = Guid.Empty;
        private string txType = String.Empty;
        private string txNumber = String.Empty;
        private DateTime txDate = DateTime.Parse("1900-1-1");
        private string sHOP = String.Empty;
        private string tERMINAL = String.Empty;
        private string oPERATOR = String.Empty;
        private int lineNumber = 0;
        private Guid subLedgerDetailsId = Guid.Empty;
        private Guid productId = Guid.Empty;
        private string barcode = String.Empty;
        private decimal cONFIRM_TRF_QTY;
        private int replenish = 0;
        private decimal qty;
        private decimal unitAmount;
        private decimal discount;
        private decimal amount;
        private decimal averageCost;
        private decimal basicPrice;
        private string serialNumber = String.Empty;
        private string vendorRef = String.Empty;
        private string notes = String.Empty;

        /// <summary>
        /// Initialize an new empty InvtLedgerDetails object.
        /// </summary>
        public InvtLedgerDetails()
        {
        }
		
        /// <summary>
        /// Initialize a new InvtLedgerDetails object with the given parameters.
        /// </summary>
        public InvtLedgerDetails(Guid detailsId, Guid headerId, string txType, string txNumber, DateTime txDate, string sHOP, string tERMINAL, string oPERATOR, int lineNumber, Guid subLedgerDetailsId, Guid productId, string barcode, decimal cONFIRM_TRF_QTY, int replenish, decimal qty, decimal unitAmount, decimal discount, decimal amount, decimal averageCost, decimal basicPrice, string serialNumber, string vendorRef, string notes)
        {
                this.detailsId = detailsId;
                this.headerId = headerId;
                this.txType = txType;
                this.txNumber = txNumber;
                this.txDate = txDate;
                this.sHOP = sHOP;
                this.tERMINAL = tERMINAL;
                this.oPERATOR = oPERATOR;
                this.lineNumber = lineNumber;
                this.subLedgerDetailsId = subLedgerDetailsId;
                this.productId = productId;
                this.barcode = barcode;
                this.cONFIRM_TRF_QTY = cONFIRM_TRF_QTY;
                this.replenish = replenish;
                this.qty = qty;
                this.unitAmount = unitAmount;
                this.discount = discount;
                this.amount = amount;
                this.averageCost = averageCost;
                this.basicPrice = basicPrice;
                this.serialNumber = serialNumber;
                this.vendorRef = vendorRef;
                this.notes = notes;
        }	
		
        /// <summary>
        /// Loads a InvtLedgerDetails object from the database using the given DetailsId
        /// </summary>
        /// <param name="detailsId">The primary key value</param>
        /// <returns>A InvtLedgerDetails object</returns>
        public static InvtLedgerDetails Load(Guid detailsId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@DetailsId", detailsId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spInvtLedgerDetails_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    InvtLedgerDetails result = new InvtLedgerDetails();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a InvtLedgerDetails object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A InvtLedgerDetails object</returns>
        public static InvtLedgerDetails LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spInvtLedgerDetails_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    InvtLedgerDetails result = new InvtLedgerDetails();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of InvtLedgerDetails objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the InvtLedgerDetails objects in the database.</returns>
        public static InvtLedgerDetailsCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spInvtLedgerDetails_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtLedgerDetails objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the InvtLedgerDetails objects in the database ordered by the columns specified.</returns>
        public static InvtLedgerDetailsCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spInvtLedgerDetails_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtLedgerDetails objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the InvtLedgerDetails objects in the database.</returns>
        public static InvtLedgerDetailsCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spInvtLedgerDetails_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtLedgerDetails objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the InvtLedgerDetails objects in the database ordered by the columns specified.</returns>
        public static InvtLedgerDetailsCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spInvtLedgerDetails_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of InvtLedgerDetails objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the InvtLedgerDetails objects in the database.</returns>
        public static InvtLedgerDetailsCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            InvtLedgerDetailsCollection result = new InvtLedgerDetailsCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    InvtLedgerDetails tmp = new InvtLedgerDetails();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a InvtLedgerDetails object from the database.
        /// </summary>
        /// <param name="detailsId">The primary key value</param>
        public static void Delete(Guid detailsId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@DetailsId", detailsId) };
            SqlHelper.Default.ExecuteNonQuery("spInvtLedgerDetails_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) detailsId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) headerId = reader.GetGuid(1);
                if (!reader.IsDBNull(2)) txType = reader.GetString(2);
                if (!reader.IsDBNull(3)) txNumber = reader.GetString(3);
                if (!reader.IsDBNull(4)) txDate = reader.GetDateTime(4);
                if (!reader.IsDBNull(5)) sHOP = reader.GetString(5);
                if (!reader.IsDBNull(6)) tERMINAL = reader.GetString(6);
                if (!reader.IsDBNull(7)) oPERATOR = reader.GetString(7);
                if (!reader.IsDBNull(8)) lineNumber = reader.GetInt32(8);
                if (!reader.IsDBNull(9)) subLedgerDetailsId = reader.GetGuid(9);
                if (!reader.IsDBNull(10)) productId = reader.GetGuid(10);
                if (!reader.IsDBNull(11)) barcode = reader.GetString(11);
                if (!reader.IsDBNull(12)) cONFIRM_TRF_QTY = reader.GetDecimal(12);
                if (!reader.IsDBNull(13)) replenish = reader.GetInt32(13);
                if (!reader.IsDBNull(14)) qty = reader.GetDecimal(14);
                if (!reader.IsDBNull(15)) unitAmount = reader.GetDecimal(15);
                if (!reader.IsDBNull(16)) discount = reader.GetDecimal(16);
                if (!reader.IsDBNull(17)) amount = reader.GetDecimal(17);
                if (!reader.IsDBNull(18)) averageCost = reader.GetDecimal(18);
                if (!reader.IsDBNull(19)) basicPrice = reader.GetDecimal(19);
                if (!reader.IsDBNull(20)) serialNumber = reader.GetString(20);
                if (!reader.IsDBNull(21)) vendorRef = reader.GetString(21);
                if (!reader.IsDBNull(22)) notes = reader.GetString(22);
            }
        }
		
        public void Delete()
        {
            Delete(this.DetailsId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != DetailsId)
                    this.Delete();
                Update();
            }
        }

        public Guid DetailsId
        {
            get { return detailsId; }
            set { detailsId = value; }
        }

        public Guid HeaderId
        {
            get { return headerId; }
            set { headerId = value; }
        }

        public string TxType
        {
            get { return txType; }
            set { txType = value; }
        }

        public string TxNumber
        {
            get { return txNumber; }
            set { txNumber = value; }
        }

        public DateTime TxDate
        {
            get { return txDate; }
            set { txDate = value; }
        }

        public string SHOP
        {
            get { return sHOP; }
            set { sHOP = value; }
        }

        public string TERMINAL
        {
            get { return tERMINAL; }
            set { tERMINAL = value; }
        }

        public string OPERATOR
        {
            get { return oPERATOR; }
            set { oPERATOR = value; }
        }

        public int LineNumber
        {
            get { return lineNumber; }
            set { lineNumber = value; }
        }

        public Guid SubLedgerDetailsId
        {
            get { return subLedgerDetailsId; }
            set { subLedgerDetailsId = value; }
        }

        public Guid ProductId
        {
            get { return productId; }
            set { productId = value; }
        }

        public string Barcode
        {
            get { return barcode; }
            set { barcode = value; }
        }

        public decimal CONFIRM_TRF_QTY
        {
            get { return cONFIRM_TRF_QTY; }
            set { cONFIRM_TRF_QTY = value; }
        }

        public int Replenish
        {
            get { return replenish; }
            set { replenish = value; }
        }

        public decimal Qty
        {
            get { return qty; }
            set { qty = value; }
        }

        public decimal UnitAmount
        {
            get { return unitAmount; }
            set { unitAmount = value; }
        }

        public decimal Discount
        {
            get { return discount; }
            set { discount = value; }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal AverageCost
        {
            get { return averageCost; }
            set { averageCost = value; }
        }

        public decimal BasicPrice
        {
            get { return basicPrice; }
            set { basicPrice = value; }
        }

        public string SerialNumber
        {
            get { return serialNumber; }
            set { serialNumber = value; }
        }

        public string VendorRef
        {
            get { return vendorRef; }
            set { vendorRef = value; }
        }

        public string Notes
        {
            get { return notes; }
            set { notes = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spInvtLedgerDetails_InsRec", "@DetailsId", out returnedValue, parameterValues);
            
            detailsId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spInvtLedgerDetails_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[23];
            prams[0] = GetSqlParameter("@DetailsId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.DetailsId);
            prams[1] = GetSqlParameter("@HeaderId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.HeaderId);
            prams[2] = GetSqlParameter("@TxType", ParameterDirection.Input, SqlDbType.VarChar, 3, this.TxType);
            prams[3] = GetSqlParameter("@TxNumber", ParameterDirection.Input, SqlDbType.VarChar, 12, this.TxNumber);
            prams[4] = GetSqlParameter("@TxDate", ParameterDirection.Input, SqlDbType.DateTime, 8, this.TxDate);
            prams[5] = GetSqlParameter("@SHOP", ParameterDirection.Input, SqlDbType.VarChar, 4, this.SHOP);
            prams[6] = GetSqlParameter("@TERMINAL", ParameterDirection.Input, SqlDbType.VarChar, 2, this.TERMINAL);
            prams[7] = GetSqlParameter("@OPERATOR", ParameterDirection.Input, SqlDbType.VarChar, 4, this.OPERATOR);
            prams[8] = GetSqlParameter("@LineNumber", ParameterDirection.Input, SqlDbType.Int, 4, this.LineNumber);
            prams[9] = GetSqlParameter("@SubLedgerDetailsId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.SubLedgerDetailsId);
            prams[10] = GetSqlParameter("@ProductId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ProductId);
            prams[11] = GetSqlParameter("@Barcode", ParameterDirection.Input, SqlDbType.VarChar, 22, this.Barcode);
            prams[12] = GetSqlParameter("@CONFIRM_TRF_QTY", ParameterDirection.Input, SqlDbType.Decimal, 9, this.CONFIRM_TRF_QTY);
            prams[13] = GetSqlParameter("@Replenish", ParameterDirection.Input, SqlDbType.Int, 4, this.Replenish);
            prams[14] = GetSqlParameter("@Qty", ParameterDirection.Input, SqlDbType.Decimal, 9, this.Qty);
            prams[15] = GetSqlParameter("@UnitAmount", ParameterDirection.Input, SqlDbType.Money, 8, this.UnitAmount);
            prams[16] = GetSqlParameter("@Discount", ParameterDirection.Input, SqlDbType.Decimal, 5, this.Discount);
            prams[17] = GetSqlParameter("@Amount", ParameterDirection.Input, SqlDbType.Money, 8, this.Amount);
            prams[18] = GetSqlParameter("@AverageCost", ParameterDirection.Input, SqlDbType.Money, 8, this.AverageCost);
            prams[19] = GetSqlParameter("@BasicPrice", ParameterDirection.Input, SqlDbType.Money, 8, this.BasicPrice);
            prams[20] = GetSqlParameter("@SerialNumber", ParameterDirection.Input, SqlDbType.VarChar, 32, this.SerialNumber);
            prams[21] = GetSqlParameter("@VendorRef", ParameterDirection.Input, SqlDbType.VarChar, 32, this.VendorRef);
            prams[22] = GetSqlParameter("@Notes", ParameterDirection.Input, SqlDbType.NVarChar, 512, this.Notes);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@DetailsId", SqlDbType.UniqueIdentifier, 16, this.DetailsId),
                GetSqlParameterWithoutDirection("@HeaderId", SqlDbType.UniqueIdentifier, 16, this.HeaderId),
                GetSqlParameterWithoutDirection("@TxType", SqlDbType.VarChar, 3, this.TxType),
                GetSqlParameterWithoutDirection("@TxNumber", SqlDbType.VarChar, 12, this.TxNumber),
                GetSqlParameterWithoutDirection("@TxDate", SqlDbType.DateTime, 8, this.TxDate),
                GetSqlParameterWithoutDirection("@SHOP", SqlDbType.VarChar, 4, this.SHOP),
                GetSqlParameterWithoutDirection("@TERMINAL", SqlDbType.VarChar, 2, this.TERMINAL),
                GetSqlParameterWithoutDirection("@OPERATOR", SqlDbType.VarChar, 4, this.OPERATOR),
                GetSqlParameterWithoutDirection("@LineNumber", SqlDbType.Int, 4, this.LineNumber),
                GetSqlParameterWithoutDirection("@SubLedgerDetailsId", SqlDbType.UniqueIdentifier, 16, this.SubLedgerDetailsId),
                GetSqlParameterWithoutDirection("@ProductId", SqlDbType.UniqueIdentifier, 16, this.ProductId),
                GetSqlParameterWithoutDirection("@Barcode", SqlDbType.VarChar, 22, this.Barcode),
                GetSqlParameterWithoutDirection("@CONFIRM_TRF_QTY", SqlDbType.Decimal, 9, this.CONFIRM_TRF_QTY),
                GetSqlParameterWithoutDirection("@Replenish", SqlDbType.Int, 4, this.Replenish),
                GetSqlParameterWithoutDirection("@Qty", SqlDbType.Decimal, 9, this.Qty),
                GetSqlParameterWithoutDirection("@UnitAmount", SqlDbType.Money, 8, this.UnitAmount),
                GetSqlParameterWithoutDirection("@Discount", SqlDbType.Decimal, 5, this.Discount),
                GetSqlParameterWithoutDirection("@Amount", SqlDbType.Money, 8, this.Amount),
                GetSqlParameterWithoutDirection("@AverageCost", SqlDbType.Money, 8, this.AverageCost),
                GetSqlParameterWithoutDirection("@BasicPrice", SqlDbType.Money, 8, this.BasicPrice),
                GetSqlParameterWithoutDirection("@SerialNumber", SqlDbType.VarChar, 32, this.SerialNumber),
                GetSqlParameterWithoutDirection("@VendorRef", SqlDbType.VarChar, 32, this.VendorRef),
                GetSqlParameterWithoutDirection("@Notes", SqlDbType.NVarChar, 512, this.Notes)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("detailsId: " + detailsId.ToString()).Append("\r\n");
            builder.Append("headerId: " + headerId.ToString()).Append("\r\n");
            builder.Append("txType: " + txType.ToString()).Append("\r\n");
            builder.Append("txNumber: " + txNumber.ToString()).Append("\r\n");
            builder.Append("txDate: " + txDate.ToString()).Append("\r\n");
            builder.Append("sHOP: " + sHOP.ToString()).Append("\r\n");
            builder.Append("tERMINAL: " + tERMINAL.ToString()).Append("\r\n");
            builder.Append("oPERATOR: " + oPERATOR.ToString()).Append("\r\n");
            builder.Append("lineNumber: " + lineNumber.ToString()).Append("\r\n");
            builder.Append("subLedgerDetailsId: " + subLedgerDetailsId.ToString()).Append("\r\n");
            builder.Append("productId: " + productId.ToString()).Append("\r\n");
            builder.Append("barcode: " + barcode.ToString()).Append("\r\n");
            builder.Append("cONFIRM_TRF_QTY: " + cONFIRM_TRF_QTY.ToString()).Append("\r\n");
            builder.Append("replenish: " + replenish.ToString()).Append("\r\n");
            builder.Append("qty: " + qty.ToString()).Append("\r\n");
            builder.Append("unitAmount: " + unitAmount.ToString()).Append("\r\n");
            builder.Append("discount: " + discount.ToString()).Append("\r\n");
            builder.Append("amount: " + amount.ToString()).Append("\r\n");
            builder.Append("averageCost: " + averageCost.ToString()).Append("\r\n");
            builder.Append("basicPrice: " + basicPrice.ToString()).Append("\r\n");
            builder.Append("serialNumber: " + serialNumber.ToString()).Append("\r\n");
            builder.Append("vendorRef: " + vendorRef.ToString()).Append("\r\n");
            builder.Append("notes: " + notes.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			InvtLedgerDetailsCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = InvtLedgerDetails.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = InvtLedgerDetails.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (InvtLedgerDetails item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.HeaderId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.DetailsId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(InvtLedgerDetails target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.HeaderId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				InvtLedgerDetails parentTemplate = InvtLedgerDetails.Load(target.HeaderId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(InvtLedgerDetails target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="InvtLedgerDetails">InvtLedgerDetails</see> objects.
    /// </summary>
    public class InvtLedgerDetailsCollection : BindingList< InvtLedgerDetails>
    {
	}
}
