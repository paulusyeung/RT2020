using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.ProductBatch.
    /// Date Created:   2020-08-09 02:14:14
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class ProductBatch
    {
        private Guid key = Guid.Empty;
        private Guid batchId = Guid.Empty;
        private string sTKCODE = String.Empty;
        private string aPP1_COMBIN = String.Empty;
        private string aPP2_COMBIN = String.Empty;
        private string aPP3_COMBIN = String.Empty;
        private string cLASS1 = String.Empty;
        private string cLASS2 = String.Empty;
        private string cLASS3 = String.Empty;
        private string cLASS4 = String.Empty;
        private string cLASS5 = String.Empty;
        private string cLASS6 = String.Empty;
        private string description = String.Empty;
        private string mAINUNIT = String.Empty;
        private string aLTITEM = String.Empty;
        private string rEMARKS = String.Empty;
        private decimal mARKUP;
        private decimal bASPRC;
        private decimal wHLPRC;
        private string vCURR = String.Empty;
        private decimal vPRC;
        private decimal nRDISC;
        private decimal rEORDLVL;
        private decimal rEORDQTY;
        private bool sERIALFLAG;
        private string nATURE = String.Empty;
        private string rEMARK1 = String.Empty;
        private string rEMARK2 = String.Empty;
        private string rEMARK3 = String.Empty;
        private string rEMARK4 = String.Empty;
        private string rEMARK5 = String.Empty;
        private string rEMARK6 = String.Empty;
        private string pHOTO = String.Empty;
        private string sTK_MEMO = String.Empty;
        private string sTATUS = String.Empty;
        private DateTime dATEPOST = DateTime.Parse("1900-1-1");
        private DateTime dATECREATE = DateTime.Parse("1900-1-1");
        private DateTime dATELCHG = DateTime.Parse("1900-1-1");
        private string uSERLCHG = String.Empty;
        private string rETAILITEM = String.Empty;
        private string bINX = String.Empty;
        private string bINY = String.Empty;
        private string bINZ = String.Empty;
        private string dESC_MEMO = String.Empty;
        private string dESC_POLE = String.Empty;
        private string oFF_DISPLAY_ITEM = String.Empty;
        private string cOUNTER_ITEM = String.Empty;
        private decimal oRIPRC;

        /// <summary>
        /// Initialize an new empty ProductBatch object.
        /// </summary>
        public ProductBatch()
        {
        }
		
        /// <summary>
        /// Initialize a new ProductBatch object with the given parameters.
        /// </summary>
        public ProductBatch(Guid batchId, string sTKCODE, string aPP1_COMBIN, string aPP2_COMBIN, string aPP3_COMBIN, string cLASS1, string cLASS2, string cLASS3, string cLASS4, string cLASS5, string cLASS6, string description, string mAINUNIT, string aLTITEM, string rEMARKS, decimal mARKUP, decimal bASPRC, decimal wHLPRC, string vCURR, decimal vPRC, decimal nRDISC, decimal rEORDLVL, decimal rEORDQTY, bool sERIALFLAG, string nATURE, string rEMARK1, string rEMARK2, string rEMARK3, string rEMARK4, string rEMARK5, string rEMARK6, string pHOTO, string sTK_MEMO, string sTATUS, DateTime dATEPOST, DateTime dATECREATE, DateTime dATELCHG, string uSERLCHG, string rETAILITEM, string bINX, string bINY, string bINZ, string dESC_MEMO, string dESC_POLE, string oFF_DISPLAY_ITEM, string cOUNTER_ITEM, decimal oRIPRC)
        {
                this.batchId = batchId;
                this.sTKCODE = sTKCODE;
                this.aPP1_COMBIN = aPP1_COMBIN;
                this.aPP2_COMBIN = aPP2_COMBIN;
                this.aPP3_COMBIN = aPP3_COMBIN;
                this.cLASS1 = cLASS1;
                this.cLASS2 = cLASS2;
                this.cLASS3 = cLASS3;
                this.cLASS4 = cLASS4;
                this.cLASS5 = cLASS5;
                this.cLASS6 = cLASS6;
                this.description = description;
                this.mAINUNIT = mAINUNIT;
                this.aLTITEM = aLTITEM;
                this.rEMARKS = rEMARKS;
                this.mARKUP = mARKUP;
                this.bASPRC = bASPRC;
                this.wHLPRC = wHLPRC;
                this.vCURR = vCURR;
                this.vPRC = vPRC;
                this.nRDISC = nRDISC;
                this.rEORDLVL = rEORDLVL;
                this.rEORDQTY = rEORDQTY;
                this.sERIALFLAG = sERIALFLAG;
                this.nATURE = nATURE;
                this.rEMARK1 = rEMARK1;
                this.rEMARK2 = rEMARK2;
                this.rEMARK3 = rEMARK3;
                this.rEMARK4 = rEMARK4;
                this.rEMARK5 = rEMARK5;
                this.rEMARK6 = rEMARK6;
                this.pHOTO = pHOTO;
                this.sTK_MEMO = sTK_MEMO;
                this.sTATUS = sTATUS;
                this.dATEPOST = dATEPOST;
                this.dATECREATE = dATECREATE;
                this.dATELCHG = dATELCHG;
                this.uSERLCHG = uSERLCHG;
                this.rETAILITEM = rETAILITEM;
                this.bINX = bINX;
                this.bINY = bINY;
                this.bINZ = bINZ;
                this.dESC_MEMO = dESC_MEMO;
                this.dESC_POLE = dESC_POLE;
                this.oFF_DISPLAY_ITEM = oFF_DISPLAY_ITEM;
                this.cOUNTER_ITEM = cOUNTER_ITEM;
                this.oRIPRC = oRIPRC;
        }	
		
        /// <summary>
        /// Loads a ProductBatch object from the database using the given BatchId
        /// </summary>
        /// <param name="batchId">The primary key value</param>
        /// <returns>A ProductBatch object</returns>
        public static ProductBatch Load(Guid batchId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@BatchId", batchId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spProductBatch_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    ProductBatch result = new ProductBatch();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a ProductBatch object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A ProductBatch object</returns>
        public static ProductBatch LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spProductBatch_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    ProductBatch result = new ProductBatch();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of ProductBatch objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the ProductBatch objects in the database.</returns>
        public static ProductBatchCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spProductBatch_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ProductBatch objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the ProductBatch objects in the database ordered by the columns specified.</returns>
        public static ProductBatchCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spProductBatch_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ProductBatch objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the ProductBatch objects in the database.</returns>
        public static ProductBatchCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spProductBatch_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ProductBatch objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the ProductBatch objects in the database ordered by the columns specified.</returns>
        public static ProductBatchCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spProductBatch_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ProductBatch objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the ProductBatch objects in the database.</returns>
        public static ProductBatchCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            ProductBatchCollection result = new ProductBatchCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    ProductBatch tmp = new ProductBatch();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a ProductBatch object from the database.
        /// </summary>
        /// <param name="batchId">The primary key value</param>
        public static void Delete(Guid batchId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@BatchId", batchId) };
            SqlHelper.Default.ExecuteNonQuery("spProductBatch_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) batchId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) sTKCODE = reader.GetString(1);
                if (!reader.IsDBNull(2)) aPP1_COMBIN = reader.GetString(2);
                if (!reader.IsDBNull(3)) aPP2_COMBIN = reader.GetString(3);
                if (!reader.IsDBNull(4)) aPP3_COMBIN = reader.GetString(4);
                if (!reader.IsDBNull(5)) cLASS1 = reader.GetString(5);
                if (!reader.IsDBNull(6)) cLASS2 = reader.GetString(6);
                if (!reader.IsDBNull(7)) cLASS3 = reader.GetString(7);
                if (!reader.IsDBNull(8)) cLASS4 = reader.GetString(8);
                if (!reader.IsDBNull(9)) cLASS5 = reader.GetString(9);
                if (!reader.IsDBNull(10)) cLASS6 = reader.GetString(10);
                if (!reader.IsDBNull(11)) description = reader.GetString(11);
                if (!reader.IsDBNull(12)) mAINUNIT = reader.GetString(12);
                if (!reader.IsDBNull(13)) aLTITEM = reader.GetString(13);
                if (!reader.IsDBNull(14)) rEMARKS = reader.GetString(14);
                if (!reader.IsDBNull(15)) mARKUP = reader.GetDecimal(15);
                if (!reader.IsDBNull(16)) bASPRC = reader.GetDecimal(16);
                if (!reader.IsDBNull(17)) wHLPRC = reader.GetDecimal(17);
                if (!reader.IsDBNull(18)) vCURR = reader.GetString(18);
                if (!reader.IsDBNull(19)) vPRC = reader.GetDecimal(19);
                if (!reader.IsDBNull(20)) nRDISC = reader.GetDecimal(20);
                if (!reader.IsDBNull(21)) rEORDLVL = reader.GetDecimal(21);
                if (!reader.IsDBNull(22)) rEORDQTY = reader.GetDecimal(22);
                if (!reader.IsDBNull(23)) sERIALFLAG = reader.GetBoolean(23);
                if (!reader.IsDBNull(24)) nATURE = reader.GetString(24);
                if (!reader.IsDBNull(25)) rEMARK1 = reader.GetString(25);
                if (!reader.IsDBNull(26)) rEMARK2 = reader.GetString(26);
                if (!reader.IsDBNull(27)) rEMARK3 = reader.GetString(27);
                if (!reader.IsDBNull(28)) rEMARK4 = reader.GetString(28);
                if (!reader.IsDBNull(29)) rEMARK5 = reader.GetString(29);
                if (!reader.IsDBNull(30)) rEMARK6 = reader.GetString(30);
                if (!reader.IsDBNull(31)) pHOTO = reader.GetString(31);
                if (!reader.IsDBNull(32)) sTK_MEMO = reader.GetString(32);
                if (!reader.IsDBNull(33)) sTATUS = reader.GetString(33);
                if (!reader.IsDBNull(34)) dATEPOST = reader.GetDateTime(34);
                if (!reader.IsDBNull(35)) dATECREATE = reader.GetDateTime(35);
                if (!reader.IsDBNull(36)) dATELCHG = reader.GetDateTime(36);
                if (!reader.IsDBNull(37)) uSERLCHG = reader.GetString(37);
                if (!reader.IsDBNull(38)) rETAILITEM = reader.GetString(38);
                if (!reader.IsDBNull(39)) bINX = reader.GetString(39);
                if (!reader.IsDBNull(40)) bINY = reader.GetString(40);
                if (!reader.IsDBNull(41)) bINZ = reader.GetString(41);
                if (!reader.IsDBNull(42)) dESC_MEMO = reader.GetString(42);
                if (!reader.IsDBNull(43)) dESC_POLE = reader.GetString(43);
                if (!reader.IsDBNull(44)) oFF_DISPLAY_ITEM = reader.GetString(44);
                if (!reader.IsDBNull(45)) cOUNTER_ITEM = reader.GetString(45);
                if (!reader.IsDBNull(46)) oRIPRC = reader.GetDecimal(46);
            }
        }
		
        public void Delete()
        {
            Delete(this.BatchId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != BatchId)
                    this.Delete();
                Update();
            }
        }

        public Guid BatchId
        {
            get { return batchId; }
            set { batchId = value; }
        }

        public string STKCODE
        {
            get { return sTKCODE; }
            set { sTKCODE = value; }
        }

        public string APP1_COMBIN
        {
            get { return aPP1_COMBIN; }
            set { aPP1_COMBIN = value; }
        }

        public string APP2_COMBIN
        {
            get { return aPP2_COMBIN; }
            set { aPP2_COMBIN = value; }
        }

        public string APP3_COMBIN
        {
            get { return aPP3_COMBIN; }
            set { aPP3_COMBIN = value; }
        }

        public string CLASS1
        {
            get { return cLASS1; }
            set { cLASS1 = value; }
        }

        public string CLASS2
        {
            get { return cLASS2; }
            set { cLASS2 = value; }
        }

        public string CLASS3
        {
            get { return cLASS3; }
            set { cLASS3 = value; }
        }

        public string CLASS4
        {
            get { return cLASS4; }
            set { cLASS4 = value; }
        }

        public string CLASS5
        {
            get { return cLASS5; }
            set { cLASS5 = value; }
        }

        public string CLASS6
        {
            get { return cLASS6; }
            set { cLASS6 = value; }
        }

        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        public string MAINUNIT
        {
            get { return mAINUNIT; }
            set { mAINUNIT = value; }
        }

        public string ALTITEM
        {
            get { return aLTITEM; }
            set { aLTITEM = value; }
        }

        public string REMARKS
        {
            get { return rEMARKS; }
            set { rEMARKS = value; }
        }

        public decimal MARKUP
        {
            get { return mARKUP; }
            set { mARKUP = value; }
        }

        public decimal BASPRC
        {
            get { return bASPRC; }
            set { bASPRC = value; }
        }

        public decimal WHLPRC
        {
            get { return wHLPRC; }
            set { wHLPRC = value; }
        }

        public string VCURR
        {
            get { return vCURR; }
            set { vCURR = value; }
        }

        public decimal VPRC
        {
            get { return vPRC; }
            set { vPRC = value; }
        }

        public decimal NRDISC
        {
            get { return nRDISC; }
            set { nRDISC = value; }
        }

        public decimal REORDLVL
        {
            get { return rEORDLVL; }
            set { rEORDLVL = value; }
        }

        public decimal REORDQTY
        {
            get { return rEORDQTY; }
            set { rEORDQTY = value; }
        }

        public bool SERIALFLAG
        {
            get { return sERIALFLAG; }
            set { sERIALFLAG = value; }
        }

        public string NATURE
        {
            get { return nATURE; }
            set { nATURE = value; }
        }

        public string REMARK1
        {
            get { return rEMARK1; }
            set { rEMARK1 = value; }
        }

        public string REMARK2
        {
            get { return rEMARK2; }
            set { rEMARK2 = value; }
        }

        public string REMARK3
        {
            get { return rEMARK3; }
            set { rEMARK3 = value; }
        }

        public string REMARK4
        {
            get { return rEMARK4; }
            set { rEMARK4 = value; }
        }

        public string REMARK5
        {
            get { return rEMARK5; }
            set { rEMARK5 = value; }
        }

        public string REMARK6
        {
            get { return rEMARK6; }
            set { rEMARK6 = value; }
        }

        public string PHOTO
        {
            get { return pHOTO; }
            set { pHOTO = value; }
        }

        public string STK_MEMO
        {
            get { return sTK_MEMO; }
            set { sTK_MEMO = value; }
        }

        public string STATUS
        {
            get { return sTATUS; }
            set { sTATUS = value; }
        }

        public DateTime DATEPOST
        {
            get { return dATEPOST; }
            set { dATEPOST = value; }
        }

        public DateTime DATECREATE
        {
            get { return dATECREATE; }
            set { dATECREATE = value; }
        }

        public DateTime DATELCHG
        {
            get { return dATELCHG; }
            set { dATELCHG = value; }
        }

        public string USERLCHG
        {
            get { return uSERLCHG; }
            set { uSERLCHG = value; }
        }

        public string RETAILITEM
        {
            get { return rETAILITEM; }
            set { rETAILITEM = value; }
        }

        public string BINX
        {
            get { return bINX; }
            set { bINX = value; }
        }

        public string BINY
        {
            get { return bINY; }
            set { bINY = value; }
        }

        public string BINZ
        {
            get { return bINZ; }
            set { bINZ = value; }
        }

        public string DESC_MEMO
        {
            get { return dESC_MEMO; }
            set { dESC_MEMO = value; }
        }

        public string DESC_POLE
        {
            get { return dESC_POLE; }
            set { dESC_POLE = value; }
        }

        public string OFF_DISPLAY_ITEM
        {
            get { return oFF_DISPLAY_ITEM; }
            set { oFF_DISPLAY_ITEM = value; }
        }

        public string COUNTER_ITEM
        {
            get { return cOUNTER_ITEM; }
            set { cOUNTER_ITEM = value; }
        }

        public decimal ORIPRC
        {
            get { return oRIPRC; }
            set { oRIPRC = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spProductBatch_InsRec", "@BatchId", out returnedValue, parameterValues);
            
            batchId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spProductBatch_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[47];
            prams[0] = GetSqlParameter("@BatchId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.BatchId);
            prams[1] = GetSqlParameter("@STKCODE", ParameterDirection.Input, SqlDbType.VarChar, 10, this.STKCODE);
            prams[2] = GetSqlParameter("@APP1_COMBIN", ParameterDirection.Input, SqlDbType.VarChar, 10, this.APP1_COMBIN);
            prams[3] = GetSqlParameter("@APP2_COMBIN", ParameterDirection.Input, SqlDbType.VarChar, 10, this.APP2_COMBIN);
            prams[4] = GetSqlParameter("@APP3_COMBIN", ParameterDirection.Input, SqlDbType.VarChar, 10, this.APP3_COMBIN);
            prams[5] = GetSqlParameter("@CLASS1", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CLASS1);
            prams[6] = GetSqlParameter("@CLASS2", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CLASS2);
            prams[7] = GetSqlParameter("@CLASS3", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CLASS3);
            prams[8] = GetSqlParameter("@CLASS4", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CLASS4);
            prams[9] = GetSqlParameter("@CLASS5", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CLASS5);
            prams[10] = GetSqlParameter("@CLASS6", ParameterDirection.Input, SqlDbType.VarChar, 6, this.CLASS6);
            prams[11] = GetSqlParameter("@Description", ParameterDirection.Input, SqlDbType.VarChar, 50, this.Description);
            prams[12] = GetSqlParameter("@MAINUNIT", ParameterDirection.Input, SqlDbType.VarChar, 4, this.MAINUNIT);
            prams[13] = GetSqlParameter("@ALTITEM", ParameterDirection.Input, SqlDbType.VarChar, 20, this.ALTITEM);
            prams[14] = GetSqlParameter("@REMARKS", ParameterDirection.Input, SqlDbType.VarChar, 30, this.REMARKS);
            prams[15] = GetSqlParameter("@MARKUP", ParameterDirection.Input, SqlDbType.Decimal, 5, this.MARKUP);
            prams[16] = GetSqlParameter("@BASPRC", ParameterDirection.Input, SqlDbType.Money, 8, this.BASPRC);
            prams[17] = GetSqlParameter("@WHLPRC", ParameterDirection.Input, SqlDbType.Money, 8, this.WHLPRC);
            prams[18] = GetSqlParameter("@VCURR", ParameterDirection.Input, SqlDbType.VarChar, 3, this.VCURR);
            prams[19] = GetSqlParameter("@VPRC", ParameterDirection.Input, SqlDbType.Money, 8, this.VPRC);
            prams[20] = GetSqlParameter("@NRDISC", ParameterDirection.Input, SqlDbType.Decimal, 5, this.NRDISC);
            prams[21] = GetSqlParameter("@REORDLVL", ParameterDirection.Input, SqlDbType.Decimal, 9, this.REORDLVL);
            prams[22] = GetSqlParameter("@REORDQTY", ParameterDirection.Input, SqlDbType.Decimal, 9, this.REORDQTY);
            prams[23] = GetSqlParameter("@SERIALFLAG", ParameterDirection.Input, SqlDbType.Bit, 1, this.SERIALFLAG);
            prams[24] = GetSqlParameter("@NATURE", ParameterDirection.Input, SqlDbType.VarChar, 1, this.NATURE);
            prams[25] = GetSqlParameter("@REMARK1", ParameterDirection.Input, SqlDbType.VarChar, 10, this.REMARK1);
            prams[26] = GetSqlParameter("@REMARK2", ParameterDirection.Input, SqlDbType.VarChar, 10, this.REMARK2);
            prams[27] = GetSqlParameter("@REMARK3", ParameterDirection.Input, SqlDbType.VarChar, 10, this.REMARK3);
            prams[28] = GetSqlParameter("@REMARK4", ParameterDirection.Input, SqlDbType.VarChar, 10, this.REMARK4);
            prams[29] = GetSqlParameter("@REMARK5", ParameterDirection.Input, SqlDbType.VarChar, 10, this.REMARK5);
            prams[30] = GetSqlParameter("@REMARK6", ParameterDirection.Input, SqlDbType.VarChar, 10, this.REMARK6);
            prams[31] = GetSqlParameter("@PHOTO", ParameterDirection.Input, SqlDbType.VarChar, 100, this.PHOTO);
            prams[32] = GetSqlParameter("@STK_MEMO", ParameterDirection.Input, SqlDbType.NText, 16, this.STK_MEMO);
            prams[33] = GetSqlParameter("@STATUS", ParameterDirection.Input, SqlDbType.VarChar, 4, this.STATUS);
            prams[34] = GetSqlParameter("@DATEPOST", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATEPOST);
            prams[35] = GetSqlParameter("@DATECREATE", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATECREATE);
            prams[36] = GetSqlParameter("@DATELCHG", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DATELCHG);
            prams[37] = GetSqlParameter("@USERLCHG", ParameterDirection.Input, SqlDbType.VarChar, 4, this.USERLCHG);
            prams[38] = GetSqlParameter("@RETAILITEM", ParameterDirection.Input, SqlDbType.VarChar, 1, this.RETAILITEM);
            prams[39] = GetSqlParameter("@BINX", ParameterDirection.Input, SqlDbType.VarChar, 4, this.BINX);
            prams[40] = GetSqlParameter("@BINY", ParameterDirection.Input, SqlDbType.VarChar, 4, this.BINY);
            prams[41] = GetSqlParameter("@BINZ", ParameterDirection.Input, SqlDbType.VarChar, 4, this.BINZ);
            prams[42] = GetSqlParameter("@DESC_MEMO", ParameterDirection.Input, SqlDbType.VarChar, 30, this.DESC_MEMO);
            prams[43] = GetSqlParameter("@DESC_POLE", ParameterDirection.Input, SqlDbType.VarChar, 20, this.DESC_POLE);
            prams[44] = GetSqlParameter("@OFF_DISPLAY_ITEM", ParameterDirection.Input, SqlDbType.VarChar, 1, this.OFF_DISPLAY_ITEM);
            prams[45] = GetSqlParameter("@COUNTER_ITEM", ParameterDirection.Input, SqlDbType.VarChar, 1, this.COUNTER_ITEM);
            prams[46] = GetSqlParameter("@ORIPRC", ParameterDirection.Input, SqlDbType.Money, 8, this.ORIPRC);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@BatchId", SqlDbType.UniqueIdentifier, 16, this.BatchId),
                GetSqlParameterWithoutDirection("@STKCODE", SqlDbType.VarChar, 10, this.STKCODE),
                GetSqlParameterWithoutDirection("@APP1_COMBIN", SqlDbType.VarChar, 10, this.APP1_COMBIN),
                GetSqlParameterWithoutDirection("@APP2_COMBIN", SqlDbType.VarChar, 10, this.APP2_COMBIN),
                GetSqlParameterWithoutDirection("@APP3_COMBIN", SqlDbType.VarChar, 10, this.APP3_COMBIN),
                GetSqlParameterWithoutDirection("@CLASS1", SqlDbType.VarChar, 6, this.CLASS1),
                GetSqlParameterWithoutDirection("@CLASS2", SqlDbType.VarChar, 6, this.CLASS2),
                GetSqlParameterWithoutDirection("@CLASS3", SqlDbType.VarChar, 6, this.CLASS3),
                GetSqlParameterWithoutDirection("@CLASS4", SqlDbType.VarChar, 6, this.CLASS4),
                GetSqlParameterWithoutDirection("@CLASS5", SqlDbType.VarChar, 6, this.CLASS5),
                GetSqlParameterWithoutDirection("@CLASS6", SqlDbType.VarChar, 6, this.CLASS6),
                GetSqlParameterWithoutDirection("@Description", SqlDbType.VarChar, 50, this.Description),
                GetSqlParameterWithoutDirection("@MAINUNIT", SqlDbType.VarChar, 4, this.MAINUNIT),
                GetSqlParameterWithoutDirection("@ALTITEM", SqlDbType.VarChar, 20, this.ALTITEM),
                GetSqlParameterWithoutDirection("@REMARKS", SqlDbType.VarChar, 30, this.REMARKS),
                GetSqlParameterWithoutDirection("@MARKUP", SqlDbType.Decimal, 5, this.MARKUP),
                GetSqlParameterWithoutDirection("@BASPRC", SqlDbType.Money, 8, this.BASPRC),
                GetSqlParameterWithoutDirection("@WHLPRC", SqlDbType.Money, 8, this.WHLPRC),
                GetSqlParameterWithoutDirection("@VCURR", SqlDbType.VarChar, 3, this.VCURR),
                GetSqlParameterWithoutDirection("@VPRC", SqlDbType.Money, 8, this.VPRC),
                GetSqlParameterWithoutDirection("@NRDISC", SqlDbType.Decimal, 5, this.NRDISC),
                GetSqlParameterWithoutDirection("@REORDLVL", SqlDbType.Decimal, 9, this.REORDLVL),
                GetSqlParameterWithoutDirection("@REORDQTY", SqlDbType.Decimal, 9, this.REORDQTY),
                GetSqlParameterWithoutDirection("@SERIALFLAG", SqlDbType.Bit, 1, this.SERIALFLAG),
                GetSqlParameterWithoutDirection("@NATURE", SqlDbType.VarChar, 1, this.NATURE),
                GetSqlParameterWithoutDirection("@REMARK1", SqlDbType.VarChar, 10, this.REMARK1),
                GetSqlParameterWithoutDirection("@REMARK2", SqlDbType.VarChar, 10, this.REMARK2),
                GetSqlParameterWithoutDirection("@REMARK3", SqlDbType.VarChar, 10, this.REMARK3),
                GetSqlParameterWithoutDirection("@REMARK4", SqlDbType.VarChar, 10, this.REMARK4),
                GetSqlParameterWithoutDirection("@REMARK5", SqlDbType.VarChar, 10, this.REMARK5),
                GetSqlParameterWithoutDirection("@REMARK6", SqlDbType.VarChar, 10, this.REMARK6),
                GetSqlParameterWithoutDirection("@PHOTO", SqlDbType.VarChar, 100, this.PHOTO),
                GetSqlParameterWithoutDirection("@STK_MEMO", SqlDbType.NText, 16, this.STK_MEMO),
                GetSqlParameterWithoutDirection("@STATUS", SqlDbType.VarChar, 4, this.STATUS),
                GetSqlParameterWithoutDirection("@DATEPOST", SqlDbType.DateTime, 8, this.DATEPOST),
                GetSqlParameterWithoutDirection("@DATECREATE", SqlDbType.DateTime, 8, this.DATECREATE),
                GetSqlParameterWithoutDirection("@DATELCHG", SqlDbType.DateTime, 8, this.DATELCHG),
                GetSqlParameterWithoutDirection("@USERLCHG", SqlDbType.VarChar, 4, this.USERLCHG),
                GetSqlParameterWithoutDirection("@RETAILITEM", SqlDbType.VarChar, 1, this.RETAILITEM),
                GetSqlParameterWithoutDirection("@BINX", SqlDbType.VarChar, 4, this.BINX),
                GetSqlParameterWithoutDirection("@BINY", SqlDbType.VarChar, 4, this.BINY),
                GetSqlParameterWithoutDirection("@BINZ", SqlDbType.VarChar, 4, this.BINZ),
                GetSqlParameterWithoutDirection("@DESC_MEMO", SqlDbType.VarChar, 30, this.DESC_MEMO),
                GetSqlParameterWithoutDirection("@DESC_POLE", SqlDbType.VarChar, 20, this.DESC_POLE),
                GetSqlParameterWithoutDirection("@OFF_DISPLAY_ITEM", SqlDbType.VarChar, 1, this.OFF_DISPLAY_ITEM),
                GetSqlParameterWithoutDirection("@COUNTER_ITEM", SqlDbType.VarChar, 1, this.COUNTER_ITEM),
                GetSqlParameterWithoutDirection("@ORIPRC", SqlDbType.Money, 8, this.ORIPRC)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("batchId: " + batchId.ToString()).Append("\r\n");
            builder.Append("sTKCODE: " + sTKCODE.ToString()).Append("\r\n");
            builder.Append("aPP1_COMBIN: " + aPP1_COMBIN.ToString()).Append("\r\n");
            builder.Append("aPP2_COMBIN: " + aPP2_COMBIN.ToString()).Append("\r\n");
            builder.Append("aPP3_COMBIN: " + aPP3_COMBIN.ToString()).Append("\r\n");
            builder.Append("cLASS1: " + cLASS1.ToString()).Append("\r\n");
            builder.Append("cLASS2: " + cLASS2.ToString()).Append("\r\n");
            builder.Append("cLASS3: " + cLASS3.ToString()).Append("\r\n");
            builder.Append("cLASS4: " + cLASS4.ToString()).Append("\r\n");
            builder.Append("cLASS5: " + cLASS5.ToString()).Append("\r\n");
            builder.Append("cLASS6: " + cLASS6.ToString()).Append("\r\n");
            builder.Append("description: " + description.ToString()).Append("\r\n");
            builder.Append("mAINUNIT: " + mAINUNIT.ToString()).Append("\r\n");
            builder.Append("aLTITEM: " + aLTITEM.ToString()).Append("\r\n");
            builder.Append("rEMARKS: " + rEMARKS.ToString()).Append("\r\n");
            builder.Append("mARKUP: " + mARKUP.ToString()).Append("\r\n");
            builder.Append("bASPRC: " + bASPRC.ToString()).Append("\r\n");
            builder.Append("wHLPRC: " + wHLPRC.ToString()).Append("\r\n");
            builder.Append("vCURR: " + vCURR.ToString()).Append("\r\n");
            builder.Append("vPRC: " + vPRC.ToString()).Append("\r\n");
            builder.Append("nRDISC: " + nRDISC.ToString()).Append("\r\n");
            builder.Append("rEORDLVL: " + rEORDLVL.ToString()).Append("\r\n");
            builder.Append("rEORDQTY: " + rEORDQTY.ToString()).Append("\r\n");
            builder.Append("sERIALFLAG: " + sERIALFLAG.ToString()).Append("\r\n");
            builder.Append("nATURE: " + nATURE.ToString()).Append("\r\n");
            builder.Append("rEMARK1: " + rEMARK1.ToString()).Append("\r\n");
            builder.Append("rEMARK2: " + rEMARK2.ToString()).Append("\r\n");
            builder.Append("rEMARK3: " + rEMARK3.ToString()).Append("\r\n");
            builder.Append("rEMARK4: " + rEMARK4.ToString()).Append("\r\n");
            builder.Append("rEMARK5: " + rEMARK5.ToString()).Append("\r\n");
            builder.Append("rEMARK6: " + rEMARK6.ToString()).Append("\r\n");
            builder.Append("pHOTO: " + pHOTO.ToString()).Append("\r\n");
            builder.Append("sTK_MEMO: " + sTK_MEMO.ToString()).Append("\r\n");
            builder.Append("sTATUS: " + sTATUS.ToString()).Append("\r\n");
            builder.Append("dATEPOST: " + dATEPOST.ToString()).Append("\r\n");
            builder.Append("dATECREATE: " + dATECREATE.ToString()).Append("\r\n");
            builder.Append("dATELCHG: " + dATELCHG.ToString()).Append("\r\n");
            builder.Append("uSERLCHG: " + uSERLCHG.ToString()).Append("\r\n");
            builder.Append("rETAILITEM: " + rETAILITEM.ToString()).Append("\r\n");
            builder.Append("bINX: " + bINX.ToString()).Append("\r\n");
            builder.Append("bINY: " + bINY.ToString()).Append("\r\n");
            builder.Append("bINZ: " + bINZ.ToString()).Append("\r\n");
            builder.Append("dESC_MEMO: " + dESC_MEMO.ToString()).Append("\r\n");
            builder.Append("dESC_POLE: " + dESC_POLE.ToString()).Append("\r\n");
            builder.Append("oFF_DISPLAY_ITEM: " + oFF_DISPLAY_ITEM.ToString()).Append("\r\n");
            builder.Append("cOUNTER_ITEM: " + cOUNTER_ITEM.ToString()).Append("\r\n");
            builder.Append("oRIPRC: " + oRIPRC.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			ProductBatchCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = ProductBatch.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = ProductBatch.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (ProductBatch item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = IgnorThis(item, ParentFilter);
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.BatchId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(ProductBatch target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
			string filterField = (string)pi.GetValue(target, null);
			if (filterField.ToLower() == parsed[1].ToLower())
			{
				result = false;
			}
			return result;
		}

		private static string GetFormatedText(ProductBatch target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="ProductBatch">ProductBatch</see> objects.
    /// </summary>
    public class ProductBatchCollection : BindingList< ProductBatch>
    {
	}
}
