using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.PurchaseOrderHeader.
    /// Date Created:   2020-08-09 02:14:15
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class PurchaseOrderHeader
    {
        private Guid key = Guid.Empty;
        private Guid orderHeaderId = Guid.Empty;
        private string orderNumber = String.Empty;
        private int orderType = 0;
        private Guid workplaceId = Guid.Empty;
        private Guid staffId = Guid.Empty;
        private Guid supplierId = Guid.Empty;
        private string currencyCode = String.Empty;
        private decimal exchangeRate;
        private Guid termsId = Guid.Empty;
        private int creditDays = 0;
        private decimal depositPercentage;
        private string paymentRemarks = String.Empty;
        private string shipmentMethod = String.Empty;
        private string shipmentRemarks = String.Empty;
        private bool partialShipment;
        private DateTime orderOn = DateTime.Parse("1900-1-1");
        private DateTime deliverOn = DateTime.Parse("1900-1-1");
        private DateTime cancellationOn = DateTime.Parse("1900-1-1");
        private decimal groupDiscount1;
        private decimal groupDiscount2;
        private decimal groupDiscount3;
        private string source = String.Empty;
        private decimal totalCost;
        private decimal totalQty;
        private bool settled;
        private DateTime settledOn = DateTime.Parse("1900-1-1");
        private DateTime postedOn = DateTime.Parse("1900-1-1");
        private Guid postedBy = Guid.Empty;
        private string deliveryAddress = String.Empty;
        private string contactPerson = String.Empty;
        private string contactPhone = String.Empty;
        private decimal freightChargePcn;
        private decimal freightChargeAmt;
        private decimal handlingChargePcn;
        private decimal handlingChargeAmt;
        private decimal insuranceChargePcn;
        private decimal insuranceChargeAmt;
        private decimal otherChargesPcn;
        private decimal otherChargesAmt;
        private decimal chargeCoefficient;
        private bool stockReceiveAllocated;
        private string remarks1 = String.Empty;
        private string remarks2 = String.Empty;
        private string remarks3 = String.Empty;
        private string tYPEDTL = String.Empty;
        private Guid requestedBy = Guid.Empty;
        private bool eXPORTFLAG;
        private int status = 0;
        private DateTime createdOn = DateTime.Parse("1900-1-1");
        private Guid createdBy = Guid.Empty;
        private DateTime modifiedOn = DateTime.Parse("1900-1-1");
        private Guid modifiedBy = Guid.Empty;
        private bool retired;
        private DateTime retiredOn = DateTime.Parse("1900-1-1");
        private Guid retiredBy = Guid.Empty;

        /// <summary>
        /// Initialize an new empty PurchaseOrderHeader object.
        /// </summary>
        public PurchaseOrderHeader()
        {
        }
		
        /// <summary>
        /// Initialize a new PurchaseOrderHeader object with the given parameters.
        /// </summary>
        public PurchaseOrderHeader(Guid orderHeaderId, string orderNumber, int orderType, Guid workplaceId, Guid staffId, Guid supplierId, string currencyCode, decimal exchangeRate, Guid termsId, int creditDays, decimal depositPercentage, string paymentRemarks, string shipmentMethod, string shipmentRemarks, bool partialShipment, DateTime orderOn, DateTime deliverOn, DateTime cancellationOn, decimal groupDiscount1, decimal groupDiscount2, decimal groupDiscount3, string source, decimal totalCost, decimal totalQty, bool settled, DateTime settledOn, DateTime postedOn, Guid postedBy, string deliveryAddress, string contactPerson, string contactPhone, decimal freightChargePcn, decimal freightChargeAmt, decimal handlingChargePcn, decimal handlingChargeAmt, decimal insuranceChargePcn, decimal insuranceChargeAmt, decimal otherChargesPcn, decimal otherChargesAmt, decimal chargeCoefficient, bool stockReceiveAllocated, string remarks1, string remarks2, string remarks3, string tYPEDTL, Guid requestedBy, bool eXPORTFLAG, int status, DateTime createdOn, Guid createdBy, DateTime modifiedOn, Guid modifiedBy, bool retired, DateTime retiredOn, Guid retiredBy)
        {
                this.orderHeaderId = orderHeaderId;
                this.orderNumber = orderNumber;
                this.orderType = orderType;
                this.workplaceId = workplaceId;
                this.staffId = staffId;
                this.supplierId = supplierId;
                this.currencyCode = currencyCode;
                this.exchangeRate = exchangeRate;
                this.termsId = termsId;
                this.creditDays = creditDays;
                this.depositPercentage = depositPercentage;
                this.paymentRemarks = paymentRemarks;
                this.shipmentMethod = shipmentMethod;
                this.shipmentRemarks = shipmentRemarks;
                this.partialShipment = partialShipment;
                this.orderOn = orderOn;
                this.deliverOn = deliverOn;
                this.cancellationOn = cancellationOn;
                this.groupDiscount1 = groupDiscount1;
                this.groupDiscount2 = groupDiscount2;
                this.groupDiscount3 = groupDiscount3;
                this.source = source;
                this.totalCost = totalCost;
                this.totalQty = totalQty;
                this.settled = settled;
                this.settledOn = settledOn;
                this.postedOn = postedOn;
                this.postedBy = postedBy;
                this.deliveryAddress = deliveryAddress;
                this.contactPerson = contactPerson;
                this.contactPhone = contactPhone;
                this.freightChargePcn = freightChargePcn;
                this.freightChargeAmt = freightChargeAmt;
                this.handlingChargePcn = handlingChargePcn;
                this.handlingChargeAmt = handlingChargeAmt;
                this.insuranceChargePcn = insuranceChargePcn;
                this.insuranceChargeAmt = insuranceChargeAmt;
                this.otherChargesPcn = otherChargesPcn;
                this.otherChargesAmt = otherChargesAmt;
                this.chargeCoefficient = chargeCoefficient;
                this.stockReceiveAllocated = stockReceiveAllocated;
                this.remarks1 = remarks1;
                this.remarks2 = remarks2;
                this.remarks3 = remarks3;
                this.tYPEDTL = tYPEDTL;
                this.requestedBy = requestedBy;
                this.eXPORTFLAG = eXPORTFLAG;
                this.status = status;
                this.createdOn = createdOn;
                this.createdBy = createdBy;
                this.modifiedOn = modifiedOn;
                this.modifiedBy = modifiedBy;
                this.retired = retired;
                this.retiredOn = retiredOn;
                this.retiredBy = retiredBy;
        }	
		
        /// <summary>
        /// Loads a PurchaseOrderHeader object from the database using the given OrderHeaderId
        /// </summary>
        /// <param name="orderHeaderId">The primary key value</param>
        /// <returns>A PurchaseOrderHeader object</returns>
        public static PurchaseOrderHeader Load(Guid orderHeaderId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@OrderHeaderId", orderHeaderId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spPurchaseOrderHeader_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    PurchaseOrderHeader result = new PurchaseOrderHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a PurchaseOrderHeader object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A PurchaseOrderHeader object</returns>
        public static PurchaseOrderHeader LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spPurchaseOrderHeader_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    PurchaseOrderHeader result = new PurchaseOrderHeader();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of PurchaseOrderHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderHeader objects in the database.</returns>
        public static PurchaseOrderHeaderCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spPurchaseOrderHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PurchaseOrderHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderHeader objects in the database ordered by the columns specified.</returns>
        public static PurchaseOrderHeaderCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spPurchaseOrderHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PurchaseOrderHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderHeader objects in the database.</returns>
        public static PurchaseOrderHeaderCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spPurchaseOrderHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PurchaseOrderHeader objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderHeader objects in the database ordered by the columns specified.</returns>
        public static PurchaseOrderHeaderCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spPurchaseOrderHeader_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PurchaseOrderHeader objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PurchaseOrderHeader objects in the database.</returns>
        public static PurchaseOrderHeaderCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            PurchaseOrderHeaderCollection result = new PurchaseOrderHeaderCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    PurchaseOrderHeader tmp = new PurchaseOrderHeader();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a PurchaseOrderHeader object from the database.
        /// </summary>
        /// <param name="orderHeaderId">The primary key value</param>
        public static void Delete(Guid orderHeaderId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@OrderHeaderId", orderHeaderId) };
            SqlHelper.Default.ExecuteNonQuery("spPurchaseOrderHeader_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) orderHeaderId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) orderNumber = reader.GetString(1);
                if (!reader.IsDBNull(2)) orderType = reader.GetInt32(2);
                if (!reader.IsDBNull(3)) workplaceId = reader.GetGuid(3);
                if (!reader.IsDBNull(4)) staffId = reader.GetGuid(4);
                if (!reader.IsDBNull(5)) supplierId = reader.GetGuid(5);
                if (!reader.IsDBNull(6)) currencyCode = reader.GetString(6);
                if (!reader.IsDBNull(7)) exchangeRate = reader.GetDecimal(7);
                if (!reader.IsDBNull(8)) termsId = reader.GetGuid(8);
                if (!reader.IsDBNull(9)) creditDays = reader.GetInt32(9);
                if (!reader.IsDBNull(10)) depositPercentage = reader.GetDecimal(10);
                if (!reader.IsDBNull(11)) paymentRemarks = reader.GetString(11);
                if (!reader.IsDBNull(12)) shipmentMethod = reader.GetString(12);
                if (!reader.IsDBNull(13)) shipmentRemarks = reader.GetString(13);
                if (!reader.IsDBNull(14)) partialShipment = reader.GetBoolean(14);
                if (!reader.IsDBNull(15)) orderOn = reader.GetDateTime(15);
                if (!reader.IsDBNull(16)) deliverOn = reader.GetDateTime(16);
                if (!reader.IsDBNull(17)) cancellationOn = reader.GetDateTime(17);
                if (!reader.IsDBNull(18)) groupDiscount1 = reader.GetDecimal(18);
                if (!reader.IsDBNull(19)) groupDiscount2 = reader.GetDecimal(19);
                if (!reader.IsDBNull(20)) groupDiscount3 = reader.GetDecimal(20);
                if (!reader.IsDBNull(21)) source = reader.GetString(21);
                if (!reader.IsDBNull(22)) totalCost = reader.GetDecimal(22);
                if (!reader.IsDBNull(23)) totalQty = reader.GetDecimal(23);
                if (!reader.IsDBNull(24)) settled = reader.GetBoolean(24);
                if (!reader.IsDBNull(25)) settledOn = reader.GetDateTime(25);
                if (!reader.IsDBNull(26)) postedOn = reader.GetDateTime(26);
                if (!reader.IsDBNull(27)) postedBy = reader.GetGuid(27);
                if (!reader.IsDBNull(28)) deliveryAddress = reader.GetString(28);
                if (!reader.IsDBNull(29)) contactPerson = reader.GetString(29);
                if (!reader.IsDBNull(30)) contactPhone = reader.GetString(30);
                if (!reader.IsDBNull(31)) freightChargePcn = reader.GetDecimal(31);
                if (!reader.IsDBNull(32)) freightChargeAmt = reader.GetDecimal(32);
                if (!reader.IsDBNull(33)) handlingChargePcn = reader.GetDecimal(33);
                if (!reader.IsDBNull(34)) handlingChargeAmt = reader.GetDecimal(34);
                if (!reader.IsDBNull(35)) insuranceChargePcn = reader.GetDecimal(35);
                if (!reader.IsDBNull(36)) insuranceChargeAmt = reader.GetDecimal(36);
                if (!reader.IsDBNull(37)) otherChargesPcn = reader.GetDecimal(37);
                if (!reader.IsDBNull(38)) otherChargesAmt = reader.GetDecimal(38);
                if (!reader.IsDBNull(39)) chargeCoefficient = reader.GetDecimal(39);
                if (!reader.IsDBNull(40)) stockReceiveAllocated = reader.GetBoolean(40);
                if (!reader.IsDBNull(41)) remarks1 = reader.GetString(41);
                if (!reader.IsDBNull(42)) remarks2 = reader.GetString(42);
                if (!reader.IsDBNull(43)) remarks3 = reader.GetString(43);
                if (!reader.IsDBNull(44)) tYPEDTL = reader.GetString(44);
                if (!reader.IsDBNull(45)) requestedBy = reader.GetGuid(45);
                if (!reader.IsDBNull(46)) eXPORTFLAG = reader.GetBoolean(46);
                if (!reader.IsDBNull(47)) status = reader.GetInt32(47);
                if (!reader.IsDBNull(48)) createdOn = reader.GetDateTime(48);
                if (!reader.IsDBNull(49)) createdBy = reader.GetGuid(49);
                if (!reader.IsDBNull(50)) modifiedOn = reader.GetDateTime(50);
                if (!reader.IsDBNull(51)) modifiedBy = reader.GetGuid(51);
                if (!reader.IsDBNull(52)) retired = reader.GetBoolean(52);
                if (!reader.IsDBNull(53)) retiredOn = reader.GetDateTime(53);
                if (!reader.IsDBNull(54)) retiredBy = reader.GetGuid(54);
            }
        }
		
        public void Delete()
        {
            Delete(this.OrderHeaderId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != OrderHeaderId)
                    this.Delete();
                Update();
            }
        }

        public Guid OrderHeaderId
        {
            get { return orderHeaderId; }
            set { orderHeaderId = value; }
        }

        public string OrderNumber
        {
            get { return orderNumber; }
            set { orderNumber = value; }
        }

        public int OrderType
        {
            get { return orderType; }
            set { orderType = value; }
        }

        public Guid WorkplaceId
        {
            get { return workplaceId; }
            set { workplaceId = value; }
        }

        public Guid StaffId
        {
            get { return staffId; }
            set { staffId = value; }
        }

        public Guid SupplierId
        {
            get { return supplierId; }
            set { supplierId = value; }
        }

        public string CurrencyCode
        {
            get { return currencyCode; }
            set { currencyCode = value; }
        }

        public decimal ExchangeRate
        {
            get { return exchangeRate; }
            set { exchangeRate = value; }
        }

        public Guid TermsId
        {
            get { return termsId; }
            set { termsId = value; }
        }

        public int CreditDays
        {
            get { return creditDays; }
            set { creditDays = value; }
        }

        public decimal DepositPercentage
        {
            get { return depositPercentage; }
            set { depositPercentage = value; }
        }

        public string PaymentRemarks
        {
            get { return paymentRemarks; }
            set { paymentRemarks = value; }
        }

        public string ShipmentMethod
        {
            get { return shipmentMethod; }
            set { shipmentMethod = value; }
        }

        public string ShipmentRemarks
        {
            get { return shipmentRemarks; }
            set { shipmentRemarks = value; }
        }

        public bool PartialShipment
        {
            get { return partialShipment; }
            set { partialShipment = value; }
        }

        public DateTime OrderOn
        {
            get { return orderOn; }
            set { orderOn = value; }
        }

        public DateTime DeliverOn
        {
            get { return deliverOn; }
            set { deliverOn = value; }
        }

        public DateTime CancellationOn
        {
            get { return cancellationOn; }
            set { cancellationOn = value; }
        }

        public decimal GroupDiscount1
        {
            get { return groupDiscount1; }
            set { groupDiscount1 = value; }
        }

        public decimal GroupDiscount2
        {
            get { return groupDiscount2; }
            set { groupDiscount2 = value; }
        }

        public decimal GroupDiscount3
        {
            get { return groupDiscount3; }
            set { groupDiscount3 = value; }
        }

        public string Source
        {
            get { return source; }
            set { source = value; }
        }

        public decimal TotalCost
        {
            get { return totalCost; }
            set { totalCost = value; }
        }

        public decimal TotalQty
        {
            get { return totalQty; }
            set { totalQty = value; }
        }

        public bool Settled
        {
            get { return settled; }
            set { settled = value; }
        }

        public DateTime SettledOn
        {
            get { return settledOn; }
            set { settledOn = value; }
        }

        public DateTime PostedOn
        {
            get { return postedOn; }
            set { postedOn = value; }
        }

        public Guid PostedBy
        {
            get { return postedBy; }
            set { postedBy = value; }
        }

        public string DeliveryAddress
        {
            get { return deliveryAddress; }
            set { deliveryAddress = value; }
        }

        public string ContactPerson
        {
            get { return contactPerson; }
            set { contactPerson = value; }
        }

        public string ContactPhone
        {
            get { return contactPhone; }
            set { contactPhone = value; }
        }

        public decimal FreightChargePcn
        {
            get { return freightChargePcn; }
            set { freightChargePcn = value; }
        }

        public decimal FreightChargeAmt
        {
            get { return freightChargeAmt; }
            set { freightChargeAmt = value; }
        }

        public decimal HandlingChargePcn
        {
            get { return handlingChargePcn; }
            set { handlingChargePcn = value; }
        }

        public decimal HandlingChargeAmt
        {
            get { return handlingChargeAmt; }
            set { handlingChargeAmt = value; }
        }

        public decimal InsuranceChargePcn
        {
            get { return insuranceChargePcn; }
            set { insuranceChargePcn = value; }
        }

        public decimal InsuranceChargeAmt
        {
            get { return insuranceChargeAmt; }
            set { insuranceChargeAmt = value; }
        }

        public decimal OtherChargesPcn
        {
            get { return otherChargesPcn; }
            set { otherChargesPcn = value; }
        }

        public decimal OtherChargesAmt
        {
            get { return otherChargesAmt; }
            set { otherChargesAmt = value; }
        }

        public decimal ChargeCoefficient
        {
            get { return chargeCoefficient; }
            set { chargeCoefficient = value; }
        }

        public bool StockReceiveAllocated
        {
            get { return stockReceiveAllocated; }
            set { stockReceiveAllocated = value; }
        }

        public string Remarks1
        {
            get { return remarks1; }
            set { remarks1 = value; }
        }

        public string Remarks2
        {
            get { return remarks2; }
            set { remarks2 = value; }
        }

        public string Remarks3
        {
            get { return remarks3; }
            set { remarks3 = value; }
        }

        public string TYPEDTL
        {
            get { return tYPEDTL; }
            set { tYPEDTL = value; }
        }

        public Guid RequestedBy
        {
            get { return requestedBy; }
            set { requestedBy = value; }
        }

        public bool EXPORTFLAG
        {
            get { return eXPORTFLAG; }
            set { eXPORTFLAG = value; }
        }

        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public DateTime CreatedOn
        {
            get { return createdOn; }
            set { createdOn = value; }
        }

        public Guid CreatedBy
        {
            get { return createdBy; }
            set { createdBy = value; }
        }

        public DateTime ModifiedOn
        {
            get { return modifiedOn; }
            set { modifiedOn = value; }
        }

        public Guid ModifiedBy
        {
            get { return modifiedBy; }
            set { modifiedBy = value; }
        }

        public bool Retired
        {
            get { return retired; }
            set { retired = value; }
        }

        public DateTime RetiredOn
        {
            get { return retiredOn; }
            set { retiredOn = value; }
        }

        public Guid RetiredBy
        {
            get { return retiredBy; }
            set { retiredBy = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spPurchaseOrderHeader_InsRec", "@OrderHeaderId", out returnedValue, parameterValues);
            
            orderHeaderId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spPurchaseOrderHeader_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[55];
            prams[0] = GetSqlParameter("@OrderHeaderId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.OrderHeaderId);
            prams[1] = GetSqlParameter("@OrderNumber", ParameterDirection.Input, SqlDbType.NVarChar, 12, this.OrderNumber);
            prams[2] = GetSqlParameter("@OrderType", ParameterDirection.Input, SqlDbType.Int, 4, this.OrderType);
            prams[3] = GetSqlParameter("@WorkplaceId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.WorkplaceId);
            prams[4] = GetSqlParameter("@StaffId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.StaffId);
            prams[5] = GetSqlParameter("@SupplierId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.SupplierId);
            prams[6] = GetSqlParameter("@CurrencyCode", ParameterDirection.Input, SqlDbType.VarChar, 3, this.CurrencyCode);
            prams[7] = GetSqlParameter("@ExchangeRate", ParameterDirection.Input, SqlDbType.Decimal, 5, this.ExchangeRate);
            prams[8] = GetSqlParameter("@TermsId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.TermsId);
            prams[9] = GetSqlParameter("@CreditDays", ParameterDirection.Input, SqlDbType.Int, 4, this.CreditDays);
            prams[10] = GetSqlParameter("@DepositPercentage", ParameterDirection.Input, SqlDbType.Decimal, 5, this.DepositPercentage);
            prams[11] = GetSqlParameter("@PaymentRemarks", ParameterDirection.Input, SqlDbType.NVarChar, 20, this.PaymentRemarks);
            prams[12] = GetSqlParameter("@ShipmentMethod", ParameterDirection.Input, SqlDbType.NVarChar, 10, this.ShipmentMethod);
            prams[13] = GetSqlParameter("@ShipmentRemarks", ParameterDirection.Input, SqlDbType.NVarChar, 20, this.ShipmentRemarks);
            prams[14] = GetSqlParameter("@PartialShipment", ParameterDirection.Input, SqlDbType.Bit, 1, this.PartialShipment);
            prams[15] = GetSqlParameter("@OrderOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.OrderOn);
            prams[16] = GetSqlParameter("@DeliverOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.DeliverOn);
            prams[17] = GetSqlParameter("@CancellationOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CancellationOn);
            prams[18] = GetSqlParameter("@GroupDiscount1", ParameterDirection.Input, SqlDbType.Decimal, 5, this.GroupDiscount1);
            prams[19] = GetSqlParameter("@GroupDiscount2", ParameterDirection.Input, SqlDbType.Decimal, 5, this.GroupDiscount2);
            prams[20] = GetSqlParameter("@GroupDiscount3", ParameterDirection.Input, SqlDbType.Decimal, 5, this.GroupDiscount3);
            prams[21] = GetSqlParameter("@Source", ParameterDirection.Input, SqlDbType.VarChar, 4, this.Source);
            prams[22] = GetSqlParameter("@TotalCost", ParameterDirection.Input, SqlDbType.Money, 8, this.TotalCost);
            prams[23] = GetSqlParameter("@TotalQty", ParameterDirection.Input, SqlDbType.Decimal, 9, this.TotalQty);
            prams[24] = GetSqlParameter("@Settled", ParameterDirection.Input, SqlDbType.Bit, 1, this.Settled);
            prams[25] = GetSqlParameter("@SettledOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.SettledOn);
            prams[26] = GetSqlParameter("@PostedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.PostedOn);
            prams[27] = GetSqlParameter("@PostedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.PostedBy);
            prams[28] = GetSqlParameter("@DeliveryAddress", ParameterDirection.Input, SqlDbType.NVarChar, 512, this.DeliveryAddress);
            prams[29] = GetSqlParameter("@ContactPerson", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.ContactPerson);
            prams[30] = GetSqlParameter("@ContactPhone", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.ContactPhone);
            prams[31] = GetSqlParameter("@FreightChargePcn", ParameterDirection.Input, SqlDbType.Decimal, 5, this.FreightChargePcn);
            prams[32] = GetSqlParameter("@FreightChargeAmt", ParameterDirection.Input, SqlDbType.Money, 8, this.FreightChargeAmt);
            prams[33] = GetSqlParameter("@HandlingChargePcn", ParameterDirection.Input, SqlDbType.Decimal, 5, this.HandlingChargePcn);
            prams[34] = GetSqlParameter("@HandlingChargeAmt", ParameterDirection.Input, SqlDbType.Money, 8, this.HandlingChargeAmt);
            prams[35] = GetSqlParameter("@InsuranceChargePcn", ParameterDirection.Input, SqlDbType.Decimal, 5, this.InsuranceChargePcn);
            prams[36] = GetSqlParameter("@InsuranceChargeAmt", ParameterDirection.Input, SqlDbType.Money, 8, this.InsuranceChargeAmt);
            prams[37] = GetSqlParameter("@OtherChargesPcn", ParameterDirection.Input, SqlDbType.Decimal, 5, this.OtherChargesPcn);
            prams[38] = GetSqlParameter("@OtherChargesAmt", ParameterDirection.Input, SqlDbType.Money, 8, this.OtherChargesAmt);
            prams[39] = GetSqlParameter("@ChargeCoefficient", ParameterDirection.Input, SqlDbType.Decimal, 9, this.ChargeCoefficient);
            prams[40] = GetSqlParameter("@StockReceiveAllocated", ParameterDirection.Input, SqlDbType.Bit, 1, this.StockReceiveAllocated);
            prams[41] = GetSqlParameter("@Remarks1", ParameterDirection.Input, SqlDbType.NVarChar, 20, this.Remarks1);
            prams[42] = GetSqlParameter("@Remarks2", ParameterDirection.Input, SqlDbType.NVarChar, 20, this.Remarks2);
            prams[43] = GetSqlParameter("@Remarks3", ParameterDirection.Input, SqlDbType.NText, 16, this.Remarks3);
            prams[44] = GetSqlParameter("@TYPEDTL", ParameterDirection.Input, SqlDbType.VarChar, 10, this.TYPEDTL);
            prams[45] = GetSqlParameter("@RequestedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.RequestedBy);
            prams[46] = GetSqlParameter("@EXPORTFLAG", ParameterDirection.Input, SqlDbType.Bit, 1, this.EXPORTFLAG);
            prams[47] = GetSqlParameter("@Status", ParameterDirection.Input, SqlDbType.Int, 4, this.Status);
            prams[48] = GetSqlParameter("@CreatedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.CreatedOn);
            prams[49] = GetSqlParameter("@CreatedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.CreatedBy);
            prams[50] = GetSqlParameter("@ModifiedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.ModifiedOn);
            prams[51] = GetSqlParameter("@ModifiedBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ModifiedBy);
            prams[52] = GetSqlParameter("@Retired", ParameterDirection.Input, SqlDbType.Bit, 1, this.Retired);
            prams[53] = GetSqlParameter("@RetiredOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.RetiredOn);
            prams[54] = GetSqlParameter("@RetiredBy", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.RetiredBy);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@OrderHeaderId", SqlDbType.UniqueIdentifier, 16, this.OrderHeaderId),
                GetSqlParameterWithoutDirection("@OrderNumber", SqlDbType.NVarChar, 12, this.OrderNumber),
                GetSqlParameterWithoutDirection("@OrderType", SqlDbType.Int, 4, this.OrderType),
                GetSqlParameterWithoutDirection("@WorkplaceId", SqlDbType.UniqueIdentifier, 16, this.WorkplaceId),
                GetSqlParameterWithoutDirection("@StaffId", SqlDbType.UniqueIdentifier, 16, this.StaffId),
                GetSqlParameterWithoutDirection("@SupplierId", SqlDbType.UniqueIdentifier, 16, this.SupplierId),
                GetSqlParameterWithoutDirection("@CurrencyCode", SqlDbType.VarChar, 3, this.CurrencyCode),
                GetSqlParameterWithoutDirection("@ExchangeRate", SqlDbType.Decimal, 5, this.ExchangeRate),
                GetSqlParameterWithoutDirection("@TermsId", SqlDbType.UniqueIdentifier, 16, this.TermsId),
                GetSqlParameterWithoutDirection("@CreditDays", SqlDbType.Int, 4, this.CreditDays),
                GetSqlParameterWithoutDirection("@DepositPercentage", SqlDbType.Decimal, 5, this.DepositPercentage),
                GetSqlParameterWithoutDirection("@PaymentRemarks", SqlDbType.NVarChar, 20, this.PaymentRemarks),
                GetSqlParameterWithoutDirection("@ShipmentMethod", SqlDbType.NVarChar, 10, this.ShipmentMethod),
                GetSqlParameterWithoutDirection("@ShipmentRemarks", SqlDbType.NVarChar, 20, this.ShipmentRemarks),
                GetSqlParameterWithoutDirection("@PartialShipment", SqlDbType.Bit, 1, this.PartialShipment),
                GetSqlParameterWithoutDirection("@OrderOn", SqlDbType.DateTime, 8, this.OrderOn),
                GetSqlParameterWithoutDirection("@DeliverOn", SqlDbType.DateTime, 8, this.DeliverOn),
                GetSqlParameterWithoutDirection("@CancellationOn", SqlDbType.DateTime, 8, this.CancellationOn),
                GetSqlParameterWithoutDirection("@GroupDiscount1", SqlDbType.Decimal, 5, this.GroupDiscount1),
                GetSqlParameterWithoutDirection("@GroupDiscount2", SqlDbType.Decimal, 5, this.GroupDiscount2),
                GetSqlParameterWithoutDirection("@GroupDiscount3", SqlDbType.Decimal, 5, this.GroupDiscount3),
                GetSqlParameterWithoutDirection("@Source", SqlDbType.VarChar, 4, this.Source),
                GetSqlParameterWithoutDirection("@TotalCost", SqlDbType.Money, 8, this.TotalCost),
                GetSqlParameterWithoutDirection("@TotalQty", SqlDbType.Decimal, 9, this.TotalQty),
                GetSqlParameterWithoutDirection("@Settled", SqlDbType.Bit, 1, this.Settled),
                GetSqlParameterWithoutDirection("@SettledOn", SqlDbType.DateTime, 8, this.SettledOn),
                GetSqlParameterWithoutDirection("@PostedOn", SqlDbType.DateTime, 8, this.PostedOn),
                GetSqlParameterWithoutDirection("@PostedBy", SqlDbType.UniqueIdentifier, 16, this.PostedBy),
                GetSqlParameterWithoutDirection("@DeliveryAddress", SqlDbType.NVarChar, 512, this.DeliveryAddress),
                GetSqlParameterWithoutDirection("@ContactPerson", SqlDbType.NVarChar, 64, this.ContactPerson),
                GetSqlParameterWithoutDirection("@ContactPhone", SqlDbType.NVarChar, 64, this.ContactPhone),
                GetSqlParameterWithoutDirection("@FreightChargePcn", SqlDbType.Decimal, 5, this.FreightChargePcn),
                GetSqlParameterWithoutDirection("@FreightChargeAmt", SqlDbType.Money, 8, this.FreightChargeAmt),
                GetSqlParameterWithoutDirection("@HandlingChargePcn", SqlDbType.Decimal, 5, this.HandlingChargePcn),
                GetSqlParameterWithoutDirection("@HandlingChargeAmt", SqlDbType.Money, 8, this.HandlingChargeAmt),
                GetSqlParameterWithoutDirection("@InsuranceChargePcn", SqlDbType.Decimal, 5, this.InsuranceChargePcn),
                GetSqlParameterWithoutDirection("@InsuranceChargeAmt", SqlDbType.Money, 8, this.InsuranceChargeAmt),
                GetSqlParameterWithoutDirection("@OtherChargesPcn", SqlDbType.Decimal, 5, this.OtherChargesPcn),
                GetSqlParameterWithoutDirection("@OtherChargesAmt", SqlDbType.Money, 8, this.OtherChargesAmt),
                GetSqlParameterWithoutDirection("@ChargeCoefficient", SqlDbType.Decimal, 9, this.ChargeCoefficient),
                GetSqlParameterWithoutDirection("@StockReceiveAllocated", SqlDbType.Bit, 1, this.StockReceiveAllocated),
                GetSqlParameterWithoutDirection("@Remarks1", SqlDbType.NVarChar, 20, this.Remarks1),
                GetSqlParameterWithoutDirection("@Remarks2", SqlDbType.NVarChar, 20, this.Remarks2),
                GetSqlParameterWithoutDirection("@Remarks3", SqlDbType.NText, 16, this.Remarks3),
                GetSqlParameterWithoutDirection("@TYPEDTL", SqlDbType.VarChar, 10, this.TYPEDTL),
                GetSqlParameterWithoutDirection("@RequestedBy", SqlDbType.UniqueIdentifier, 16, this.RequestedBy),
                GetSqlParameterWithoutDirection("@EXPORTFLAG", SqlDbType.Bit, 1, this.EXPORTFLAG),
                GetSqlParameterWithoutDirection("@Status", SqlDbType.Int, 4, this.Status),
                GetSqlParameterWithoutDirection("@CreatedOn", SqlDbType.DateTime, 8, this.CreatedOn),
                GetSqlParameterWithoutDirection("@CreatedBy", SqlDbType.UniqueIdentifier, 16, this.CreatedBy),
                GetSqlParameterWithoutDirection("@ModifiedOn", SqlDbType.DateTime, 8, this.ModifiedOn),
                GetSqlParameterWithoutDirection("@ModifiedBy", SqlDbType.UniqueIdentifier, 16, this.ModifiedBy),
                GetSqlParameterWithoutDirection("@Retired", SqlDbType.Bit, 1, this.Retired),
                GetSqlParameterWithoutDirection("@RetiredOn", SqlDbType.DateTime, 8, this.RetiredOn),
                GetSqlParameterWithoutDirection("@RetiredBy", SqlDbType.UniqueIdentifier, 16, this.RetiredBy)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("orderHeaderId: " + orderHeaderId.ToString()).Append("\r\n");
            builder.Append("orderNumber: " + orderNumber.ToString()).Append("\r\n");
            builder.Append("orderType: " + orderType.ToString()).Append("\r\n");
            builder.Append("workplaceId: " + workplaceId.ToString()).Append("\r\n");
            builder.Append("staffId: " + staffId.ToString()).Append("\r\n");
            builder.Append("supplierId: " + supplierId.ToString()).Append("\r\n");
            builder.Append("currencyCode: " + currencyCode.ToString()).Append("\r\n");
            builder.Append("exchangeRate: " + exchangeRate.ToString()).Append("\r\n");
            builder.Append("termsId: " + termsId.ToString()).Append("\r\n");
            builder.Append("creditDays: " + creditDays.ToString()).Append("\r\n");
            builder.Append("depositPercentage: " + depositPercentage.ToString()).Append("\r\n");
            builder.Append("paymentRemarks: " + paymentRemarks.ToString()).Append("\r\n");
            builder.Append("shipmentMethod: " + shipmentMethod.ToString()).Append("\r\n");
            builder.Append("shipmentRemarks: " + shipmentRemarks.ToString()).Append("\r\n");
            builder.Append("partialShipment: " + partialShipment.ToString()).Append("\r\n");
            builder.Append("orderOn: " + orderOn.ToString()).Append("\r\n");
            builder.Append("deliverOn: " + deliverOn.ToString()).Append("\r\n");
            builder.Append("cancellationOn: " + cancellationOn.ToString()).Append("\r\n");
            builder.Append("groupDiscount1: " + groupDiscount1.ToString()).Append("\r\n");
            builder.Append("groupDiscount2: " + groupDiscount2.ToString()).Append("\r\n");
            builder.Append("groupDiscount3: " + groupDiscount3.ToString()).Append("\r\n");
            builder.Append("source: " + source.ToString()).Append("\r\n");
            builder.Append("totalCost: " + totalCost.ToString()).Append("\r\n");
            builder.Append("totalQty: " + totalQty.ToString()).Append("\r\n");
            builder.Append("settled: " + settled.ToString()).Append("\r\n");
            builder.Append("settledOn: " + settledOn.ToString()).Append("\r\n");
            builder.Append("postedOn: " + postedOn.ToString()).Append("\r\n");
            builder.Append("postedBy: " + postedBy.ToString()).Append("\r\n");
            builder.Append("deliveryAddress: " + deliveryAddress.ToString()).Append("\r\n");
            builder.Append("contactPerson: " + contactPerson.ToString()).Append("\r\n");
            builder.Append("contactPhone: " + contactPhone.ToString()).Append("\r\n");
            builder.Append("freightChargePcn: " + freightChargePcn.ToString()).Append("\r\n");
            builder.Append("freightChargeAmt: " + freightChargeAmt.ToString()).Append("\r\n");
            builder.Append("handlingChargePcn: " + handlingChargePcn.ToString()).Append("\r\n");
            builder.Append("handlingChargeAmt: " + handlingChargeAmt.ToString()).Append("\r\n");
            builder.Append("insuranceChargePcn: " + insuranceChargePcn.ToString()).Append("\r\n");
            builder.Append("insuranceChargeAmt: " + insuranceChargeAmt.ToString()).Append("\r\n");
            builder.Append("otherChargesPcn: " + otherChargesPcn.ToString()).Append("\r\n");
            builder.Append("otherChargesAmt: " + otherChargesAmt.ToString()).Append("\r\n");
            builder.Append("chargeCoefficient: " + chargeCoefficient.ToString()).Append("\r\n");
            builder.Append("stockReceiveAllocated: " + stockReceiveAllocated.ToString()).Append("\r\n");
            builder.Append("remarks1: " + remarks1.ToString()).Append("\r\n");
            builder.Append("remarks2: " + remarks2.ToString()).Append("\r\n");
            builder.Append("remarks3: " + remarks3.ToString()).Append("\r\n");
            builder.Append("tYPEDTL: " + tYPEDTL.ToString()).Append("\r\n");
            builder.Append("requestedBy: " + requestedBy.ToString()).Append("\r\n");
            builder.Append("eXPORTFLAG: " + eXPORTFLAG.ToString()).Append("\r\n");
            builder.Append("status: " + status.ToString()).Append("\r\n");
            builder.Append("createdOn: " + createdOn.ToString()).Append("\r\n");
            builder.Append("createdBy: " + createdBy.ToString()).Append("\r\n");
            builder.Append("modifiedOn: " + modifiedOn.ToString()).Append("\r\n");
            builder.Append("modifiedBy: " + modifiedBy.ToString()).Append("\r\n");
            builder.Append("retired: " + retired.ToString()).Append("\r\n");
            builder.Append("retiredOn: " + retiredOn.ToString()).Append("\r\n");
            builder.Append("retiredBy: " + retiredBy.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			PurchaseOrderHeaderCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			// Filter the retired records
			if (WhereClause.Length > 0)
			{
				WhereClause += " AND Retired = 0";
			}
			else
			{
				WhereClause = "Retired = 0";
			}
			
			if (WhereClause.Length > 0)
			{
				source = PurchaseOrderHeader.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = PurchaseOrderHeader.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (PurchaseOrderHeader item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.WorkplaceId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.OrderHeaderId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(PurchaseOrderHeader target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.WorkplaceId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				PurchaseOrderHeader parentTemplate = PurchaseOrderHeader.Load(target.WorkplaceId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(PurchaseOrderHeader target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="PurchaseOrderHeader">PurchaseOrderHeader</see> objects.
    /// </summary>
    public class PurchaseOrderHeaderCollection : BindingList< PurchaseOrderHeader>
    {
	}
}
