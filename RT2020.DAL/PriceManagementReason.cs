using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.PriceManagementReason.
    /// Date Created:   2020-08-09 02:14:13
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class PriceManagementReason
    {
        private Guid key = Guid.Empty;
        private Guid reasonId = Guid.Empty;
        private string reasonCode = String.Empty;
        private string reasonName = String.Empty;
        private string reasonName_Chs = String.Empty;
        private string reasonName_Cht = String.Empty;

        /// <summary>
        /// Initialize an new empty PriceManagementReason object.
        /// </summary>
        public PriceManagementReason()
        {
        }
		
        /// <summary>
        /// Initialize a new PriceManagementReason object with the given parameters.
        /// </summary>
        public PriceManagementReason(Guid reasonId, string reasonCode, string reasonName, string reasonName_Chs, string reasonName_Cht)
        {
                this.reasonId = reasonId;
                this.reasonCode = reasonCode;
                this.reasonName = reasonName;
                this.reasonName_Chs = reasonName_Chs;
                this.reasonName_Cht = reasonName_Cht;
        }	
		
        /// <summary>
        /// Loads a PriceManagementReason object from the database using the given ReasonId
        /// </summary>
        /// <param name="reasonId">The primary key value</param>
        /// <returns>A PriceManagementReason object</returns>
        public static PriceManagementReason Load(Guid reasonId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ReasonId", reasonId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spPriceManagementReason_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    PriceManagementReason result = new PriceManagementReason();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a PriceManagementReason object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A PriceManagementReason object</returns>
        public static PriceManagementReason LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spPriceManagementReason_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    PriceManagementReason result = new PriceManagementReason();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of PriceManagementReason objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PriceManagementReason objects in the database.</returns>
        public static PriceManagementReasonCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spPriceManagementReason_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PriceManagementReason objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the PriceManagementReason objects in the database ordered by the columns specified.</returns>
        public static PriceManagementReasonCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spPriceManagementReason_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PriceManagementReason objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PriceManagementReason objects in the database.</returns>
        public static PriceManagementReasonCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spPriceManagementReason_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PriceManagementReason objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the PriceManagementReason objects in the database ordered by the columns specified.</returns>
        public static PriceManagementReasonCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spPriceManagementReason_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of PriceManagementReason objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the PriceManagementReason objects in the database.</returns>
        public static PriceManagementReasonCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            PriceManagementReasonCollection result = new PriceManagementReasonCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    PriceManagementReason tmp = new PriceManagementReason();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a PriceManagementReason object from the database.
        /// </summary>
        /// <param name="reasonId">The primary key value</param>
        public static void Delete(Guid reasonId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@ReasonId", reasonId) };
            SqlHelper.Default.ExecuteNonQuery("spPriceManagementReason_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) reasonId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) reasonCode = reader.GetString(1);
                if (!reader.IsDBNull(2)) reasonName = reader.GetString(2);
                if (!reader.IsDBNull(3)) reasonName_Chs = reader.GetString(3);
                if (!reader.IsDBNull(4)) reasonName_Cht = reader.GetString(4);
            }
        }
		
        public void Delete()
        {
            Delete(this.ReasonId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != ReasonId)
                    this.Delete();
                Update();
            }
        }

        public Guid ReasonId
        {
            get { return reasonId; }
            set { reasonId = value; }
        }

        public string ReasonCode
        {
            get { return reasonCode; }
            set { reasonCode = value; }
        }

        public string ReasonName
        {
            get { return reasonName; }
            set { reasonName = value; }
        }

        public string ReasonName_Chs
        {
            get { return reasonName_Chs; }
            set { reasonName_Chs = value; }
        }

        public string ReasonName_Cht
        {
            get { return reasonName_Cht; }
            set { reasonName_Cht = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spPriceManagementReason_InsRec", "@ReasonId", out returnedValue, parameterValues);
            
            reasonId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spPriceManagementReason_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[5];
            prams[0] = GetSqlParameter("@ReasonId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.ReasonId);
            prams[1] = GetSqlParameter("@ReasonCode", ParameterDirection.Input, SqlDbType.NVarChar, 3, this.ReasonCode);
            prams[2] = GetSqlParameter("@ReasonName", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.ReasonName);
            prams[3] = GetSqlParameter("@ReasonName_Chs", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.ReasonName_Chs);
            prams[4] = GetSqlParameter("@ReasonName_Cht", ParameterDirection.Input, SqlDbType.NVarChar, 64, this.ReasonName_Cht);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@ReasonId", SqlDbType.UniqueIdentifier, 16, this.ReasonId),
                GetSqlParameterWithoutDirection("@ReasonCode", SqlDbType.NVarChar, 3, this.ReasonCode),
                GetSqlParameterWithoutDirection("@ReasonName", SqlDbType.NVarChar, 64, this.ReasonName),
                GetSqlParameterWithoutDirection("@ReasonName_Chs", SqlDbType.NVarChar, 64, this.ReasonName_Chs),
                GetSqlParameterWithoutDirection("@ReasonName_Cht", SqlDbType.NVarChar, 64, this.ReasonName_Cht)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("reasonId: " + reasonId.ToString()).Append("\r\n");
            builder.Append("reasonCode: " + reasonCode.ToString()).Append("\r\n");
            builder.Append("reasonName: " + reasonName.ToString()).Append("\r\n");
            builder.Append("reasonName_Chs: " + reasonName_Chs.ToString()).Append("\r\n");
            builder.Append("reasonName_Cht: " + reasonName_Cht.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			PriceManagementReasonCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = PriceManagementReason.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = PriceManagementReason.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (PriceManagementReason item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = IgnorThis(item, ParentFilter);
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.ReasonId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(PriceManagementReason target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
			string filterField = (string)pi.GetValue(target, null);
			if (filterField.ToLower() == parsed[1].ToLower())
			{
				result = false;
			}
			return result;
		}

		private static string GetFormatedText(PriceManagementReason target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="PriceManagementReason">PriceManagementReason</see> objects.
    /// </summary>
    public class PriceManagementReasonCollection : BindingList< PriceManagementReason>
    {
	}
}
