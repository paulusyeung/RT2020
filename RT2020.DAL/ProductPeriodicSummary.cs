using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Text;
using Gizmox.WebGUI.Forms;
using System.Xml;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace RT2020.DAL
{
    /// <summary>
    /// This Data Access Layer Component (DALC) provides access to the data contained in the data table dbo.ProductPeriodicSummary.
    /// Date Created:   2020-08-09 02:14:14
    /// Created By:     Generated by CodeSmith version 7.0.0.15123
    /// Template:       BusinessObjects_v5.0.cst
    /// </summary>
    public class ProductPeriodicSummary
    {
        private Guid key = Guid.Empty;
        private Guid periodicSummaryId = Guid.Empty;
        private Guid productId = Guid.Empty;
        private int fiscalYear = 0;
        private int period = 0;
        private DateTime periodStartedOn = DateTime.Parse("1900-1-1");
        private DateTime periodEndedOn = DateTime.Parse("1900-1-1");
        private decimal bFQTY;
        private decimal bFAMT;
        private decimal cDQTY;
        private decimal averageCost;
        private decimal lastCost;
        private DateTime lastPurchasedOn = DateTime.Parse("1900-1-1");
        private decimal lastPurchasedQty;
        private DateTime lastSoldOn = DateTime.Parse("1900-1-1");
        private decimal lastSoldQty;

        /// <summary>
        /// Initialize an new empty ProductPeriodicSummary object.
        /// </summary>
        public ProductPeriodicSummary()
        {
        }
		
        /// <summary>
        /// Initialize a new ProductPeriodicSummary object with the given parameters.
        /// </summary>
        public ProductPeriodicSummary(Guid periodicSummaryId, Guid productId, int fiscalYear, int period, DateTime periodStartedOn, DateTime periodEndedOn, decimal bFQTY, decimal bFAMT, decimal cDQTY, decimal averageCost, decimal lastCost, DateTime lastPurchasedOn, decimal lastPurchasedQty, DateTime lastSoldOn, decimal lastSoldQty)
        {
                this.periodicSummaryId = periodicSummaryId;
                this.productId = productId;
                this.fiscalYear = fiscalYear;
                this.period = period;
                this.periodStartedOn = periodStartedOn;
                this.periodEndedOn = periodEndedOn;
                this.bFQTY = bFQTY;
                this.bFAMT = bFAMT;
                this.cDQTY = cDQTY;
                this.averageCost = averageCost;
                this.lastCost = lastCost;
                this.lastPurchasedOn = lastPurchasedOn;
                this.lastPurchasedQty = lastPurchasedQty;
                this.lastSoldOn = lastSoldOn;
                this.lastSoldQty = lastSoldQty;
        }	
		
        /// <summary>
        /// Loads a ProductPeriodicSummary object from the database using the given PeriodicSummaryId
        /// </summary>
        /// <param name="periodicSummaryId">The primary key value</param>
        /// <returns>A ProductPeriodicSummary object</returns>
        public static ProductPeriodicSummary Load(Guid periodicSummaryId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@PeriodicSummaryId", periodicSummaryId) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spProductPeriodicSummary_SelRec", parameterValues))
            {
                if (reader.Read())
                {
                    ProductPeriodicSummary result = new ProductPeriodicSummary();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }

        /// <summary>
        /// Loads a ProductPeriodicSummary object from the database using the given where clause
        /// </summary>
        /// <param name="whereClause">The filter expression for the query</param>
        /// <returns>A ProductPeriodicSummary object</returns>
        public static ProductPeriodicSummary LoadWhere(string whereClause)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader("spProductPeriodicSummary_SelAll", parameterValues))
            {
                if (reader.Read())
                {
                    ProductPeriodicSummary result = new ProductPeriodicSummary();
                    result.LoadFromReader(reader);
                    return result;
                }
                else
                    return null;
            }
        }
		
        /// <summary>
        /// Loads a collection of ProductPeriodicSummary objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the ProductPeriodicSummary objects in the database.</returns>
        public static ProductPeriodicSummaryCollection LoadCollection()
        {
            SqlParameter[] parms = new SqlParameter[] {};
            return LoadCollection("spProductPeriodicSummary_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ProductPeriodicSummary objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the ProductPeriodicSummary objects in the database ordered by the columns specified.</returns>
        public static ProductPeriodicSummaryCollection LoadCollection(string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spProductPeriodicSummary_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ProductPeriodicSummary objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the ProductPeriodicSummary objects in the database.</returns>
        public static ProductPeriodicSummaryCollection LoadCollection(string whereClause)
        {
            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause) };
            return LoadCollection("spProductPeriodicSummary_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ProductPeriodicSummary objects from the database ordered by the columns specified.
        /// </summary>
        /// <returns>A collection containing all of the ProductPeriodicSummary objects in the database ordered by the columns specified.</returns>
        public static ProductPeriodicSummaryCollection LoadCollection(string whereClause, string[] orderByColumns, bool ascending)
        {
            StringBuilder orderClause = new StringBuilder();
            for (int i = 0; i < orderByColumns.Length; i++)
            {
                orderClause.Append(orderByColumns[i]);

                if (i != orderByColumns.Length-1)
                    orderClause.Append(", ");
            }

            if (ascending)
                orderClause.Append(" ASC");
            else
                orderClause.Append(" DESC");

            SqlParameter[] parms = new SqlParameter[] { new SqlParameter("@WhereClause", whereClause), new SqlParameter("@OrderBy", orderClause.ToString()) };
            return LoadCollection("spProductPeriodicSummary_SelAll", parms);
        }

        /// <summary>
        /// Loads a collection of ProductPeriodicSummary objects from the database.
        /// </summary>
        /// <returns>A collection containing all of the ProductPeriodicSummary objects in the database.</returns>
        public static ProductPeriodicSummaryCollection LoadCollection(string spName, SqlParameter[] parms)
        {
            ProductPeriodicSummaryCollection result = new ProductPeriodicSummaryCollection();
            using (SqlDataReader reader = SqlHelper.Default.ExecuteReader(spName, parms))
            {
                while (reader.Read())
                {
                    ProductPeriodicSummary tmp = new ProductPeriodicSummary();
                    tmp.LoadFromReader(reader);
                    result.Add(tmp);
                }
            }
            return result;
        }

        /// <summary>
        /// Deletes a ProductPeriodicSummary object from the database.
        /// </summary>
        /// <param name="periodicSummaryId">The primary key value</param>
        public static void Delete(Guid periodicSummaryId)
        {
            SqlParameter[] parameterValues = new SqlParameter[] { new SqlParameter("@PeriodicSummaryId", periodicSummaryId) };
            SqlHelper.Default.ExecuteNonQuery("spProductPeriodicSummary_DelRec", parameterValues);
        }

		
        public void LoadFromReader(SqlDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                key = reader.GetGuid(0);
                if (!reader.IsDBNull(0)) periodicSummaryId = reader.GetGuid(0);
                if (!reader.IsDBNull(1)) productId = reader.GetGuid(1);
                if (!reader.IsDBNull(2)) fiscalYear = reader.GetInt32(2);
                if (!reader.IsDBNull(3)) period = reader.GetInt32(3);
                if (!reader.IsDBNull(4)) periodStartedOn = reader.GetDateTime(4);
                if (!reader.IsDBNull(5)) periodEndedOn = reader.GetDateTime(5);
                if (!reader.IsDBNull(6)) bFQTY = reader.GetDecimal(6);
                if (!reader.IsDBNull(7)) bFAMT = reader.GetDecimal(7);
                if (!reader.IsDBNull(8)) cDQTY = reader.GetDecimal(8);
                if (!reader.IsDBNull(9)) averageCost = reader.GetDecimal(9);
                if (!reader.IsDBNull(10)) lastCost = reader.GetDecimal(10);
                if (!reader.IsDBNull(11)) lastPurchasedOn = reader.GetDateTime(11);
                if (!reader.IsDBNull(12)) lastPurchasedQty = reader.GetDecimal(12);
                if (!reader.IsDBNull(13)) lastSoldOn = reader.GetDateTime(13);
                if (!reader.IsDBNull(14)) lastSoldQty = reader.GetDecimal(14);
            }
        }
		
        public void Delete()
        {
            Delete(this.PeriodicSummaryId);
        }

        public void Save()
        {
            //  We use the key field which will have its default value unless it is set by Load(). When we save we can know if
            //  we need to do an insert (key == null) an update (key == primaryKey) or a 
            //  delete+update (key != null && key != primaryKey)

            if (key == Guid.Empty)
                Insert();
            else
            {
                if (key != PeriodicSummaryId)
                    this.Delete();
                Update();
            }
        }

        public Guid PeriodicSummaryId
        {
            get { return periodicSummaryId; }
            set { periodicSummaryId = value; }
        }

        public Guid ProductId
        {
            get { return productId; }
            set { productId = value; }
        }

        public int FiscalYear
        {
            get { return fiscalYear; }
            set { fiscalYear = value; }
        }

        public int Period
        {
            get { return period; }
            set { period = value; }
        }

        public DateTime PeriodStartedOn
        {
            get { return periodStartedOn; }
            set { periodStartedOn = value; }
        }

        public DateTime PeriodEndedOn
        {
            get { return periodEndedOn; }
            set { periodEndedOn = value; }
        }

        public decimal BFQTY
        {
            get { return bFQTY; }
            set { bFQTY = value; }
        }

        public decimal BFAMT
        {
            get { return bFAMT; }
            set { bFAMT = value; }
        }

        public decimal CDQTY
        {
            get { return cDQTY; }
            set { cDQTY = value; }
        }

        public decimal AverageCost
        {
            get { return averageCost; }
            set { averageCost = value; }
        }

        public decimal LastCost
        {
            get { return lastCost; }
            set { lastCost = value; }
        }

        public DateTime LastPurchasedOn
        {
            get { return lastPurchasedOn; }
            set { lastPurchasedOn = value; }
        }

        public decimal LastPurchasedQty
        {
            get { return lastPurchasedQty; }
            set { lastPurchasedQty = value; }
        }

        public DateTime LastSoldOn
        {
            get { return lastSoldOn; }
            set { lastSoldOn = value; }
        }

        public decimal LastSoldQty
        {
            get { return lastSoldQty; }
            set { lastSoldQty = value; }
        }


        private void Insert()
        {
            SqlParameter[] parameterValues = GetInsertParameterValues();
            object returnedValue = null;
			
            SqlHelper.Default.ExecuteNonQuery("spProductPeriodicSummary_InsRec", "@PeriodicSummaryId", out returnedValue, parameterValues);
            
            periodicSummaryId = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
            key = returnedValue != null ? (Guid)returnedValue : Guid.Empty;
        }

        private void Update()
        {
            SqlParameter[] parameterValues = GetUpdateParameterValues();
            
			SqlHelper.Default.ExecuteNonQuery("spProductPeriodicSummary_UpdRec", parameterValues);
        }
        
        /// <summary>
        /// Gets the SQL parameter.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="direction">The direction.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameter(string name, ParameterDirection direction, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            p.Direction = direction;
            return p;
        }

        private SqlParameter[] GetInsertParameterValues()
        {
            SqlParameter[] prams = new SqlParameter[15];
            prams[0] = GetSqlParameter("@PeriodicSummaryId", ParameterDirection.Output, SqlDbType.UniqueIdentifier, 16, this.PeriodicSummaryId);
            prams[1] = GetSqlParameter("@ProductId", ParameterDirection.Input, SqlDbType.UniqueIdentifier, 16, this.ProductId);
            prams[2] = GetSqlParameter("@FiscalYear", ParameterDirection.Input, SqlDbType.Int, 4, this.FiscalYear);
            prams[3] = GetSqlParameter("@Period", ParameterDirection.Input, SqlDbType.Int, 4, this.Period);
            prams[4] = GetSqlParameter("@PeriodStartedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.PeriodStartedOn);
            prams[5] = GetSqlParameter("@PeriodEndedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.PeriodEndedOn);
            prams[6] = GetSqlParameter("@BFQTY", ParameterDirection.Input, SqlDbType.Decimal, 9, this.BFQTY);
            prams[7] = GetSqlParameter("@BFAMT", ParameterDirection.Input, SqlDbType.Money, 8, this.BFAMT);
            prams[8] = GetSqlParameter("@CDQTY", ParameterDirection.Input, SqlDbType.Decimal, 9, this.CDQTY);
            prams[9] = GetSqlParameter("@AverageCost", ParameterDirection.Input, SqlDbType.Money, 8, this.AverageCost);
            prams[10] = GetSqlParameter("@LastCost", ParameterDirection.Input, SqlDbType.Money, 8, this.LastCost);
            prams[11] = GetSqlParameter("@LastPurchasedOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.LastPurchasedOn);
            prams[12] = GetSqlParameter("@LastPurchasedQty", ParameterDirection.Input, SqlDbType.Decimal, 9, this.LastPurchasedQty);
            prams[13] = GetSqlParameter("@LastSoldOn", ParameterDirection.Input, SqlDbType.DateTime, 8, this.LastSoldOn);
            prams[14] = GetSqlParameter("@LastSoldQty", ParameterDirection.Input, SqlDbType.Decimal, 9, this.LastSoldQty);
            return prams;
        }
		
        /// <summary>
        /// Gets the SQL parameter without direction.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="dbType">Type of the db.</param>
        /// <param name="size">The size.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private SqlParameter GetSqlParameterWithoutDirection(string name, SqlDbType dbType, int size, object value)
        {
            SqlParameter p = new SqlParameter(name, dbType, size);
            p.Value = value;
            return p;
        }
        
        private SqlParameter[] GetUpdateParameterValues()
        {
            return new SqlParameter[] 
            {
                GetSqlParameterWithoutDirection("@PeriodicSummaryId", SqlDbType.UniqueIdentifier, 16, this.PeriodicSummaryId),
                GetSqlParameterWithoutDirection("@ProductId", SqlDbType.UniqueIdentifier, 16, this.ProductId),
                GetSqlParameterWithoutDirection("@FiscalYear", SqlDbType.Int, 4, this.FiscalYear),
                GetSqlParameterWithoutDirection("@Period", SqlDbType.Int, 4, this.Period),
                GetSqlParameterWithoutDirection("@PeriodStartedOn", SqlDbType.DateTime, 8, this.PeriodStartedOn),
                GetSqlParameterWithoutDirection("@PeriodEndedOn", SqlDbType.DateTime, 8, this.PeriodEndedOn),
                GetSqlParameterWithoutDirection("@BFQTY", SqlDbType.Decimal, 9, this.BFQTY),
                GetSqlParameterWithoutDirection("@BFAMT", SqlDbType.Money, 8, this.BFAMT),
                GetSqlParameterWithoutDirection("@CDQTY", SqlDbType.Decimal, 9, this.CDQTY),
                GetSqlParameterWithoutDirection("@AverageCost", SqlDbType.Money, 8, this.AverageCost),
                GetSqlParameterWithoutDirection("@LastCost", SqlDbType.Money, 8, this.LastCost),
                GetSqlParameterWithoutDirection("@LastPurchasedOn", SqlDbType.DateTime, 8, this.LastPurchasedOn),
                GetSqlParameterWithoutDirection("@LastPurchasedQty", SqlDbType.Decimal, 9, this.LastPurchasedQty),
                GetSqlParameterWithoutDirection("@LastSoldOn", SqlDbType.DateTime, 8, this.LastSoldOn),
                GetSqlParameterWithoutDirection("@LastSoldQty", SqlDbType.Decimal, 9, this.LastSoldQty)
            };
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("periodicSummaryId: " + periodicSummaryId.ToString()).Append("\r\n");
            builder.Append("productId: " + productId.ToString()).Append("\r\n");
            builder.Append("fiscalYear: " + fiscalYear.ToString()).Append("\r\n");
            builder.Append("period: " + period.ToString()).Append("\r\n");
            builder.Append("periodStartedOn: " + periodStartedOn.ToString()).Append("\r\n");
            builder.Append("periodEndedOn: " + periodEndedOn.ToString()).Append("\r\n");
            builder.Append("bFQTY: " + bFQTY.ToString()).Append("\r\n");
            builder.Append("bFAMT: " + bFAMT.ToString()).Append("\r\n");
            builder.Append("cDQTY: " + cDQTY.ToString()).Append("\r\n");
            builder.Append("averageCost: " + averageCost.ToString()).Append("\r\n");
            builder.Append("lastCost: " + lastCost.ToString()).Append("\r\n");
            builder.Append("lastPurchasedOn: " + lastPurchasedOn.ToString()).Append("\r\n");
            builder.Append("lastPurchasedQty: " + lastPurchasedQty.ToString()).Append("\r\n");
            builder.Append("lastSoldOn: " + lastSoldOn.ToString()).Append("\r\n");
            builder.Append("lastSoldQty: " + lastSoldQty.ToString()).Append("\r\n");
            builder.Append("\r\n");
            return builder.ToString();
        }	
		
		#region Load ComboBox
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, new string[]{ TextField });
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, false, string.Empty, string.Empty, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, new String[] { TextField });
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. "FieldName"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string TextField, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			string [] textField = {TextField};
			LoadCombo(ref ddList, textField, "{0}", SwitchLocale, BlankLine, BlankLineText, ParentFilter, WhereClause, OrderBy);
		}

        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string WhereClause, string[] OrderBy)
		{
			LoadCombo(ref ddList, TextField, TextFormatString, SwitchLocale, BlankLine, BlankLineText, string.Empty, WhereClause, OrderBy);
		}
		
        /// <summary>
        /// Only support the ComboBox control from WinForm/Visual WebGUI
        /// </summary>
        /// <param name="ddList">the ComboBox control from WinForm/Visual WebGUI</param>
        /// <param name="TextField">e.g. new string[]{"FieldName1", "FieldName2", ...}</param>
        /// <param name="TextFormatString">e.g. "{0} - {1}"</param>
        /// <param name="SwitchLocale">Can be localized, if the FieldName has locale suffix, e.g. '_chs'</param>
        /// <param name="BlankLine">add blank label text to ComboBox or not</param>
        /// <param name="BlankLineText">the blank label text</param>
        /// <param name="ParentFilter">e.g. "ForeignFieldName = 'value'"</param>
        /// <param name="WhereClause">Where Clause for SQL Statement. e.g. "FieldName = 'SomeCondition'"</param>
        /// <param name="OrderBy">Sorting order, string array, e.g. {"FieldName1", "FiledName2"}</param>
		public static void LoadCombo(ref ComboBox ddList, string [] TextField, string TextFormatString, bool SwitchLocale, bool BlankLine, string BlankLineText, string ParentFilter, string WhereClause, string[] OrderBy)
		{
			if (SwitchLocale)
			{
				TextField = GetSwitchLocale(TextField);
			}
			ddList.Items.Clear();						
			
			ProductPeriodicSummaryCollection source;
            
            if(OrderBy == null || OrderBy.Length == 0)
            {
			    OrderBy = TextField;
            }
			
			if (WhereClause.Length > 0)
			{
				source = ProductPeriodicSummary.LoadCollection(WhereClause, OrderBy, true);
			}
			else
			{
				source = ProductPeriodicSummary.LoadCollection(OrderBy, true);
			}
			
            Common.ComboList sourceList = new Common.ComboList();

			if (BlankLine)
			{
                sourceList.Add(new Common.ComboItem(BlankLineText, Guid.Empty));
			}
			
			foreach (ProductPeriodicSummary item in source)
			{
				bool filter = false;
				if (ParentFilter.Trim() != String.Empty)
				{
					filter = true;
					if (item.ProductId != Guid.Empty)
					{
						filter = IgnorThis(item, ParentFilter);
					}
				}
				if (!(filter))
				{
                    string code = GetFormatedText(item, TextField, TextFormatString);
                    sourceList.Add(new Common.ComboItem(code, item.PeriodicSummaryId));
				}
			}			

            ddList.DataSource = sourceList;
            ddList.DisplayMember = "Code";
            ddList.ValueMember = "Id";
			
			if (ddList.Items.Count > 0)
			{
			    ddList.SelectedIndex = 0;
            }
		}
		
		#endregion
		
		
		private static bool IgnorThis(ProductPeriodicSummary target, string parentFilter)
		{
			bool result = true;
			parentFilter = parentFilter.Replace(" ", "");		// remove spaces
			parentFilter = parentFilter.Replace("'", "");		// remove '
			string [] parsed = parentFilter.Split('=');			// parse

			if (target.ProductId == Guid.Empty)
			{
				PropertyInfo pi = target.GetType().GetProperty(parsed[0]);
				string filterField = (string)pi.GetValue(target, null);
				if (filterField.ToLower() == parsed[1].ToLower())
				{
					result = false;
				}
			}
			else
			{
				ProductPeriodicSummary parentTemplate = ProductPeriodicSummary.Load(target.ProductId);
				result = IgnorThis(parentTemplate, parentFilter);
			}
			return result;
		}

		private static string GetFormatedText(ProductPeriodicSummary target, string [] textField, string textFormatString)
		{
			for (int i = 0; i < textField.Length; i++)
			{
				PropertyInfo pi = target.GetType().GetProperty(textField[i]);
				textFormatString = textFormatString.Replace("{" + i.ToString() +"}", pi != null ? pi.GetValue(target, null).ToString() : string.Empty);
			}
			return textFormatString;
		}
		
		private static string [] GetSwitchLocale(string [] source)
		{
			switch (Common.Config.CurrentLanguageId)
			{
				case 2:
					source[source.Length - 1] += "_Chs";
					break;
				case 3:
					source[source.Length - 1] += "_Cht";
					break;
			}
			return source;
		}
    }


    /// <summary>
    /// Represents a collection of <see cref="ProductPeriodicSummary">ProductPeriodicSummary</see> objects.
    /// </summary>
    public class ProductPeriodicSummaryCollection : BindingList< ProductPeriodicSummary>
    {
	}
}
